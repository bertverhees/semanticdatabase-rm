[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils]
[import soft::generator::ts::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]


[template public generateType(aElement : ETypedElement) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
void
[else]
	[let aDataType : EGenericType = aElement.eGenericType]
    [let aPackage : EPackage = aElement.getEPackage()]
    [if aElement.isMapType()]
		[getShortQualifiedName('ecore.EMap', aPackage.name )/]<[aDataType.generateMapKeyType(aPackage)/],[aDataType.generateMapValueType(aPackage)/]>
	[elseif aElement.isListType()]
        [getShortQualifiedName('ecore.EList', aPackage.name )/]<[aDataType.generateListTypeParameters(aPackage)/]>
    [else]
        [aDataType.generateType(aPackage)/][if aDataType.eClassifier.name <> 'EJavaClass' and aDataType.eTypeArguments->notEmpty()]<[for (g : EGenericType | aDataType.eTypeArguments) separator (',')][getShortQualifiedName(g.eClassifier.getType(),aPackage.name)/][/for]>[/if]
    [/if]
    [/let]
	[/let]
[/if]
[/template]

[template public generateMapTypeParameters(anEDataType : EGenericType, aPackage : EPackage ) post(trim())]
[anEDataType.generateMapKeyType(aPackage)/],[anEDataType.generateMapValueType(aPackage)/]	
[/template]

[template public generateListTypeParameters(anEDataType : EGenericType, aPackage : EPackage) post(trim())]
[anEDataType.generateType(aPackage)/]
[/template]

[template private generateMapKeyType(anEDataType : EGenericType, aPackage : EPackage) post(trim())]
[anEDataType.generateMapTypeParameter(aPackage,1,'key')/]
[/template]

[template private generateMapValueType(anEDataType : EGenericType, aPackage : EPackage) post(trim())]
[anEDataType.generateMapTypeParameter(aPackage,2,'value')/]
[/template]

[template private generateMapTypeParameter(anEDataType : EGenericType, aPackage : EPackage, index : Integer, featureName : String) post(trim())]
[if anEDataType.eTypeArguments->size() = 2]
[let keyType : EGenericType = anEDataType.eTypeArguments->at(index)]
[getShortQualifiedName(keyType.eClassifier.getType(),aPackage.name)/]
[/let]
[elseif anEDataType.eClassifier.oclIsKindOf(EClass) and anEDataType.eClassifier.oclAsType(EClass).isMapEntry()]
[let mapEntryClass : EClass = anEDataType.eClassifier.oclAsType(EClass)]
[let keyFeature : EStructuralFeature = mapEntryClass.getEStructuralFeature(featureName)]
[let keyType : EGenericType = keyFeature.eGenericType]
[getShortQualifiedName(keyType.eClassifier.getType(),aPackage.name)/]
[/let]
[/let]
[/let]
[else]
any
[/if]
[/template]


[template public generateType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
void
[else]
[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.getParameterName()/] : [sParameter.generateType()/][/for]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'java.lang.Boolean', 'boolean', 'boolean', 'false' , 'true'},
        Sequence{ 'java.lang.Integer', 'int', 'number' , '0', '45'},
		Sequence{ 'java.lang.Byte','java.lang.Character', 'char', 'byte' ,'\'\'', '\'a\''},
		Sequence{ 'byte[]','Uint8Array' , 'nil', 'nil'},
		Sequence{ 'java.util.Date', 'Date', 'null', 'Date.now()'},
		Sequence{ 'java.lang.Double', 'java.math.BigDecimal', 'double', 'number' , '0.0' , '3.5'},
		Sequence{ 'java.lang.Float' , 'float' , 'number' , '0.0', '1.2'},
		Sequence{ 'java.lang.Class' , 'any', 'null', ''},
		Sequence{ 'java.lang.Object', 'any', 'null', 'null'},
		Sequence{ 'java.lang.Long' , 'java.math.BigInteger', 'long' , 'number' , '0', '45'},
        Sequence{ 'java.util.Map' , 'ecore.EMap', 'null', 'null'},
        Sequence{ 'java.util.Map$Entry' , 'ecore.EMapEntry', 'null' , 'null'},
		Sequence{ 'java.lang.Short' , 'short' , 'number' , '0', '2'},
        Sequence{ 'java.lang.String' , 'string', '""' , '"Test String"'},
		

		Sequence{ 'org.eclipse.emf.common.util.DiagnosticChain', 'ecore.EDiagnosticChain', 'null', 'null'},
		Sequence{ 'org.eclipse.emf.common.util.EList', 'ecore.EList', 'null', 'new BasicEList()'},
		Sequence{ 'org.eclipse.emf.common.util.Enumerator', 'any', 'null', 'null'},
		Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap', 'any', 'null', 'null'},
        Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap$Entry', 'any', 'null', 'null'},
        Sequence{ 'org.eclipse.emf.ecore.resource.Resource', 'ecore.EResource', 'null' , 'null'},
        Sequence{ 'org.eclipse.emf.ecore.resource.ResourceSet', 'ecore.EResourceSet', 'null' , 'null'},
		Sequence{ 'org.eclipse.emf.common.util.TreeIterator', 'IterableIterator', 'null' , 'null'}
    }
/]

[query public getInstanceTypeName( aClassifier : EClassifier ) : String =
	let instanceTypeName : String = 
	if hasKey(aClassifier, 'instanceTypeName') then
		aClassifier.valueKey('instanceTypeName')
	else if not aClassifier.instanceTypeName.oclIsUndefined() then
		aClassifier.instanceTypeName
	else if aClassifier.oclIsKindOf(EClass) then
		aClassifier.oclAsType(EClass).getQualifiedInterfaceName()
	else
		''
	endif endif endif in
	let tsTypeName : String = getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = instanceTypeName) then
            s->at( s->size() - 2 )
        else
            res
        endif
    else 
        res 
    endif
	) in
	if tsTypeName = '' then
		instanceTypeName
	else
		tsTypeName
	endif
/] 


[query public getType(aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'any'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceName()/]
[query private getType( aEnum : EEnum ) : String = aEnum.ePackage.name + '.' + aEnum.name/]
[query private getType( aDataType : EDataType ) : String = aDataType.getInstanceTypeName()/]


[query public getDefaultValue(anEAttribute : EAttribute, aContext : EClass) : String = anEAttribute.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(anEAttribute : EAttribute, aContext : EPackage) : String = 
	if anEAttribute.many then '' 
	else if (defaultValueLiteral->notEmpty()) then eType.getDefaultValueFromLiteral(aContext,defaultValueLiteral) else eType.getDefaultValue(aContext) 
	endif endif
/]


[query private getDefaultValueFromLiteral(aClassifier : EClassifier, aContext : EPackage, literal : String ) : String =
	 if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValueFromLiteral(aContext,literal)
	 else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValueFromLiteral(aContext,literal)
	 else literal endif endif
/]

[query private getDefaultValueFromLiteral(aEnum : EEnum, aContext : EPackage, literal : String ) : String =
	let eLiterals : OrderedSet(EEnumLiteral) = aEnum.eLiterals->select( el : EEnumLiteral | el.name = literal ) in
	if eLiterals->isEmpty() then
		literal 
	else
		getShortQualifiedName(aEnum.ePackage.name + '.' + eLiterals->first().name.toUpperCase(), aContext.name)		
	endif
/]

[query private getDefaultValueFromLiteral(aDataType : EDataType, aContext : EPackage, literal : String ) : String = 
	literal
/]

[query public getDefaultValue(aClassifier : EClassifier, aContext : EClass) : String = aClassifier.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aClassifier : EClassifier, aContext : EPackage) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue(aContext)
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue(aContext)
    else 'null' endif endif
/]

[query public getDefaultValue(aEnum : EEnum, aContext : EClass) : String = aEnum.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aEnum : EEnum, aContext : EPackage) : String = if aEnum.eLiterals->notEmpty() then getShortQualifiedName(aEnum.ePackage.name + '.' + aEnum.name + '.' + aEnum.eLiterals->at(1).name.toUpperCase(), aContext.name) else 0 endif/]

[query public getDefaultValue(aDataType : EDataType, aContext : EClass) : String = aDataType.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aDataType : EDataType, aContext : EPackage) : String =
	if hasKey(aDataType, 'defaultValue') then
		aDataType.valueKey('defaultValue')
	else if aDataType.name <> 'EChar' and not aDataType.defaultValue.oclIsUndefined() then
		aDataType.defaultValue.toString()
	else
		let typeName : String = aDataType.getInstanceTypeName() in
	    getAllDataTypes()->iterate( s ; res : String = '' |
	    if res = '' then
	        if s->exists(n : String | n = typeName) then
	            getShortQualifiedName(s->at( s->size() - 1 ) , aContext.name)
	        else
	            res
	        endif
	    else 
	        res 
	    endif	
 		) 
	endif endif
/]

[query private getAllImportModules(aPackage : EPackage) : OclAny =
    let namespacesToPackages : OclAny = 
    if (aPackage.hasGenAnnotation()) then
        let annotations : Sequence(String) = aPackage.getGenAnnotation().details->select(key = 'importModule').value in
        annotations->iterate( annotation : String ; res : OclAny = mapNew('getNamespaceToModule_' + aPackage.name) | (
            let index : Integer = annotation.index(':') in 
            if index = -1 then
                res
            else
                res.mapPut(annotation.substring(1,index-1),annotation.substring(index+1)) 
            endif
        ))
    else
        mapNew('getNamespaceToModule_' + aPackage.name)
    endif in
    namespacesToPackages.mapPut('ecore','@masagroup/ecore')
/]

[query public getImportModule(aPackage : EPackage, namespace : String ) : String =
    getAllImportModules().mapGetOrDefault(namespace, namespace)
/]

[template public generateImports(aPackage : EPackage ,allTypes : OrderedSet(String), aElementName : String)]
[let namespaceToTypes : OclAny = allTypes->iterate( type : String ; res : OclAny = mapNew(aElementName) | (
   let namespace : String = getQualification(type) in
    if (namespace <> '') then
        let typeName : String = getUnQualifiedName(type) in
        let types : Sequence(OclAny) = res.mapGetOrDefault(namespace, Sequence{}).asSequence() in
        res.mapPut( namespace , types->append(typeName) )
    else
        res
    endif
))]
[for (namespace : OclAny | namespaceToTypes.mapKeys()->sortedBy(oclAsType(String)))]
[if (namespace = aPackage.name)]
import {
[for ( type : OclAny | namespaceToTypes.mapGet(namespace).asSequence()->asOrderedSet())]
    [type.oclAsType(String)/],
[/for]    
} from "./internal"
[else]
[let namespaceName : String = namespace.oclAsType(String)]
import * as [namespaceName/] from "[aPackage.getImportModule(namespaceName)/]"
[/let]
[/if]
[/for]
[/let]
[/template]
