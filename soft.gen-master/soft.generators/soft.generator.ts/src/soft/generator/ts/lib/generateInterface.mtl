[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement]
[import soft::generator::common::generateUtils]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateElement/]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]
[import soft::generator::ts::lib::generateOperation/]
[import soft::generator::ts::lib::generateStructuralFeature/]

[template public generateInterface(aClass : EClass) { 
    interfaceName : String = aClass.getInterfaceName(); 
    aPackage : EPackage = aClass.ePackage; 
    interfaceExtends : Sequence(String) = aClass.getInterfaceExtends();
    isDiamond : Boolean = interfaceExtends->size() > 1;
}]
[file (aPackage.getOutputDirectory() + '/' + aClass.getInterfaceFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

[let refTypes : Set(EClassifier) = if isDiamond then aClass.eSuperTypes.getReferencedTypes()->asSet() else aClass.getReferencedTypes()->asSet() endif]
[let mapType : Set(String) = if ( aClass.requiresMap() ) then Set{ 'ecore.EMap' } else Set{} endif]
[let listType : Set(String) = if ( aClass.requiresList() or isDiamond ) then Set{ 'ecore.EList' } else Set{} endif]
[let allTypes : OrderedSet(String) = Set{ interfaceExtends
                                        , refTypes->collect( type | type.getType())->asSet()
                                        , listType
                                        , mapType }->flatten()->select(s | s <> '' and s <> aClass.getQualifiedInterfaceName() )->asOrderedSet()->sortedBy(s | s)]
[aPackage.generateImports(allTypes,interfaceName)/]
[/let]
[/let]
[/let]
[/let]

export interface [interfaceName/][for ( extend : String | interfaceExtends ) before (' extends ') separator (', ')][getShortQualifiedName(extend,aPackage.name)/][/for]
{
[let attributes : OrderedSet(EAttribute) = aClass.eAttributes->asOrderedSet()->select( isGet() or isSet() )]
[if attributes->notEmpty()]
    // Attributes
    [attributes->asOrderedSet().generateDeclaration()/]
[/if]
[/let]
[let references : OrderedSet(EReference) = aClass.eReferences->asOrderedSet()->select( isGet() or isSet() )]
[if references->notEmpty()]
    // References
    [references.generateDeclaration()/]
[/if]
[/let]
[let operations : OrderedSet(EOperation) = aClass.eOperations->asOrderedSet()]
[if operations->notEmpty()]
    // Operations
    [operations.generateDeclaration()/]
[/if]
[/let]
}

[/file]
[/template]