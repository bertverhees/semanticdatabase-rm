[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryImplementation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]

[template public generateFactoryImplementation(aPackage : EPackage) { 
    className : String = aPackage.getFactoryImplementationName();
    classes : Sequence(EClass) = aPackage.eAllContents(EClass)->select( not interface and not abstract );  
}]
[file (aPackage.getOutputDirectory() + '/' + aPackage.getImplementationFileName(aPackage.getFactoryName() ), false, 'UTF-8')]
[fileComment()/]

[let allTypes : OrderedSet(String) = Set{ classes->collect(c | if c.hasExtension() then c.getQualifiedExtensionName() else c.getQualifiedImplementationName() endif)
                                        , aPackage.eClassifiers->selectByKind(EClass)->collect(c | c.getQualifiedInterfaceName() )
                                        , Set{'ecore.EObject' , 'ecore.EClass', 'ecore.EFactoryExt' , 'ecore.EDataType' }
                                        , Set{aPackage.name + '.' +  aPackage.getConstantsName() , aPackage.name + '.' + aPackage.getFactoryName() }
                                        , aPackage.eAllContents(EEnum)->iterate( aEnum : EEnum ; res : Set(String) = Set{} | ( 
                                                res->union(Set{ aPackage.name + '.' + aEnum.name
                                                              , aPackage.name + '.' + aEnum.name.toLowerFirst() + 'ToString'
                                                              , aPackage.name + '.' + aEnum.name.toLowerFirst() + 'FromString' })) )
                                        }->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s)]
[aPackage.generateImports(allTypes,className)/]
[/let]

export class [className/] extends [if not aPackage.isEcorePackage()]ecore.[/if]EFactoryExt implements [aPackage.getFactoryName()/] {
    
    private static _instance : [className/] = null;

    public static getInstance() : [className/] {
        if (!this._instance) {
            this._instance = new [className/]();
        }
        return this._instance;
    }

    protected constructor() {
        super();
    } 

    create(eClass: [getShortQualifiedName('ecore.EClass',aPackage.name)/]): [if not aPackage.isEcorePackage()]ecore.[/if]EObject {
        switch(eClass.classifierID){
[for (aClass : EClass | classes)]
        case [aClass.getQualifiedIDName()/]:
            return this.create[aClass.name/]();
[/for]
        default:
            throw new Error("create: " + eClass.classifierID + " not found");
        }
    }
[for (aClass : EClass | classes)]

    create[aClass.name/](): [aClass.getInterfaceName()/] {
        return new [if aClass.hasExtension()][aClass.getExtensionName()/][else][aClass.getImplementationName()/][/if]();
    }
    [let ref : OrderedSet(EReference) = aClass.getAllContainers()]
    [for(aReference:EReference | ref->sortedBy(name))]

    create[aClass.name/]FromContainer(eContainer:[aReference.eGenericType.eClassifier.name/]): [aClass.getInterfaceName()/] {
        [generateCreateFunctionContent(aClass, aReference, false)/]
    }
    [if(aClass.getElementIDAccessorName().size() > 0)]

    create[aClass.name/]FromContainerAndClassID(eContainer:[aReference.eGenericType.eClassifier.name/],classID: number): [aClass.getInterfaceName()/] {
        [generateCreateFunctionContent(aClass, aReference, true)/]
    }
    [/if]
    [/for]
    [/let]
[/for]
[let dataTypes : Sequence(EDataType) = aPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name)]

    createFromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType,literalValue: string): any {
        switch (eDataType.classifierID) {
        [for (aDataType : EDataType | dataTypes)]
            case [aDataType.getQualifiedIDName()/]:
                return this.create[aDataType.name/]FromString(eDataType, literalValue);
        [/for]
            default:
                throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    }

    convertToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string {
        switch (eDataType.classifierID) {
        [for (aDataType : EDataType | dataTypes)]
        case [aDataType.getQualifiedIDName()/]:
            return this.convert[aDataType.name/]ToString(eDataType, instanceValue);
        [/for]
        default:
            throw new Error("The datatype '" + eDataType.name + "' is not a valid classifier");
        }
    }
    [for (aDataType : EDataType | dataTypes)]

    [aPackage.generateCreateFromString(aDataType)/]

    [aPackage.generateConvertToString(aDataType)/]
    [/for]
[/let]
}

[/file]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let enumTypeName : String = aDataType.name ]
create[enumTypeName/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
    return [enumTypeName.toLowerFirst()/]FromString(literalValue);
}
[/let]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'string')]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
   return literalValue;
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'boolean')]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
   return literalValue.toLowerCase() === "true";
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'number')]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
    return Number(literalValue);
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'byte')]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
    if (literalValue.length == 0 ) {
        return '\0';
    } else {
        return literalValue['['/]0[']'/];
    }
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'Uint8Array')]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
    return new TextEncoder().encode(literalValue);
}

[/template]


[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType )]
create[aDataType.name/]FromString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue: string): any {
    throw new Error("NotImplementedException");
}
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let enumTypeName : String = aDataType.name ]
convert[enumTypeName/]ToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string { 
    return [enumTypeName.toLowerFirst()/]ToString(instanceValue as [enumTypeName/]);
}
[/let]
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? ( aDataType.getType() = 'string' )]
convert[aDataType.name/]ToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string { 
    return instanceValue as string;
}
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType )
    ? ( aDataType.getType() = 'number' or
        aDataType.getType() = 'boolean' or
        aDataType.getType() = 'byte'
      )]
convert[aDataType.name/]ToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string { 
    return instanceValue.toString();
}
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? ( aDataType.getType() = 'Uint8Array' )]
convert[aDataType.name/]ToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string { 
    return new TextDecoder().decode(instanceValue as Uint8Array);
}
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType )]
convert[aDataType.name/]ToString(eDataType: [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue: any): string { 
    throw new Error("NotImplementedException");
}
[/template]

[template public generateCreateFunctionContent(aClass : EClass, aReference : EReference, addID : Boolean)]
let element = new [if aClass.hasExtension()][aClass.getExtensionName()/][else][aClass.getImplementationName()/][/if]();
[if(addID)]
element.[aClass.getElementIDAccessorName().toLowerFirst()/]ID = classID;
[/if]
[if(not aReference.eOpposite.name.oclIsUndefined())]
if (eContainer != null) {
[if(aReference.eOpposite.upperBound <> 1)]
    eContainer.[aReference.eOpposite.name/].add(element);
[else]
    eContainer.[aReference.eOpposite.name/] = element;
[/if]
}
[/if]
return element
[/template]
