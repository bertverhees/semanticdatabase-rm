[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon]
[import soft::generator::common::generateElement]
[import soft::generator::common::generateStructuralFeature]

[import soft::generator::ts::generateCommon/]
[import soft::generator::ts::generateElement/]
[import soft::generator::ts::generateType/]
[import soft::generator::ts::lib::generateCommon/]
[import soft::generator::ts::lib::generateOperation/]
[import soft::generator::ts::lib::generateReflectives/]
[import soft::generator::ts::lib::generateStructuralFeature/]

[template public generateImplementation(aClass : EClass) { 
    className : String = aClass.getImplementationName();
    classExtend : String = aClass.getClassExtends(); 
    features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( getVariableName() );
    variableFeatures : Collection(EStructuralFeature) = features->select(isField());
    initializerFeatures : Collection(EStructuralFeature) = features->select(hasInitializationMethod());
    operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName());
    aPackage : EPackage = aClass.ePackage; 
    classImplements : Sequence(String) = aClass.getClassImplements();
}]
[file (aPackage.getOutputDirectory() + '/' + aClass.getImplementationFileName( aClass.name ), false, 'UTF-8')]
[fileComment()/]

[let allTypes : OrderedSet(String) = Set{ aClass.getReferencedTypes()->collect( cls | cls.getType() )->asSet()
                                        , if aClass.requiresMap() then Set{ 'ecore.EMap', 'ecore.BasicEObjectMap', 'ecore.EMapEntry' } else Set{} endif
                                        , if aClass.requiresList() then Set{ 'ecore.EList', 'ecore.BasicEList', 'ecore.BasicEObjectList', aPackage.getQualifiedConstantsName() } else Set{} endif
                                        , if aClass.hasReflectives() then Set{'ecore.EObject','ecore.EObjectInternal','ecore.EList','ecore.ENotifyingList','ecore.ENotificationChain','ecore.isEObjectList'} else Set{} endif
                                        , if features->exists(requiresNotification()) then Set{'ecore.ENotification','ecore.ENotificationChain','ecore.EventType','ecore.Notification','ecore.EOPPOSITE_FEATURE_BASE', aPackage.getQualifiedConstantsName() } else Set{} endif
                                        , if features->exists(isContainer()) then Set{aPackage.getQualifiedConstantsName()} else Set{} endif
                                        , Set {classExtend, 'ecore.EClass','ecore.isEObjectInternal', aPackage.name + '.' + 'get'+ aPackage.getInterfaceName()}
                                        , classImplements->asSet()
                                        }->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s)]
[aPackage.generateImports(allTypes,className)/]
[/let]

export class [className/] extends [getShortQualifiedName(classExtend, aPackage.name)/] [for ( interface : String | classImplements) before(' implements ') separator (',')][getShortQualifiedName(interface,aPackage.name)/][/for]
{
[let dataDeclarationFeatures : Set(EStructuralFeature) = features->select( isField() )]
    [dataDeclarationFeatures.generateVariableDeclaration()/]
[/let]

    constructor() {
        super();
        [variableFeatures.generateVariableInitialization(aClass)/]
    }

    eStaticClass() : [if not aPackage.isEcorePackage()]ecore.[/if]EClass {
        return get[aPackage.getInterfaceName()/]().[aClass.getReflectiveGetterName()/]()
    }

    [features.generateImplementation(aClass)/]

    [operations.generateImplementation(aClass)/]

    [initializerFeatures.generateVariableInitializationMethodDefinition(aClass)/]

    [aClass.generateReflectivesDefinition()/]
}

[/file]
[/template]