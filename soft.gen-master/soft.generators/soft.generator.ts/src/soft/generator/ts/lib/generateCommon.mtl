[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::ts::generateCommon/]


[**
 * Classes Onthology
*/]
[query public getInterfaceExtends(aClass : EClass ) : Sequence(String) =
    if ( aClass.eSuperTypes->isEmpty() ) then
        if ( aClass.name = 'EObject' ) then
            Sequence{'ecore.ENotifier'}
        else
            Sequence{'ecore.EObject'}
        endif
    else
        aClass.eSuperTypes->iterate( cl ; res : Sequence(String) = Sequence{} | res->append(cl.getQualifiedInterfaceName()))
    endif
/]

[query public getClassExtends(aClass : EClass ) : String =
    let aPackage : EPackage = aClass.ePackage in 
    let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
        if ( aClass.name = 'EObject' ) then
            'ecore.BasicEObject'
        else if ( aPackage.hasKey('dynamic' ) and aPackage.valueKey('dynamic') = 'true' ) then
            'ecore.DynamicEObjectImpl'
        else
            'ecore.EObjectImpl'
        endif endif 
    else
        if ( extendsClass.hasExtension() ) then
            extendsClass.getQualifiedExtensionName()
        else
            extendsClass.getQualifiedImplementationName()
        endif
    endif
/]

[query public getClassImplements(aClass : EClass ) : Sequence(String) = Sequence{ aClass.getQualifiedInterfaceName() }/]

[query public getPropertyName( aFeature : EStructuralFeature ) : String =
if aFeature.eType.name = 'EBoolean' then 'is' + aFeature.name.toUpperFirst() else aFeature.name endif/]

[query public getVariableName( aFeature : EStructuralFeature ) : String = 
'_' + aFeature.getPropertyName()/]

