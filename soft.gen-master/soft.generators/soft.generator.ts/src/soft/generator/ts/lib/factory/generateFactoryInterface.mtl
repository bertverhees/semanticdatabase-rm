[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *  
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryInterface('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]

[template public generateFactoryInterface(aPackage : EPackage) { 
    className : String = aPackage.getFactoryName(); 
    packageName : String = aPackage.name;
    extension : Boolean = aPackage.hasKey('factory') and aPackage.valueKey('factory') = 'extension';
    factoryName : String = if extension then aPackage.getFactoryExtensionName() else aPackage.getFactoryImplementationName() endif;
}]
[file (aPackage.getOutputDirectory() + '/' + aPackage.getInterfaceFileName(aPackage.getFactoryName() ), false, 'UTF-8')]
[fileComment()/]

[let allTypes : OrderedSet(String) = Set{ aPackage.eClassifiers->selectByKind(EClass)->collect(c | c.getQualifiedInterfaceName() )
                                        , Set{'ecore.EFactory' , aPackage.name + '.' + factoryName }
                                        }->flatten()->select(s | s <> '')->asOrderedSet()->sortedBy(s | s)]
[aPackage.generateImports(allTypes,className)/]
[/let]

export interface [className/] extends [if not aPackage.isEcorePackage()]ecore.[/if]EFactory {
[for (aEClass : EClass | aPackage.eAllContents(EClass)->sortedBy(name))]
[if (aEClass.abstract = false)]

    create[aEClass.name/]() : [aEClass.getInterfaceName()/];
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
    create[aEClass.name/]FromContainer(eContainer: [aReference.generateType()/]): [aEClass.getInterfaceName()/];
[if(aEClass.getElementIDAccessorName().size() > 0)]
    create[aEClass.name/]FromContainerAndClassID(eContainer: [aReference.generateType()/],classID: number ): [aEClass.getInterfaceName()/];
[/if]
[/for]
[/let]
[/if]
[/for]
}

export function get[className/]() : [className/] {
    return [factoryName/].getInstance();
}

[/file]
[/template]
