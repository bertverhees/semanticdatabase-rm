[**
 * This file is part of soft.generator.ts, a project for typescript 
 * code generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageImplementation('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generatePackage/]
[import soft::generator::common::generateUtils/]
[import soft::generator::ts::generateCommon /]
[import soft::generator::ts::generateType /]
[import soft::generator::ts::lib::pack::generateCommon/]




[template public generatePackageImplementation(aPackage : EPackage){ 
    className : String = aPackage.getImplementationName();
    allClasses :  OrderedSet(EClass) = aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
    allDataTypes : OrderedSet(EDataType) = aPackage.eAllContents(EDataType)->asOrderedSet()->sortedBy(name);
    annotationSources : OrderedSet(String) = aPackage.getAnnotationSources();
}]
[file (aPackage.getOutputDirectory() + '/'+  aPackage.getImplementationFileName(aPackage.getPackageName()),false, 'UTF-8')]
[fileComment()/]

[let allTypes : OrderedSet(String) = OrderedSet{'ecore.EAttribute' 
                                               ,'ecore.EReference'
                                               ,'ecore.EClass'
                                               ,'ecore.EEnum'
                                               ,'ecore.EOperation' 
                                               ,'ecore.EDataType'
                                               ,'ecore.EcoreFactory'
                                               ,'ecore.EPackageExt'
                                               ,'ecore.getEcoreFactory' 
                                               , aPackage.name + '.' + aPackage.getInterfaceName()
                                               , aPackage.name + '.' + aPackage.getConstantsName()
                                               , aPackage.name + '.' + 'get' + aPackage.getFactoryName()
}->sortedBy(s | s)]
[aPackage.generateImports(allTypes,className)/]
[/let]

export class [className/] extends [if not aPackage.isEcorePackage()]ecore.[/if]EPackageExt implements [aPackage.getInterfaceName()/] {

    private static _instance : [className/] = null;
    [allClasses.generateDataMember(aPackage)/]
    [allDataTypes.generateDataMember(aPackage)/]

    public static getInstance() : [className/] {
        if (!this._instance) {
            this._instance = new [className/]();
        }
        return this._instance;
    }

    private constructor() {
        super();
        this.name = [aPackage.getConstantsName()/].eNAME;
        this.nsPrefix = [aPackage.getConstantsName()/].eNS_PREFIX;
        this.nsURI = [aPackage.getConstantsName()/].eNS_URI;
        this.eFactoryInstance = get[aPackage.getFactoryName()/]();
        this.createPackageContents();
        this.initializePackageContents();
        this.createResource();
    }

[for (aClass : EClass | allClasses)]
    [aClass.generateGetter(aPackage)/]
    [aClass.eAttributes->sortedBy(name).generateGetter(aPackage)/]
    [aClass.eReferences->sortedBy(name).generateGetter(aPackage)/]
    [aClass.eOperations->sortedBy(name).generateGetter(aPackage)/]
[/for]
    [allDataTypes.generateGetter(aPackage)/]


    private createPackageContents() : void {
[if allClasses->notEmpty() or allDataTypes->notEmpty()]
        let factory = [getShortQualifiedName('ecore.getEcoreFactory', aPackage.name)/]();
[for (aClass : EClass | allClasses)]
    
        [aClass.generateCreation()/]
        [Sequence{ aClass.eStructuralFeatures, aClass.eOperations}->flatten().generateCreation()/]
[/for]

        [allDataTypes.generateCreation()/]
[/if]
    }

    private initializePackageContents() : void {

[if allClasses->notEmpty()]
        [allClasses.initSuperTypes()/]

        [for (aClass : EClass | allClasses)]
        [aClass.generateInitialization()/]
        [Sequence{ aClass.eAttributes, aClass.eReferences, aClass.eOperations}->flatten().generateInitialization(aPackage)/]
        [/for]
[/if]
[if allDataTypes->notEmpty()]
        [allDataTypes.generateInitialization(aPackage)/]
[/if]
[if not aPackage.isEcorePackage()]

[for (aAnnotationSource : String | annotationSources)]
        this.initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations()
[/for]
[/if]
    }

[if not aPackage.isEcorePackage()]
[for (aAnnotationSource : String | annotationSources)]
    private initialize[getAnnotationSourceIdentifier(aAnnotationSource)/]Annotations() : void {
        let source = "[aAnnotationSource/]";
        let factory = [getShortQualifiedName('ecore.getEcoreFactory', aPackage.name)/]();
        [for (eAnnotation : EAnnotation | aPackage.eAllContents(EAnnotation)->select( a | a.source = aAnnotationSource))]
        {
            let eAnnotation = factory.createEAnnotationFromContainer([eAnnotation.eModelElement.getPackageGetter()/]);
            eAnnotation.source = source;
            [for (eEntry : EStringToStringMapEntry | eAnnotation.details)]
            [let value : String = if eEntry.value.oclIsUndefined() then '' else eEntry.value endif]
            eAnnotation.details.put("[eEntry.key/]","[value.replaceAll('\\\\','\\\\\\\\').replaceAll('"', '\\\\"').replaceAll('\\n','\\\\n').replaceAll('\\r','\\\\r')/]")
            [/let]
            [/for]
        }
        [/for]
    }

[/for]
[/if]   
}

[/file]
[/template]



[query private getInstanceName(anENamedElement : ENamedElement) : String = 
    if anENamedElement.oclIsKindOf(EDataType) then 
        anENamedElement.oclAsType(EDataType).getInstanceName()
    else if anENamedElement.oclIsKindOf(EClass) then 
        anENamedElement.oclAsType(EClass).getInstanceName() 
    else if anENamedElement.oclIsKindOf(EStructuralFeature) then 
        anENamedElement.oclAsType(EStructuralFeature).getInstanceName()
    else if anENamedElement.oclIsKindOf(EOperation) then
        anENamedElement.oclAsType(EOperation).getInstanceName()
    else
        anENamedElement.name.toLowerFirst()
    endif endif endif endif
/]
[query private getInstanceName(aDataType : EDataType) : String = '_' + aDataType.name.toLowerFirst() + 'Type'/]
[query private getInstanceName(aClass : EClass) : String = '_' + aClass.name.toLowerFirst() + 'Class'/]
[query private getInstanceName(aStructural : EStructuralFeature) : String = '_' + aStructural.eContainingClass.name.toLowerFirst() + '_' + aStructural.name.toUpperFirst() /]
[query private getInstanceName(aOperation : EOperation) : String = '_' + aOperation.eContainingClass.name.toLowerFirst() + '_' + aOperation.name.toUpperFirst() + aOperation.getParameterListName() /]
[query private getParameterListName( aOperation : EOperation) : String = if aOperation.eParameters->notEmpty() then '_' + aOperation.getParameterListDetailsName() else '' endif /]
[query private getParameterListDetailsName(aOperation : EOperation) : String = if aOperation.eParameters->size()>1 then aOperation.eParameters->first().eType.name + '_' + aOperation.eParameters->last().eType.name else aOperation.eParameters->first().eType.name endif /]

[query private getPackageGetter(aModelElement : EModelElement) : String =
    if aModelElement.oclIsKindOf(EPackage) then  
        'this'
    else if aModelElement.oclIsKindOf(EEnumLiteral) then 
        let aEnumLiteral : EEnumLiteral = aModelElement.oclAsType(EEnumLiteral) in 
        aEnumLiteral.eEnum.getPackageGetter() + '.getEEnumLiteralByName("' + aEnumLiteral.name +'")' 
    else if aModelElement.oclIsKindOf(ENamedElement) then 
        aModelElement.oclAsType(ENamedElement).getPackageGetter()
    else 
        'nil' 
    endif endif endif/]
[query private getPackageGetter(aNamedElement : ENamedElement) : String = if oclIsUndefined() then 'null' else 'this.' + aNamedElement.getReflectiveGetterName() + '()' endif/]

[query private getPackageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature) : String = getPackageGetter(aEClassifier,aStruct.eContainingClass) /]
[query private getPackageGetter(aEClass : EClass, supertype : EClass) : String = getPackageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier)) /]
[query private getPackageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier) : String = getPackageInstance(aEClassifier1, aEClassifier2) + aEClassifier1.getReflectiveGetterName() + '()' /]
[query private getPackageInstance(aClassifier1 : EClassifier ,aClassifier2 : EClassifier ) : String = if(aClassifier1.ePackage.name = aClassifier2.ePackage.name ) then 'this.' else  aClassifier1.ePackage.name + '.get' + aClassifier1.ePackage.getInterfaceName() + '().'  endif /]
[query private getPackageGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'null' else getPackageInstance(anEClassifier, anOperation.eContainingClass) + anEClassifier.getReflectiveGetterName() + '()' endif/]



[template private generateDataMember(anENamedElement : ENamedElement, aPackage : EPackage)] 
private [anENamedElement.getInstanceName()/] : [aPackage.getMetaType(anENamedElement)/]; 

[/template]

[template private generateGetter(aClassifier : EClassifier, anEPackage : EPackage)]
[aClassifier.getReflectiveGetterName()/]() : [anEPackage.getMetaType(aClassifier)/] {
    return this.[aClassifier.getInstanceName()/];
}

[/template]

[template private generateGetter(aFeature : EStructuralFeature, anEPackage : EPackage)]
[let aClass : EClass = aFeature.eContainingClass]
[aFeature.getReflectiveGetterName()/]() : [anEPackage.getMetaType(aFeature)/] {
    return this.[aClass.getInstanceName()/].eStructuralFeatures.get([aClass.eStructuralFeatures->indexOf(aFeature)-1/]) as [anEPackage.getMetaType(aFeature)/];
}
[/let]
[/template]

[template private generateGetter(aOperation : EOperation, anEPackage : EPackage)]
[let aClass : EClass = aOperation.eContainingClass]
[aOperation.getReflectiveGetterName()/]() : [anEPackage.getMetaType(aOperation)/] {
    return this.[aClass.getInstanceName()/].eOperations.get([aClass.eOperations->indexOf(aOperation)-1/]) as [anEPackage.getMetaType(aOperation)/];
}
[/let]
[/template]

[template private generateCreation(aEClass : EClass)]
this.[aEClass.getInstanceName()/] = factory.createEClassFromContainerAndClassID(this, [aEClass.getQualifiedIDName()/]);
[/template]

[template private generateCreation(anEAttribute : EAttribute)]
factory.createEAttributeFromContainerAndClassID(this.[anEAttribute.eContainingClass.getInstanceName()/], [anEAttribute.eContainingClass.getQualifiedIDName(anEAttribute)/]);

[/template]

[template private generateCreation(anEReference : EReference)]
factory.createEReferenceFromContainerAndClassID(this.[anEReference.eContainingClass.getInstanceName()/], [anEReference.eContainingClass.getQualifiedIDName(anEReference)/]);

[/template] 

[template private generateCreation(anEOperation : EOperation)]
factory.createEOperationFromContainerAndClassID(this.[anEOperation.eContainingClass.getInstanceName()/], [anEOperation.eContainingClass.getQualifiedIDName(anEOperation)/]);

[/template]

[template private generateCreation(aTypeElement : ETypedElement)]
[/template]

[template private generateCreation(aEnum : EEnum)]
this.[aEnum.getInstanceName()/] = factory.createEEnumFromContainerAndClassID(this, [aEnum.getQualifiedIDName()/]);

[/template]

[template private generateCreation(anEDatatype : EDataType)]
this.[anEDatatype.getInstanceName()/] = factory.createEDataTypeFromContainerAndClassID(this, [anEDatatype.getQualifiedIDName()/]);

[/template]

[query private getGetter(aClassifier : EClassifier , aPackage : EPackage ) : String =
    if aClassifier.oclIsUndefined() then 'null'
    else if ( aClassifier.ePackage = aPackage ) or ( aClassifier.ePackage.name = aPackage.name ) then 'this.' + aClassifier.getInstanceName()
    else getShortQualifiedName(aClassifier.ePackage.name + '.get' + aClassifier.ePackage.getInterfaceName(),aPackage.name) + '().' + aClassifier.getReflectiveGetterName() + '()'
    endif endif
/]

[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
this.[aEClass.getInstanceName()/].eSuperTypes.add([superClass.getGetter(aEClass.ePackage)/]);
[/for]
[/template]

[template private generateInitialization(aEClass : EClass)]
this.initEClass(this.[aEClass.getInstanceName()/],"[aEClass.name/]","[aEClass.getInstanceTypeName()/]",[aEClass.abstract.toString()/],[aEClass.interface.toString()/]);
[/template]

[template private generateInitialization(anEAttribute : EAttribute, aPackage : EPackage )]
this.initEAttribute([anEAttribute.getPackageGetter()/],[anEAttribute.eType.oclAsType(EDataType).getPackageGetter(anEAttribute)/],"[anEAttribute.name/]","[anEAttribute.defaultValueLiteral/]",[anEAttribute.lowerBound/],[anEAttribute.upperBound/],[anEAttribute.transient.toString()/],[anEAttribute.volatile.toString()/],[anEAttribute.changeable.toString()/],[anEAttribute.unsettable.toString()/],[anEAttribute.unique.toString()/],[anEAttribute.derived.toString()/],[anEAttribute.ordered.toString()/],[anEAttribute.iD.toString()/]);
[/template]

[template private generateInitialization(anEReference : EReference, aPackage : EPackage )]
this.initEReference([anEReference.getPackageGetter()/],[anEReference.eGenericType.eClassifier.getPackageGetter(anEReference)/],[if anEReference.eOpposite.oclIsUndefined()]null[else][anEReference.eOpposite.getPackageGetter()/][/if],"[anEReference.name/]","[anEReference.defaultValueLiteral/]",[anEReference.lowerBound/],[anEReference.upperBound/],[anEReference.transient.toString()/],[anEReference.volatile.toString()/],[anEReference.changeable.toString()/],[anEReference.containment.toString()/],[anEReference.resolveProxies.toString()/],[anEReference.unsettable.toString()/],[anEReference.unique.toString()/],[anEReference.derived.toString()/],[anEReference.ordered.toString()/]);

[/template]

[template private generateInitialization(anEOperation : EOperation , aPackage : EPackage )? (anEOperation.eParameters->isEmpty())]
this.initEOperation([anEOperation.getPackageGetter()/],[anEOperation.eType.getPackageGetter(anEOperation)/],"[anEOperation.name.toString()/]",[anEOperation.lowerBound/],[anEOperation.upperBound/],[anEOperation.unique.toString()/],[anEOperation.ordered.toString()/]);

[/template]

[template private generateInitialization(anEOperation : EOperation , aPackage : EPackage )? (anEOperation.eParameters->notEmpty())]
{
    let operation = [anEOperation.getPackageGetter()/];
    this.initEOperation(operation,[anEOperation.eType.getPackageGetter(anEOperation)/],"[anEOperation.name.toString()/]",[anEOperation.lowerBound/],[anEOperation.upperBound/],[anEOperation.unique.toString()/],[anEOperation.ordered.toString()/]);
    [for (anEParameter : EParameter | anEOperation.eParameters)]
    this.addEParameter(operation,[anEParameter.eType.getPackageGetter(anEParameter.eOperation)/],"[anEParameter.name/]",0,1,[anEParameter.unique.toString()/],[anEParameter.ordered.toString()/]);
    [/for]
}

[/template]


[template private generateInitialization(aTypedElement : ETypedElement, aPackage : EPackage)]
[/template]

[template private generateInitialization(aEnum : EEnum,anEPackage : EPackage)]
this.initEEnum([aEnum.getPackageGetter()/], "[aEnum.name/]","[if aEnum.instanceTypeName.oclIsUndefined()]number[else][aEnum.getInstanceTypeName()/][/if]")
[for (anEEnumLiteral : EEnumLiteral | aEnum.eLiterals)]
this.addEEnumLiteral([aEnum.getPackageGetter()/], "[anEEnumLiteral.name/]", "[anEEnumLiteral.literal/]", [anEEnumLiteral.value.toString()/])
[/for]

[/template]

[template private generateInitialization(aDataType : EDataType,anEPackage : EPackage)]
this.initEDataType([aDataType.getPackageGetter()/], "[aDataType.name/]", "[aDataType.getInstanceTypeName()/]",[let defaultValue : String = aDataType.getDefaultValue(anEPackage).replaceAll('\'|"', '')][if defaultValue = '' or defaultValue = 'null']""[else]"[defaultValue/]"[/if][/let],[aDataType.serializable.toString()/])

[/template]

