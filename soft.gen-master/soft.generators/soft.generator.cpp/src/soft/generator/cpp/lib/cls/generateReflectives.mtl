[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateReflectives('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateReflectives/]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateType /]

[template public generateReflectivesDeclaration(aClass : EClass)]
[if aClass.hasElementID() or
    aClass.getEGetFeatures()->notEmpty() or
    aClass.getESetFeatures()->notEmpty() or
    aClass.getEUnSetFeatures()->notEmpty() or
    aClass.getEIsSetFeatures()->notEmpty() or
    aClass.eOperations->notEmpty() or
    aClass.getEInverseAddFeatures()->notEmpty() or
    aClass.getEInverseRemoveFeatures()->notEmpty()]
//*********************************
// Reflectives
//*********************************
[if aClass.hasElementID()]
[aClass.generateElementIDDeclaration()/]
[/if]
[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetDeclaration()/]
[/if]
[if aClass.getESetFeatures()->notEmpty()]
[aClass.generateESetDeclaration()/]
[/if]
[if aClass.getEUnSetFeatures()->notEmpty()]
[aClass.generateEUnSetDeclaration()/]
[/if]
[if aClass.getEIsSetFeatures()->notEmpty()]
[aClass.generateEIsSetDeclaration()/]
[/if]
[if aClass.eOperations->notEmpty()]
[aClass.generateEInvokeDeclaration()/]
[/if]
[if aClass.getEInverseAddFeatures()->notEmpty()]
[aClass.generateEInverseAddDeclaration()/]
[/if]
[if aClass.getEInverseRemoveFeatures()->notEmpty()]
[aClass.generateEInverseRemoveDeclaration()/]
[/if]
[/if]
[/template]

[template private generateElementIDDeclaration(aClass: EClass)]
[let mixinClasses : Set(EClass) = aClass.getMixinClasses()]
[if mixinClasses->exists( c : EClass | c.getImplementedFeatures()->notEmpty())] 
virtual int eStructuralFeatureID( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& eContainer, int featureID ) const;
[/if]
[if mixinClasses->exists( c : EClass | c.getImplementedOperations()->notEmpty())]
virtual int eOperationID( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& eContainer, int operationID ) const;
[/if]
[/let] 
[/template]

[template private generateEGetDeclaration(aClass : EClass)]
virtual ecore::Any eGet(int featureID, bool resolve) const;
[/template]

[template private generateEIsSetDeclaration(aClass : EClass)]
virtual bool eIsSet(int featureID) const;
[/template]

[template private generateESetDeclaration(aClass : EClass)]
virtual void eSet(int featureID, const ecore::Any& newValue);
[/template]

[template private generateEUnSetDeclaration(aClass : EClass)]
virtual void eUnset(int featureID);
[/template]

[template private generateEInvokeDeclaration(aClass : EClass)]
virtual [getShortQualifiedName('ecore::Any', aClass.ePackage.name)/] eInvoke( int operationID, const std::shared_ptr<[getShortQualifiedName('ecore::EList', aClass.ePackage.name)/]<[getShortQualifiedName('ecore::Any', aClass.ePackage.name)/]>>& arguments );
[/template]

[template private generateEInverseAddDeclaration(aClass : EClass)]
virtual std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]> eBasicInverseAdd( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& otherEnd, int featureID, const std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]>& notifications );
[/template]

[template private generateEInverseRemoveDeclaration(aClass : EClass)]
virtual std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]> eBasicInverseRemove( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& otherEnd, int featureID, const std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]>& notifications );
[/template]

[template public generateReflectivesDefinition(aClass : EClass)]
[if aClass.hasElementID() or
    aClass.getEGetFeatures()->notEmpty() or
    aClass.getESetFeatures()->notEmpty() or
    aClass.getEUnSetFeatures()->notEmpty() or
    aClass.getEIsSetFeatures()->notEmpty() or
    aClass.eOperations->notEmpty() or
    aClass.getEInverseAddFeatures()->notEmpty() or
    aClass.getEInverseRemoveFeatures()->notEmpty()]

//*********************************
// Reflectives
//*********************************
[if aClass.hasElementID()]
[aClass.generateElementIDDefinition()/]

[/if]
[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetDefinition()/]

[/if]
[if aClass.getESetFeatures()->notEmpty()]
[aClass.generateESetDefinition()/]

[/if]
[if aClass.getEUnSetFeatures()->notEmpty()]
[aClass.generateEUnSetDefinition()/]

[/if]
[if aClass.getEIsSetFeatures()->notEmpty()]
[aClass.generateEIsSetDefinition()/]

[/if]
[if aClass.eOperations->notEmpty()]
[aClass.generateEInvokeDefinition()/]

[/if]
[if aClass.getEInverseAddFeatures()->notEmpty()]
[aClass.generateEInverseAddDefinition()/]

[/if]
[if aClass.getEInverseRemoveFeatures()->notEmpty()]
[aClass.generateEInverseRemoveDefinition()/]

[/if]
[/if]
[/template]

[template private generateElementIDDefinition(aClass: EClass)]
[let className : String = aClass.getBaseName()]
[let mixinClasses : Set(EClass) = aClass.getMixinClasses()]
[if mixinClasses->exists( c : EClass | c.getImplementedFeatures()->notEmpty())] 
template <typename... I>
int [className/]<I...>::eStructuralFeatureID( const std::shared_ptr<ecore::EObject>& eContainer, int featureID ) const {
    auto eClass = std::static_pointer_cast<ecore::EClass>(eContainer);
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == [aClass.ePackage.getInterfaceName()/]::eInstance()->get[aMixinClass.getElementAccessorName()/]()) {
        switch(featureID) {
[for (aFeature : EStructuralFeature | aMixinClass.getImplementedFeatures() )]
            case [aMixinClass.getQualifiedIDName(aFeature)/] : return [aClass.getQualifiedIDName(aFeature)/];
[/for]
            default: return -1;
        }
    }
[/for]  
    return [removeNamespace(aClass.getClassExtends())/]::eStructuralFeatureID(eContainer, featureID);
}
[/if]

[if mixinClasses->exists( c : EClass | c.getImplementedOperations()->notEmpty())]
template <typename... I>
virtual int [className/]<I...>::eOperationID( const std::shared_ptr<ecore::EObject>& eContainer, int operationID ) const {
    auto eClass = std::static_pointer_cast<ecore::EClass>(eContainer);
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == [aClass.ePackage.getInterfaceName()/]::eInstance()->get[aMixinClass.getElementAccessorName()/]() ) {
        switch(featureID) {
[for (aOperation : EOperation | aMixinClass.getImplementedOperations() )]
            case [aMixinClass.getQualifiedIDName(aOperation)/] : return [aClass.getQualifiedIDName(aOperation)/];
[/for]
            default: return -1;
        }
    }
[/for]
    return [removeNamespace(aClass.getClassExtends())/]::eOperationID(eContainer, operationID);
}
[/if]
[/let]
[/let] 
[/template]

[template private generateEGetDefinition(aClass : EClass)]
[let className : String = aClass.getBaseName()]
template <typename... I>
[getShortQualifiedName('ecore::Any', aClass.ePackage.name)/] [className/]<I...>::eGet(int featureID, bool resolve) const
{
    switch(featureID)
    {
    [for (anStructFeature : EStructuralFeature | aClass.getEGetFeatures()->asOrderedSet()->sortedBy(name))]
        case [aClass.getQualifiedIDName(anStructFeature)/]:
	[if anStructFeature.isProxy()]
		[if anStructFeature.isListType()]
		{
			auto l = [anStructFeature.getGetterName()/]();
			return [getShortQualifiedName('ecore::toAny', aClass.ePackage.name)/]( resolve ? l : l->getUnResolvedList() );
		}
		[else]
			return [getShortQualifiedName('ecore::toAny', aClass.ePackage.name)/]( resolve ? [anStructFeature.getGetterName()/]()
								  : basic[anStructFeature.getGetterName().toUpperFirst()/]() );
		[/if]		
	[else] 
			return [getShortQualifiedName('ecore::toAny', aClass.ePackage.name)/]([anStructFeature.getGetterName()/]());
	[/if]
    [/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eGet(featureID, resolve);
}
[/let]
[/template]

[template private generateEIsSetDefinition(aClass : EClass)]


template <typename... I>
bool [aClass.getBaseName()/]<I...>::eIsSet(int featureID) const
{
    switch(featureID)
    {
[for (anStructFeature : EStructuralFeature | aClass.getEIsSetFeatures()->sortedBy(name))]
        case [aClass.getQualifiedIDName(anStructFeature)/]:
            return [anStructFeature.generateComparison()/];
[/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eIsSet(featureID);
}
[/template]


[template private generateESetDefinition(aClass : EClass)]
template <typename... I>
void [aClass.getBaseName()/]<I...>::eSet(int featureID, const [getShortQualifiedName('ecore::Any', aClass.ePackage.name)/]& newValue)
{
    switch(featureID)
    {
[for (anStructFeature : EStructuralFeature | aClass.getESetFeatures()->sortedBy(name))]
        case [aClass.getQualifiedIDName(anStructFeature)/]:
        {
    [let varName : String = anStructFeature.name.first(1)]
    [if anStructFeature.isListType()]
			auto [varName/] = [getShortQualifiedName('ecore::anyListCast', aClass.ePackage.name)/]<[anStructFeature.eGenericType.generateCppType( aClass.ePackage )/]>(newValue);
            [anStructFeature.getGetterName()/]()->clear();
            [anStructFeature.getGetterName()/]()->addAll(*[varName/]);
    [else]
        [if anStructFeature.eGenericType.eClassifier.isAny()]
            auto [varName/] = newValue;
        [elseif anStructFeature.eGenericType.eClassifier.oclIsKindOf(EClass)]
            auto [varName/] = [getShortQualifiedName('ecore::anyObjectCast', aClass.ePackage.name)/]<[anStructFeature.generateEffectiveType()/]>(newValue);
        [else]
            auto [varName/] = [getShortQualifiedName('ecore::anyCast', aClass.ePackage.name)/]<[anStructFeature.generateEffectiveType()/]>(newValue);
        [/if]
            [anStructFeature.getSetterName()/]([varName/]);
    [/if]
            return;
    [/let]
        }
[/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eSet(featureID, newValue);
}
[/template]

[template private generateEUnSetDefinition(aClass : EClass)]
[let className : String = aClass.getBaseName()]
template <typename... I>
void [className/]<I...>::eUnset(int featureID)
{
    switch(featureID)
    {
[for (aStructFeature : EStructuralFeature | aClass.getEUnSetFeatures()->sortedBy(name))]
        case [aClass.getQualifiedIDName(aStructFeature)/]:
        {
    [if aStructFeature.isListType() and not aStructFeature.isUnSettable()]
            [aStructFeature.getGetterName()/]()->clear();
    [elseif aStructFeature.hasUnSetter('public', true) ]
            [aStructFeature.getUnSetterName()/]();
    [elseif aStructFeature.oclIsKindOf(EReference)]
            [aStructFeature.getSetterName()/]( nullptr );
    [else]
            [aStructFeature.getSetterName()/]( [aStructFeature.oclAsType(EAttribute).getDefaultValue()/] ); 
    [/if]
            return;
        }
[/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eUnset(featureID);
}
[/let]
[/template]

[template private generateEInvokeDefinition(aClass : EClass)]
[let className : String = aClass.getBaseName()]
template <typename... I>
[getShortQualifiedName('ecore::Any', aClass.ePackage.name)/] [className/]<I...>::eInvoke(int operationID, const std::shared_ptr<[getShortQualifiedName('ecore::EList', aClass.ePackage.name)/]<[getShortQualifiedName('ecore::Any', aClass.ePackage.name)/]>>& arguments)
{
    // [protected ( className + '::eInvoke')]
    switch( operationID )
    {
    [for ( eOperation : EOperation | aClass.eOperations->sortedBy(name) )]
        case [aClass.getQualifiedIDName(eOperation)/]:
        {
            [if eOperation.isVoid() ]
            [eOperation.generateOperationInvoke()/];
            return [getShortQualifiedName('ecore::Any', aClass.ePackage.name)/]();
            [else]
            return [getShortQualifiedName('ecore::toAny', aClass.ePackage.name)/]([eOperation.generateOperationInvoke()/]);
            [/if]
        }
    [/for]
    }
    return ecore::Any();
    // [/protected]
}
[/let]
[/template]

[template private generateOperationInvoke(eOperation : EOperation )]
[if eOperation.getVisibilityType(true) = 'no' and eOperation.eContainingClass.name = 'EObject']BasicEObject<I...>::[/if][eOperation.name/]([for (eParameter : EParameter | eOperation.eParameters) separator (',')][let needCast : Boolean = not(not eParameter.oclIsUndefined() and eParameter.upperBound = 1 and not eParameter.eGenericType.oclIsUndefined() and eParameter.eGenericType.eClassifier.isAny())][if needCast][getShortQualifiedName('ecore::anyCast', eOperation.getEPackage().name)/]<[eParameter.generateEffectiveType()/]>([/if]arguments->get([i-1/])[if needCast])[/if][/let][/for])
[/template]


[template private generateDefaultValue(anEAttribute : EAttribute) post (trim())]
[if (anEAttribute.eType.oclIsTypeOf(EEnum))]
    [if (anEAttribute.defaultValueLiteral->notEmpty())]
        [anEAttribute.eType.name/]::[anEAttribute.defaultValueLiteral.toUpperCase()/]
    [else]
        [anEAttribute.eType.name/]::[anEAttribute.eType.oclAsType(EEnum).eLiterals->first().name.toUpperCase()/] 
    [/if]
[else]
    [anEAttribute.getDefaultValue()/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (oclIsKindOf(EAttribute) and not eType.isAny()) post (trim())]
[if isListType()]
    [if isField()]
        [anStructFeature.name/]_ && ![anStructFeature.name/]_->empty()
    [else]
        ![anStructFeature.getGetterName()/]()->empty()
    [/if]
[else]
    [let accessor : String = if isField() then anStructFeature.name + '_' else anStructFeature.getGetterName()+'()' endif]
    [if eType.oclIsKindOf(EEnum)]
        [accessor/] != [anStructFeature.oclAsType(EAttribute).generateDefaultValue()/]
    [else]
        [accessor/] != [anStructFeature.oclAsType(EAttribute).getDefaultValue()/]
    [/if]
    [/let]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (oclIsKindOf(EReference) and not eType.isAny()) post (trim())]
[if isListType()]
    [if isField()]
        [anStructFeature.name/]_ && ![anStructFeature.name/]_->empty()
    [else]
        ![anStructFeature.getGetterName()/]()->empty()
    [/if]
[elseif anStructFeature.oclAsType(EReference).isBackReference() ]
    [if isField()]
    !is_uninitialized([anStructFeature.name/]_)
    [else]
    static_cast<bool>( [anStructFeature.getGetterName()/]() )
    [/if]
[else]
    [let accessor : String = if isField() then anStructFeature.name + '_' else anStructFeature.getGetterName()+'()' endif]
        [accessor/] != [anStructFeature.eType.getDefaultValue()/]
    [/let]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (eType.isAny()) post (trim())]
![anStructFeature.getGetterName()/]().empty()
[/template]

[template public generateEInverseAddDefinition(aClass : EClass) ]
[let className : String = aClass.getBaseName()]
template <typename... I>
std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]> [className/]<I...>::eBasicInverseAdd( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& otherEnd, int featureID, const std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]>& notifications )
{
    // [protected (className + '::eBasicInverseAdd')]
    switch( featureID )
    {
[for ( aFeature : EStructuralFeature | aClass.getEInverseAddFeatures()->sortedBy(name) )]
        case [aClass.getQualifiedIDName(aFeature)/]:
        {
    [if aFeature.isListType()]
            auto list = std::static_pointer_cast<[getShortQualifiedName('ecore::ENotifyingList', aClass.ePackage.name)/]<[aFeature.eGenericType.generateCppType(aClass.ePackage)/]>>( [aFeature.getGetterName()/]() );
            auto other = ecore::derived_pointer_cast<[aFeature.generateElementType()/]>(otherEnd);
            return list->add( other , notifications );
    [elseif aFeature.isContainer()]
            auto msgs = notifications;
            if (eContainer())
                msgs = eBasicRemoveFromContainer(msgs);
        [if aFeature.isBasicSet()]
            return basic[aFeature.getSetterName().toUpperFirst()/]( ecore::derived_pointer_cast<[aFeature.generateElementType()/]>(otherEnd), msgs );
        [else]
            return eBasicSetContainer( otherEnd , [aClass.getQualifiedIDName(aFeature)/], msgs );
        [/if]
    [else]
        [let varName : String = aFeature.name + (if aFeature.isVolatile() or aFeature.isBackReference() then '' else '_' endif)]
            auto msgs = notifications;
            if ( [varName/] )
            [if aFeature.isContains()]
                msgs = [varName/]->getInternal().eInverseRemove( getThisAsEObject(), EOPPOSITE_FEATURE_BASE - [aClass.getQualifiedIDName(aFeature)/] , msgs );
            [else]
                [let reverseFeature : EStructuralFeature = aFeature.oclAsType(EReference).eOpposite]
                msgs = [varName/]->getInternal().eInverseRemove( getThisAsEObject(), [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/] , msgs );
                [/let]
            [/if] 
            return basic[aFeature.getSetterName().toUpperFirst()/](ecore::derived_pointer_cast<[aFeature.generateElementType()/]>(otherEnd),msgs);
        [/let]
    [/if]
        }
[/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eBasicInverseAdd(otherEnd, featureID, notifications);
    // [/protected]
}
[/let]
[/template]

[template public generateEInverseRemoveDefinition(aClass : EClass) ? (aClass.getEInverseRemoveFeatures()->notEmpty()) ]
[let className : String = aClass.getBaseName()]
template <typename... I>
std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]> [className/]<I...>::eBasicInverseRemove( const std::shared_ptr<[getShortQualifiedName('ecore::EObject', aClass.ePackage.name)/]>& otherEnd, int featureID, const std::shared_ptr<[getShortQualifiedName('ecore::ENotificationChain', aClass.ePackage.name)/]>& notifications )
{
    // [protected (className + '::eBasicInverseRemove')]
    switch( featureID )
    {
[for ( aFeature : EStructuralFeature | aClass.getEInverseRemoveFeatures()->sortedBy(name) )]
        case [aClass.getQualifiedIDName(aFeature)/]:
        {
    [if aFeature.isListType()]
            auto list = std::static_pointer_cast<[getShortQualifiedName('ecore::ENotifyingList', aClass.ePackage.name)/]<[aFeature.eGenericType.generateCppType(aClass.ePackage)/]>>( [aFeature.getGetterName()/]() );
            auto other = ecore::derived_pointer_cast<[aFeature.generateElementType()/]>(otherEnd);
            return list->add( other , notifications );
    [elseif aFeature.isContainer() and not aFeature.isBasicSet()]
            return eBasicSetContainer( nullptr , [aClass.getQualifiedIDName(aFeature)/], notifications );
    [elseif aFeature.isUnSet()]
            return basic[aFeature.getUnSetterName().toUpperFirst()/]( notifications );
    [else]
            return basic[aFeature.getSetterName().toUpperFirst()/]( nullptr, notifications );
    [/if]
        }
[/for]
    }
    return [removeNamespace(aClass.getClassExtends())/]::eBasicInverseRemove(otherEnd, featureID, notifications);
    // [/protected]
}
[/let]
[/template]

