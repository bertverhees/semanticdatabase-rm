[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageBaseHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateOperation /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::pack::generateElement /]

[template public generatePackageBaseHeader(anEPackage : EPackage) { 
	className : String = anEPackage.getBaseName(); 
	namespaceName : String = anEPackage.getImplementationNamespaceName(); }
]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(anEPackage,'PackageBase')/]

#include "ecore/ext/EPackageBaseExt.hpp"

namespace [anEPackage.getInterfaceNamespaceName()/] 
{
[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->sortedBy(name))]
    class [elements.name/];
[/for]
}

namespace ecore
{
    class EcoreFactory;
    class EResource;
}


namespace [namespaceName/]
{
	template <typename... I>
    class [className/] : public [getShortQualifiedName('ecore::ext::EPackageBaseExt' ,namespaceName)/]<I...>
    {
        friend class [anEPackage.getInterfaceName()/];
    public:
        virtual ~[className/]();

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
        // Begin Class [aClass.name.toUpperFirst()/]
        // Class and Feature Getter
        [aClass.generateGetterDeclaration(anEPackage, true)/]
        [aClass.eAttributes->sortedBy(name).generateGetterDeclaration(anEPackage, true)/]
        [aClass.eReferences->sortedBy(name).generateGetterDeclaration(anEPackage, true)/]
        [aClass.eOperations->sortedBy(name).generateGetterDeclaration(anEPackage, true)/]
        // End Class [aClass.name.toUpperFirst()/]
[/for]

        [anEPackage.eAllContents(EDataType).generateGetterDeclaration(anEPackage, true)/]

        virtual std::shared_ptr<ecore::EResource> eResource() const;

    protected:
        [className/]();
        [className/]([className/] const&) = delete;
        [className/]& operator=([className/] const&) = delete;

    private:
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    [let dataMembers : Sequence(ENamedElement) = Sequence{ Sequence{ aClass } , aClass.eStructuralFeatures, aClass.eOperations}->flatten()]
        [dataMembers.generateDataMember(anEPackage)/]
    [/let]
[/for]
        [anEPackage.eAllContents(EDataType)->sortedBy(name).generateDataMember(anEPackage)/]
        
        static [className/]* create();
        bool isInitialized = false;
        bool isCreated = false;

        void init(const std::shared_ptr<[className/]>& package);
        void createPackageContents(const std::shared_ptr<[className/]>& package);
        void initializePackageContents();
        
[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
        void create[aClass.name.toUpperFirst()/]Content(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage' ,namespaceName)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory' ,namespaceName)/]>& factory);
[/for]
        void createPackageEDataTypes(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage' ,namespaceName)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory' ,namespaceName)/]>& factory);

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
        void initialize[aClass.name.toUpperFirst()/]Content();
[/for]
        void initializePackageEDataTypes();
    };
}

#include "[anEPackage.getImplementationFolder() + '/' + className +'.inl'/]"

[endGuard(anEPackage,'PackageBase')/]
[/file]
[/template]
