[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateElement('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::cpp::generateCommon /]
[import soft::generator::common::generateCommon /]

[query public getMetaMetaModelClasses(anEPackage : EPackage) : Set(EClassifier) = OrderedSet{
                                anEPackage.eClassifiers.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eOperations.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eOperations.eParameters.eType.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eOperations.eParameters.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eAttributes.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eAttributes.eType.eClass(), 
                                anEPackage.eClassifiers->selectByKind(EClass).eReferences.eClass()
                        }->flatten()->selectByKind(EClass)->sortedBy(name)/]

[template public generateStaticFeatureID(anStructFeature : EStructuralFeature,anEClass : EClass )]
/**
 * The feature id for the [anEClass.name/] '[anStructFeature.name.toUpperFirst()/]' [anStructFeature.getFeatureKind()/].
 */
static const int [anEClass.getFeatureIDName(anStructFeature)/] = [anEClass.getFeatureIDValue(anStructFeature)/];

[/template]

[template public generateStaticFeatureCountID(anEClass : EClass )]
/**
 * The number of structural features of the class [anEClass.name/].
 */
static const int [anEClass.getFeatureCountIDName()/] = [anEClass.getFeatureCountIDValue()/];

[/template]

[template public generateGetterDeclaration(anENamedElement : ENamedElement, anEPackage : EPackage, impl : Boolean)]
/**
 * Returns the meta object for the [anENamedElement.name.toUpperFirst()/]
 */
virtual std::shared_ptr<[getMetaType(anENamedElement, anEPackage)/]> get[anENamedElement.getElementAccessorName()/]() const [abstractSufix(impl)/];

[/template]

[template public generateGetterDefinition(anENamedElement : ENamedElement, anEPackage : EPackage)]
template <typename... I>
std::shared_ptr<[getMetaType(anENamedElement, anEPackage)/]> [anEPackage.getBaseName()/]<I...>::get[anENamedElement.getElementAccessorName()/]() const
{
    return [anENamedElement.getElementInstanceName()/];
}

[/template]

[template public generateDataMember(anENamedElement : ENamedElement, anEPackage : EPackage)] 
std::shared_ptr<[getMetaType(anENamedElement, anEPackage)/]> [anENamedElement.getElementInstanceName()/];

[/template]

[template public generateCreation(aStructuralFeature : EStructuralFeature)]
[/template]

[template public generateCreation(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/] = factory->createEAttribute([anEAttribute.eContainingClass.getElementInstanceName()/], [anEAttribute.eContainingClass.getFeatureIDName(anEAttribute)/]);

[/template]

[template public generateCreation(anEReference : EReference)]
[anEReference.getElementInstanceName()/] = factory->createEReference([anEReference.eContainingClass.getElementInstanceName()/], [anEReference.eContainingClass.getFeatureIDName(anEReference)/]);

[/template] 

[template public generateInitialization(anEAttribute : EAttribute)]
[anEAttribute.getElementInstanceName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getElementInstanceName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getElementInstanceName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getElementInstanceName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getElementInstanceName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getElementInstanceName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getElementInstanceName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getElementInstanceName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getElementInstanceName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getElementInstanceName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getElementInstanceName()/]->setID([anEAttribute.iD.toString()/]);
[if ( anEAttribute.defaultValueLiteral <> '' )]
[anEAttribute.getElementInstanceName()/]->setDefaultValueLiteral("[anEAttribute.defaultValueLiteral/]");
[/if]

[/template]

[template public generateInitialization(anEReference : EReference)]
[anEReference.getElementInstanceName()/]->setName("[anEReference.name/]");
[anEReference.getElementInstanceName()/]->setEType([anEReference.eGenericType.eClassifier.packageGetter(anEReference)/]);
[anEReference.getElementInstanceName()/]->setLowerBound([anEReference.lowerBound/]);
[anEReference.getElementInstanceName()/]->setUpperBound([anEReference.upperBound/]);
[anEReference.getElementInstanceName()/]->setTransient([anEReference.transient.toString()/]);
[anEReference.getElementInstanceName()/]->setVolatile([anEReference.volatile.toString()/]);
[anEReference.getElementInstanceName()/]->setChangeable([anEReference.changeable.toString()/]);
[anEReference.getElementInstanceName()/]->setUnsettable([anEReference.unsettable.toString()/]);
[anEReference.getElementInstanceName()/]->setUnique([anEReference.unique.toString()/]);
[anEReference.getElementInstanceName()/]->setDerived([anEReference.derived.toString()/]);
[anEReference.getElementInstanceName()/]->setOrdered([anEReference.ordered.toString()/]);
[anEReference.getElementInstanceName()/]->setContainment([anEReference.containment.toString()/]);
[anEReference.getElementInstanceName()/]->setResolveProxies([anEReference.resolveProxies.toString()/]);
[if ( anEReference.defaultValueLiteral <> '' )]
[anEReference.getElementInstanceName()/]->setDefaultValueLiteral("[anEReference.defaultValueLiteral/]");
[/if]
[if not anEReference.eOpposite.oclIsUndefined()]
[anEReference.getElementInstanceName()/]->setEOpposite([anEReference.eOpposite.getPackageGetter()/]);
[/if]

[/template]

[template public generateStaticOperationID(aOperation : EOperation , aClass : EClass )]
/**
 * The operation id for the '[aOperation.name/]' operation.
 */
static const int [aClass.getOperationIDName(aOperation)/] = [aClass.getOperationIDValue(aOperation)/];

[/template]

[template public generateStaticOperationCountID(anEClass : EClass )]
/**
 *  The number of operations of the class [anEClass.name/].
 */
static const int [anEClass.getOperationCountIDName()/] = [anEClass.getOperationCountIDValue()/];

[/template]

[query private simpleDatatypeGetter(anEClassifier : EClassifier, anOperation: EOperation) : String = if anOperation.eType.oclIsUndefined() or anOperation.eTypeParameters->notEmpty() then 'nullptr' else needMetaModelPackageGetter(anEClassifier, anOperation.eContainingClass).concat('get').concat(anEClassifier.getElementAccessorName()).concat('()') endif/]

[template public generateCreation(anEOperation : EOperation)]
[anEOperation.getElementInstanceName()/] = factory->createEOperation([anEOperation.eContainingClass.getElementInstanceName()/], [anEOperation.eContainingClass.getOperationIDName(anEOperation)/]);

[/template]

[template public generateInitialization(anEOperation : EOperation)]
[anEOperation.getElementInstanceName()/]->setEType([anEOperation.eType.simpleDatatypeGetter(anEOperation)/]);
[anEOperation.getElementInstanceName()/]->setName("[anEOperation.name.toString()/]");
[anEOperation.getElementInstanceName()/]->setLowerBound([anEOperation.lowerBound/]);
[anEOperation.getElementInstanceName()/]->setUpperBound([anEOperation.upperBound/]);
[anEOperation.getElementInstanceName()/]->setUnique([anEOperation.unique.toString()/]);
[anEOperation.getElementInstanceName()/]->setOrdered([anEOperation.ordered.toString()/]);

[for (anEParameter : EParameter | anEOperation.eParameters) separator ('\r\n')]
{
    std::shared_ptr<ecore::EParameter> parameter = ecore::EcoreFactory::eInstance()->createEParameter([anEOperation.getElementInstanceName()/]);
    parameter->setName("[anEParameter.name/]");
    parameter->setEType([anEParameter.eType.simpleDatatypeGetter(anEParameter.eOperation)/]);
    parameter->setLowerBound(0);
    parameter->setUpperBound(1);
    parameter->setUnique(true);
    parameter->setOrdered(true);
}
[/for]

[/template]