[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryBaseHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon/]
[import soft::generator::cpp::lib::generateDataType/]
[import soft::generator::cpp::lib::generateClass /]

[template public generateFactoryBaseHeader(anEPackage : EPackage) { 
    className : String = anEPackage.getFactoryBaseName(); 
    namespaceName : String = anEPackage.getImplementationNamespaceName(); 
}]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(anEPackage,'FactoryBase')/]

#include "ecore/ext/EFactoryBaseExt.hpp"

namespace [anEPackage.getInterfaceNamespaceName()/] 
{
[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->sortedBy(name)) separator ('\r\n')]
    class [elements.name/];[/for]
}

[comment namespace /]
namespace [namespaceName/] 
{
	template <typename... I>
    class [className/] : public [getShortQualifiedName('ecore::ext::EFactoryBaseExt' ,namespaceName)/]<I...>
    {
        friend class [anEPackage.getFactoryInterfaceName()/];
    public:
        virtual ~[className/]();

        // Operations
        virtual std::shared_ptr<[getShortQualifiedName('ecore::EObject',namespaceName)/]> create(const std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]>&  eClass) const;
        virtual ecore::Any createFromString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const std::string& literalValue) const;
        virtual std::string convertToString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const ecore::Any& instanceValue) const;

        //Creator functions
        [anEPackage.eAllContents(EClass)->sortedBy(name).generateClassCreate(true)/]

        //Package
        virtual std::shared_ptr<[anEPackage.getInterfaceName()/]> get[anEPackage.getInterfaceName()/]() const;

    protected:
        [className/]();
        [className/]([className/] const&) = delete;
        [className/]& operator=([className/] const&) = delete;

        [let dataTypes : Sequence(EDataType) = anEPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name)]
        [dataTypes.generateCreateFromStringDeclaration()/]
        [dataTypes.generateConvertToStringDeclaration()/]
        [/let]
    private:
        static [className/]* create();
    };
}

#include "[anEPackage.getImplementationFolder() + '/' + className +'.inl'/]"

[endGuard(anEPackage,'FactoryImpl')/]
[/file]
[/template]