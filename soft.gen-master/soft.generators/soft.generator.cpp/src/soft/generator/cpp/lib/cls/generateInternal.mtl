[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateInternal('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::lib::generateCommon/]

[template public generateInternal(aClass : EClass) ? ( not hasOnlyImplementationFeatures() ) ] 
[/template]

[template public generateInternal(aClass : EClass) ? ( hasOnlyImplementationFeatures() ) { 
    className : String = aClass.getInternalName(); 
    classNamespace : String = aClass.ePackage.getImplementationNamespaceName();
    classExtends : String = aClass.getInternalExtends();
    guardName : String = '_' + className; } 
]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getImplementationFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

#include "[namespaceToFolder(classExtends)/].hpp"

namespace [classNamespace/] 
{
    class [className/] : public [getShortQualifiedName(classExtends, classNamespace)/] {
    public:
    [for ( aFeature : EStructuralFeature | aClass.eStructuralFeatures->select(isOnlyImplementation()) )]
        [if aFeature.hasGetter('public',true) and not aFeature.hasGetter('public',false)]
            [aFeature.generateGetDeclaration(false)/]

        [/if]
        [if aFeature.hasSetter('public',true) and not aFeature.hasSetter('public',false)]
            [aFeature.generateSetDeclaration(false)/]

        [/if]
        [if aFeature.hasUnSetter('public',true) and not aFeature.hasUnSetter('public',false)]
            [aFeature.generateUnSetDeclaration(false)/]

        [/if]
    [/for]
    };
}

[endGuard(guardName)/]
[/file]
[/template]

[template public generateInternalAdapterDeclaration(aClass : EClass)]
protected:
    //*********************************
    // Internal
    //*********************************
    template <typename U>
    class EObjectInternalAdapter;

    virtual std::unique_ptr<impl::EObjectInternal> createInternal();
[/template]

[template public generateInternalAdapterDefinition(aClass : EClass){
    internalName : String = aClass.getInternalName();
    className : String = aClass.getBaseName(); 
    classNamespace : String = aClass.ePackage.getImplementationNamespaceName();
    classExtends : String = aClass.getClassExtends();
}]
template <typename... I>
template <typename U>
class [className/]<I...>::EObjectInternalAdapter : public [classExtends/]<I...>::EObjectInternalAdapter<typename U>
{
public:
    EObjectInternalAdapter( [className/]<I...>& obj )
        : [classExtends/]<I...>::EObjectInternalAdapter<typename U>( obj )
    {
    }

    [for ( aFeature : EStructuralFeature | aClass.eStructuralFeatures->select(isOnlyImplementation()) )]
        [if aFeature.hasGetter('public',true) and not aFeature.hasGetter('public',false)]
        [let methodName : String = aFeature.getGetterName()]
    virtual [aFeature.generateReturnType()/] [methodName/]() const {
        return getObject().[methodName/]();
    }
        [/let]
        [/if]
        [if aFeature.hasSetter('public',true) and not aFeature.hasSetter('public',false)]
        [let methodName : String = aFeature.getSetterName()]
        [let varName : String = 'new' + aFeature.name.toUpperFirst()]
    virtual void [methodName/]([aFeature.generateParameterType()/] [varName/]) {
        getObject().[methodName/]([varName/]);
    }
        [/let]
        [/let]
        [/if]
        [if aFeature.hasUnSetter('public',true) and not aFeature.hasUnSetter('public',false)]
        [let methodName : String = aFeature.getUnSetterName()]
    virtual void [methodName/]() {
        getObject().[methodName/]();
    }
        [/let]
        [/if]
    [/for]

    inline [className/]<I...>& getObject()
    {
        return static_cast<[className/]<I...>&>( [classExtends/]<I...>::EObjectInternalAdapter<typename U>::getObject() );
    }

    inline const [className/]<I...>& getObject() const
    {
        return static_cast<const [className/]<I...>&>( [classExtends/]<I...>::EObjectInternalAdapter<typename U>::getObject() );
    }
};

template <typename... I>
std::unique_ptr<[getShortQualifiedName('ecore::impl::EObjectInternal',classNamespace)/]> [className/]<I...>::createInternal()
{
    return std::move( std::make_unique<EObjectInternalAdapter<[aClass.getInternalName()/]>>( *this ) );
}
[/template]
