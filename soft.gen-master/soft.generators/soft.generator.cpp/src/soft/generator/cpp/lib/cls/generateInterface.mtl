[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateInterface('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::cpp::generateElement /]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateType/]
[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::lib::generateCommon/]

[query private needsVirtual(aPackage : EPackage ) : Boolean = aPackage.eAllContents(EClass)->exists( eSuperTypes->size() > 1)/]

[template public generateInterface(aClass : EClass) { 
    className : String = aClass.getInterfaceName(); 
    classNamespace : String = aClass.ePackage.getInterfaceNamespaceName();
	needsVirtual : Boolean = aClass.ePackage.needsVirtual();
} 
]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getInterfaceFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(aClass)/]

#include "[aClass.ePackage.getInterfaceFolder()/]/Exports.hpp"
[for ( baseInclude : String | aClass.getInterfaceExtends()->asOrderedSet()->sortedBy( str | str ) )]
#include "[namespaceToFolder(baseInclude)/].hpp"
[/for]
[for (include : String | aClass.getReferencedTypes()->selectByKind(EDataType)
                                                    ->select(name <> 'EEList' and name <> 'EResource' and name <> 'ETreeIterator' )
                                                    ->collect( t | t.getInclude() )
                                                    ->select( s | s <> '' )
                                                    ->asOrderedSet()->sortedBy(name) )]
#include [include/]
[/for]

#include <memory>

//forward declarations
[if aClass.requiresList() ]
namespace ecore 
{
    template<typename T> class EList;
}
[/if]
[if aClass.eOperations->exists( eGenericType.requiresCollectionView() )]
namespace ecore 
{
    template<typename T> class ECollectionView;
}
[/if]
[if aClass.eOperations->exists( eGenericType.requiresResource() )]
namespace ecore 
{
    class EResource;
}
[/if]
[for (aCls : EClass| aClass.getReferencedTypes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name))]
namespace [aCls.ePackage.getInterfaceNamespaceName()/] 
{
    class [aCls.getInterfaceName()/];
}
[/for]

// [protected ('forward declarations for ' + className)]
// [/protected]

namespace [classNamespace/] 
{
    class [aClass.ePackage.name.toUpper()/]_API [className/] [for ( extend : String | aClass.getInterfaceExtends()->collect( s | (if needsVirtual and s = 'ecore::EObject' then 'virtual ' else '' endif)  + getShortQualifiedName(s, classNamespace))->sortedBy( s | s )) before (' : ') separator (', ')]public [extend/][/for]
    {
    public:
        virtual ~[className/]() = default;

[let operations : OrderedSet(EOperation) = aClass.eOperations->select( isPublic(false) )]
[if operations->notEmpty()]
        //*********************************
        // Operations
        //*********************************
        [operations.generateDeclaration(false)/]
[/if]
[/let]
[let attributes : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EAttribute)->select( hasSetter('public',false) or hasGetter('public',false) )]
[if attributes->notEmpty()]
        //*********************************
        // Attributes
        //*********************************
        [attributes.generateDeclaration(false)/]
[/if]
[/let]
[let references : OrderedSet(EAttribute) = aClass.eStructuralFeatures->selectByKind(EReference)->select( hasSetter('public',false) or hasGetter('public',false)  )]
[if references->notEmpty()]
        //*********************************
        // References
        //*********************************
        [references.generateDeclaration(false)/]
[/if]
[/let]
        // [protected (className)]
        // [/protected]
    };
}
[endGuard(aClass)/]
[/file]
[/template]

