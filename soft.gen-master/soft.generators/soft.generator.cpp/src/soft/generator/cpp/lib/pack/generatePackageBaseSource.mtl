[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generatePackageBaseSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateClass/]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::generateDataType /]
[import soft::generator::cpp::lib::pack::generateElement /]

[query public metaModelIncludes(anEPackage : EPackage) : Set(EPackage) = OrderedSet{anEPackage.eAllContents(EClass).eAllSuperTypes.ePackage,anEPackage.eAllContents(EStructuralFeature).eType.ePackage,anEPackage.eAllContents(EParameter).eType.ePackage}->flatten() /]


[template public generatePackageBaseSource(aPackage : EPackage) { 
    className : String = aPackage.getBaseName();
    namespaceName : String = aPackage.getImplementationNamespaceName();
}]
[file (aPackage.getOutputDirectory() + '/src-gen/' + aPackage.getImplementationFolder() + '/' + className + '.inl', false, 'UTF-8')]
[fileComment()/]

#ifndef [getGuardName('PackageBase')/]
#error This file may only be included from [className/].hpp
#endif

[let includes : OrderedSet(String) = Set{ aPackage.getMetaMetaModelClasses()->selectByKind(EClass)->collect( c | c.getQualifiedInterfaceName())->asSet()
                                        , Set {
                                                    aPackage.getFactoryQualifiedInterfaceName(),
                                                    'ecore::EList',
                                                    'ecore::EPackageResourceRegistry'
                                              }
                                        }->flatten()->asOrderedSet()->sortedBy( s | s)]
[for ( include : String | includes )]
#include "[namespaceToFolder(include)/].hpp"
[/for]
[/let]
[let includes : OrderedSet(String) =  aPackage.eAllContents(EDataType)->collect( d | if d.hasKey('include') then d.valueKey('include') else '' endif)->asOrderedSet()->sortedBy( s | s)]
[for ( include : String | includes )]
[if include <> '']
#include [include/]
[/if]
[/for]
[/let]
#include <cassert>

namespace [namespaceName/]
{
    template <typename... I>
    [className/]<I...>::[className/]()
    {
    }
    
    template <typename... I>
    [className/]<I...>::~[className/]()
    {
    }
    
    template <typename... I>
    [className/]<I...>* [className/]<I...>::create()
    {
        return new [className/]();
    }
    
    template <typename... I>
    std::shared_ptr<ecore::EResource> [className/]<I...>::eResource() const
    {
        auto resource = [getShortQualifiedName('ecore::ext::EPackageBaseExt<I...>' ,aPackage.getImplementationNamespaceName())/]::eResource();
        if (!resource)
            resource = [getShortQualifiedName('ecore::EPackageResourceRegistry' ,aPackage.getImplementationNamespaceName())/]::getInstance()->getResource(getThisPtr());    
        return resource;
    }
    
    template <typename... I>
    void [className/]<I...>::init(const std::shared_ptr<[className/]>& package)
    {
        setThisPtr(package);
        setName(eNAME);
        setNsPrefix(eNS_PREFIX);
        setNsURI(eNS_URI);
        setEFactoryInstance( [aPackage.getFactoryInterfaceName()/]::eInstance() );
        createPackageContents(package);
        initializePackageContents();   
    }

    [for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
    // Begin Class [aClass.name.toUpperFirst()/]
    [aClass.generateGetterDefinition(aPackage)/]
    [aClass.eAttributes->sortedBy(name).generateGetterDefinition(aPackage)/]
    [aClass.eReferences->sortedBy(name).generateGetterDefinition(aPackage)/]
    [aClass.eOperations->sortedBy(name).generateGetterDefinition(aPackage)/]
    // End Class [aClass.name.toUpperFirst()/]
    [/for]
    [aPackage.eAllContents(EDataType)->sortedBy(name).generateGetterDefinition(aPackage)/]

    template <typename... I>
    void [className/]<I...>::createPackageContents(const std::shared_ptr<[className/]>& package)
    {
        if (isCreated) 
            return;
        isCreated = true;
    
        std::shared_ptr<ecore::EcoreFactory> factory = ecore::EcoreFactory::eInstance();

    [for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
        create[aClass.name.toUpperFirst()/]Content(package, factory);
    [/for]

        createPackageEDataTypes(package, factory);
    }

    [for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
    template <typename... I>
    void [className/]<I...>::create[aClass.name.toUpperFirst()/]Content(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage', aPackage.name)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory', aPackage.name)/]>& factory)
    {
        [aClass.generateClassCreation()/]
        [aClass.eStructuralFeatures.generateCreation()/]
        [aClass.eOperations.generateCreation()/]
    }
    [/for]

    template <typename... I>
    void [className/]<I...>::createPackageEDataTypes(const std::shared_ptr<[getShortQualifiedName('ecore::EPackage', aPackage.name)/]>& package, const std::shared_ptr<[getShortQualifiedName('ecore::EcoreFactory', aPackage.name)/]>& factory)
    {
        [aPackage.eAllContents(EDataType)->sortedBy(name).generateEDatatypeCreation()/]
    }

    template <typename... I>
    void [className/]<I...>::initializePackageContents()
    {
        if (isInitialized)
            return;
        isInitialized = true;
        
        // Add supertypes to classes
        [aPackage.eAllContents(EClass)->sortedBy(name).initSuperTypes()/]
    
        // Initialize classes and features; add operations and parameters
    [for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
        initialize[aClass.name.toUpperFirst()/]Content();
    [/for]
    
        initializePackageEDataTypes();
    }

    [for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) separator ('\r\n')]
    template <typename... I>
    void [className/]<I...>::initialize[aClass.name.toUpperFirst()/]Content()
    {
        [aClass.generateInitialization()/]
        [aClass.eAttributes->sortedBy(name).generateInitialization()/]
        [aClass.eReferences->sortedBy(name).generateInitialization()/]
        [aClass.eOperations->sortedBy(name).generateInitialization()/]
    }
    [/for]

    template <typename... I>
    void [className/]<I...>::initializePackageEDataTypes()
    {
        [aPackage.eAllContents(EDataType)->sortedBy(name).generateEDatatypeInitialization()/]
    }
}
[/file]

[/template]
