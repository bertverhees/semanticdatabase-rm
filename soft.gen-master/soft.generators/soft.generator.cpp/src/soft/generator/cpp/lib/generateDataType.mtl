[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateDataType('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon /]
[import soft::generator::cpp::generateCommon /]


[template public generateEDatatypeCreation(anEDatatype : EDataType)]
[anEDatatype.getElementInstanceName()/] = factory->create[if (anEDatatype.oclIsKindOf(EEnum))]EEnum[else]EDataType[/if](package, [anEDatatype.getClassifierIDName()/]);

[/template]

[template public generateEDatatypeInitialization(aDataType : EDataType)]
[aDataType.getElementInstanceName()/]->setName("[aDataType.name/]");
[if aDataType.hasKey('instanceTypeName')]
[aDataType.getElementInstanceName()/]->setInstanceClass( &typeid([aDataType.valueKey('instanceTypeName') /]));
[/if]
[if (not aDataType.oclIsKindOf(EEnum))]
[aDataType.getElementInstanceName()/]->setSerializable([aDataType.serializable.toString()/]);
[/if]
[/template]

[template public generateStaticDataTypeID(aEDatatype : EDataType )]
/**
 * The meta object id for the [if aEDatatype.oclIsKindOf(EEnum)]enum[else]data type[/if] [aEDatatype.name/].
 */
static const int [aEDatatype.getClassifierIDName()/] = [aEDatatype.getClassifierIDValue()/];

[/template]

[template public generateCreateFromStringDeclaration(aEDatatype : EDataType )]
virtual ecore::Any create[aEDatatype.name/]FromString( const std::shared_ptr<ecore::EDataType>& dataType , const std::string& literalValue ) const;

[/template]

[template public generateCreateFromStringDefinition(aEDatatype : EDataType )]
[/template]

[template public generateConvertToStringDeclaration(aEDatatype : EDataType )]
virtual std::string convert[aEDatatype.name/]ToString( const std::shared_ptr<ecore::EDataType>& dataType , const ecore::Any& literalValue ) const;

[/template]

[template public generateConvertToStringDefinition(aEDatatype : EDataType )]
[/template]