[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryBaseSource('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::cpp::generateType /]
[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::lib::generateCommon /]
[import soft::generator::cpp::lib::generateClass /]

[template public generateFactoryBaseSource(anEPackage : EPackage) { 
    className : String = anEPackage.getFactoryBaseName() ; 
    namespaceName : String = anEPackage.getImplementationNamespaceName(); }]
[file (anEPackage.getOutputDirectory() + '/src-gen/' + anEPackage.getImplementationFolder() + '/' + className + '.inl', false, 'UTF-8')]
[fileComment()/]

#ifndef [getGuardName('FactoryBase')/]
#error This file may only be included from [className/].hpp
#endif

[let includes : OrderedSet(String) = Set{ anEPackage.eAllContents(EClass)->select( c | not c.interface )->collect( c | if c.hasExtension() then c.getQualifiedExtensionName() else c.getQualifiedImplementationName() endif)->asSet()
                                        , Set {
                                                    'ecore::EList',
                                                    'ecore::EClass'
                                              }
                                        }->flatten()->asOrderedSet()->sortedBy( s | s)]
[for ( include : String | includes )]
#include "[namespaceToFolder(include)/].hpp"
[/for]
[/let]

#include <iostream>

namespace [namespaceName/]
{
    //*********************************
    // Constructor / Destructor
    //*********************************
    template <typename... I>
    [className/]<I...>::[className/]()
    {
    }
    
    template <typename... I>
    [className/]<I...>::~[className/]()
    {
    }
    
    template <typename... I>
    [className/]<I...>* [className/]<I...>::create()
    {
        return new [className/]<I...>();
    }
    
    //*********************************
    // creators
    //*********************************
    template <typename... I>
    std::shared_ptr<[getShortQualifiedName('ecore::EObject',namespaceName)/]> [className/]<I...>::create(const std::shared_ptr<[getShortQualifiedName('ecore::EClass',namespaceName)/]>&  eClass) const
    {
        int classID = eClass->getClassifierID();
        switch(classID)
        {
        [for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
            case [anEPackage.getInterfaceName()/]::[aClass.getClassifierIDName()/]:
                return std::static_pointer_cast<[getShortQualifiedName('ecore::EObject',namespaceName)/]>( create[aClass.name/]() );
        [/for]
        default:
                throw "create: " + eClass->getName() + " not found";
        }
        return nullptr;
    }
    
    [for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
    template <typename... I>
    std::shared_ptr<[aClass.getInterfaceName()/]> [className/]<I...>::create[aClass.name/]() const
    {
    [let pointerName : String = if aClass.hasExtension() then aClass.getQualifiedExtensionName() else aClass.getQualifiedImplementationName() endif]
	[let shortPointerName : String = getShortQualifiedName(pointerName,namespaceName)]
        std::shared_ptr<[shortPointerName/]> element( new [shortPointerName/]() );
    [/let]
	[/let]
        element->[getThisPtrSetterName()/](element);
        return element;
    }
    
    [let ref : OrderedSet(EReference) = aClass.getAllContainers()]
    [for(aReference:EReference | ref->sortedBy(name))]
    template <typename... I>
    std::shared_ptr<[aClass.getInterfaceName()/]> [className/]<I...>::create[aClass.name/]([aReference.generateParameterType()/] eContainer) const
    {
        [generateCreateFunctionContent(aClass, ref, aReference, anEPackage, false)/]
    }
    [if(aClass.getElementIDAccessorName().size() > 0)]
    template <typename... I>
    std::shared_ptr<[aClass.getInterfaceName()/]> [className/]<I...>::create[aClass.name/]([aReference.generateParameterType()/] eContainer, const unsigned int classID) const
    {
        [generateCreateFunctionContent(aClass, ref, aReference, anEPackage, true)/]
    }
    [/if]
    [/for]
    [/let]
    [/for]
    
    [let dataTypes : Sequence(EDataType) = anEPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name)]
    template <typename... I>
    ecore::Any [className/]<I...>::createFromString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const std::string& literalValue) const
    {
        int classifierID = eDataType->getClassifierID();
        switch( classifierID )
        {
    [for (aDataType : EDataType | dataTypes)]
            case [anEPackage.getInterfaceName()/]::[aDataType.getClassifierIDName()/]:
                return create[aDataType.name/]FromString(eDataType,literalValue);
    [/for]
            default:
                throw "The datatype '" + eDataType->getName() + "' is not a valid classifier";
        }
    }
    
    template <typename... I>
    std::string [className/]<I...>::convertToString(const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const ecore::Any& instanceValue) const
    {
        int classifierID = eDataType->getClassifierID();
        switch( classifierID )
        {
    [for (aDataType : EDataType | dataTypes)]
            case [anEPackage.getInterfaceName()/]::[aDataType.getClassifierIDName()/]:
                return convert[aDataType.name/]ToString(eDataType,instanceValue);
    [/for]
            default:
                throw "The datatype '" + eDataType->getName() + "' is not a valid classifier";
        }
    }
    
    [for (aDataType : EDataType | dataTypes)]
    [anEPackage.generateCreateFromString(aDataType)/]
	[anEPackage.generateConvertToString(aDataType)/]
    [/for]
    [/let]
    
    template <typename... I>
    std::shared_ptr<[anEPackage.getInterfaceName()/]> [className/]<I...>::get[anEPackage.getInterfaceName()/]() const
    {
        return [anEPackage.getInterfaceName()/]::eInstance();
    }
}
[/file]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let className : String = aPackage.getFactoryBaseName()]
[let namespaceName : String = aPackage.getImplementationNamespaceName()]
[let createMethodName : String = 'create' + aDataType.name + 'FromString']
[let enumTypeName : String = aDataType.name ]
[let varName : String = enumTypeName.toLowerFirst() ]
template <typename... I>
ecore::Any [className/]<I...>::[createMethodName/](const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const std::string& literalValue) const
{
    // [protected (className +'::' + createMethodName)]
	[aDataType.name/] [varName/];
	std::stringstream s(literalValue);
	s >> [varName/];
	return [varName/];
    // [/protected]
}
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType )]
[let className : String = aPackage.getFactoryBaseName()]
[let namespaceName : String = aPackage.getImplementationNamespaceName()]
[let createMethodName : String = 'create' + aDataType.name + 'FromString']template <typename... I>
ecore::Any [className/]<I...>::[createMethodName/](const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const std::string& literalValue) const
{
    // [protected (className +'::' + createMethodName)]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let className : String = aPackage.getFactoryBaseName()]
[let namespaceName : String = aPackage.getImplementationNamespaceName()]
[let convertMethodName : String = 'convert' + aDataType.name + 'ToString']
[let enumTypeName : String = aDataType.name ]
[let varName : String = enumTypeName.toLowerFirst() ]
template <typename... I>
std::string [className/]<I...>::[convertMethodName/](const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const ecore::Any& instanceValue) const
{
	// [protected (className +'::' + convertMethodName)]
	auto [varName/] = ecore::anyCast<[enumTypeName/]>(instanceValue);
	std::stringstream s;
	s << [varName/];
	return s.str(); 
    // [/protected]
}
[/let]
[/let]
[/let]
[/let]
[/let]
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType )]
[let className : String = aPackage.getFactoryBaseName()]
[let namespaceName : String = aPackage.getImplementationNamespaceName()]
[let convertMethodName : String = 'convert' + aDataType.name + 'ToString']
template <typename... I>
std::string [className/]<I...>::[convertMethodName/](const std::shared_ptr<[getShortQualifiedName('ecore::EDataType',namespaceName)/]>& eDataType,const ecore::Any& instanceValue) const
{
    // [protected (className +'::' + convertMethodName)]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]


[template public generateCreateFunctionContent(aClass : EClass, ref : OrderedSet(EReference), aReference : EReference, anEPackage : EPackage, addID : Boolean)]
[if(addID)]
[let pointerName : String = if aClass.hasExtension() then aClass.getExtensionName() else aClass.getImplementationName() endif]
auto element = std::static_pointer_cast< [pointerName/] >( create[aClass.name/]() );
[/let]
element->set[aClass.getElementIDAccessorName()/]ID(classID);
[else]
auto element = create[aClass.name/]();
[/if]
[if(not aReference.eOpposite.name.oclIsUndefined())]
if( eContainer)
[if(aReference.eOpposite.upperBound <> 1)]
    eContainer->get[aReference.eOpposite.name.toUpperFirst()/]()->add(element);
[else]
    eContainer->set[aReference.eOpposite.name.toUpperFirst()/](element);
[/if]
[/if]
return element;
[/template]
