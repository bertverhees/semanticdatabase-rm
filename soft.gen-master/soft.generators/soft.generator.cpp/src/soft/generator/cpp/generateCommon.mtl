[**
 * This file is part of soft.generators, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]

[**
 * Helper for c++ abstract function sufix
*/]
[query public abstractSufix(impl : Boolean) : String = if (impl = false) then '= 0' else '' endif/]
[query public getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'is' else 'get' endif/]

[query public getSetterName(feature : EStructuralFeature) : String = if hasKey('setterName') then valueKey('setterName') else 'set'.concat(name.toUpperFirst()) endif/]
[query public getGetterName(feature : EStructuralFeature) : String = if hasKey('getterName') then valueKey('getterName') else getterPrefix().concat(name.toUpperFirst()) endif/]
[query public getUnSetterName(feature : EStructuralFeature) : String = if hasKey('unSetterName') then valueKey('unSetterName') else 'unset'.concat(name.toUpperFirst()) endif/]
[query public getIsSetName(feature : EStructuralFeature) : String = if hasKey('isSetName') then valueKey('isSetName') else 'isSet'.concat(name.toUpperFirst()) endif/]

[**
 * File Comments 
*/]
[template public fileComment(aAny : OclAny)]
// Code generated by soft.generator.cpp. DO NOT EDIT.

[getFileNotes()/]
[/template]

[**
 * Guards
*/]
[query public getGuardName(namedelement : ENamedElement, sufix: String) : String = 
        if (namedelement.eContainer().oclIsUndefined()) 
        then namedelement.name.concat(sufix).concat('_hpp').toUpperCase() 
        else namedelement.eContainer().oclAsType(EPackage).name.concat('_').concat(namedelement.name).concat(sufix).concat('_hpp').toUpperCase()
        endif/]

[template public startGuard(namedelement : ENamedElement)]
[startGuard(namedelement,'')/]
[/template]

[template public startGuard(namedelement : ENamedElement, sufix : String)]
#ifndef [getGuardName(sufix)/]
#define [getGuardName(sufix)/]
[/template]


[template public endGuard(namedelement : ENamedElement)]
[endGuard(namedelement, '')/]
[/template]

[template public endGuard(namedelement : ENamedElement, sufix : String)]
#endif /* [getGuardName(sufix)/] */
[/template]

[**
 * ThisPtr
*/]
[query public getThisPtrName(anEClass : EClass) : String = 'thisPtr'/]
[query public getThisPtrSetterName(anEClass : EClass) : String = 'set' + getThisPtrName().toUpperFirst()/]
[query public getThisPtrGetterName(anEClass : EClass) : String = 'get' + getThisPtrName().toUpperFirst()/]

[**
 * Namespaces
*/]
[query public getInterfaceNamespaceName( aPackage : EPackage ) : String = aPackage.getQualifiedNamespaceName( aPackage.getInterfaceNamespace() ) /]
[query public getImplementationNamespaceName( aPackage : EPackage ) : String = aPackage.getQualifiedNamespaceName( aPackage.getImplementationNamespace() )/]
[query public getTestsNamespaceName( aPackage : EPackage ) : String = aPackage.getQualifiedNamespaceName( aPackage.getTestsNamespace() )/]
[query public getExtensionNamespaceName( aPackage : EPackage ) : String = aPackage.getQualifiedNamespaceName( aPackage.getExtensionNamespace() )/]

[query private getBaseNamespace( aPackage : EPackage ) : String = if hasKey('baseNamespace') then valueKey('baseNamespace') else '' endif/]
[query private getInterfaceNamespace( aPackage : EPackage ) : String = if hasKey('interfaceNamespace') then valueKey('interfaceNamespace') else '' endif/]
[query private getImplementationNamespace( aPackage : EPackage ) : String = if hasKey('implementationNamespace') then valueKey('implementationNamespace') else 'impl' endif/]
[query private getExtensionNamespace( aPackage : EPackage ) : String = if hasKey('extensionNamespace') then valueKey('extensionNamespace') else 'ext' endif/]
[query private getTestsNamespace( aPackage : EPackage ) : String = if hasKey('testsNamespace') then valueKey('testsNamespace') else 'tests' endif/]
[query private getQualifiedNamespaceName( aPackage : EPackage , aSuffix : String  ) : String = 
    if ( matches(aSuffix,'\\{\\d+\\}') ) then
        addNamespacePrefix(aPackage.getBaseNamespace(),aSuffix.format(aPackage.getNamespaceNameSubstitutions()))
    else 
        addNamespaceSuffix(aPackage.getQualifiedNamespaceName(),aSuffix) endif
/]
[query private getQualifiedNamespaceName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getBaseNamespace() , aPackage.name )/]
[query private addNamespacePrefix( aPrefix : String , aName : String ) : String = if ( aPrefix = '' ) then aName else aPrefix + '::' + aName endif/]
[query private addNamespaceSuffix( aName : String , aSuffix : String ) : String = if ( aSuffix = '' ) then aName else aName + '::' + aSuffix endif/]
[query private getNamespaceNameSubstitutions( aPackage : EPackage ) : Sequence(String) =
   let names : Sequence(String) = aPackage.getNamespaceNames() in
    if ( names->size() > 1 ) then
        names->prepend( join( names , '::' ) )
    else
        names
    endif
/]
[query private getNamespaceNames( aPackage : EPackage ) : Sequence(String) =
    if ( aPackage.oclIsUndefined() ) then
        Sequence(String){}
    else
        aPackage.eSuperPackage.getNamespaceNames()->append( aPackage.name )
    endif
/]

[query public getShortQualifiedName( aQualifiedName : String , aNamespaceName : String ) : String =
    aQualifiedName.getShortQualifiedNameSep(aNamespaceName, '::')    
/]

[query public removeNamespace( aQualifiedName : String ) : String =
    aQualifiedName.getUnQualifiedNameSep('::' )
/]
[**
 * Output folders
*/]
[query public namespaceToFolder( aQualified : String  ) : String = aQualified.substituteAll('::', '/')/]
[query public getImplementationFolder( aPackage : EPackage ) : String = namespaceToFolder(aPackage.getImplementationNamespaceName())/]
[query public getInterfaceFolder( aPackage : EPackage ) : String = namespaceToFolder(aPackage.getInterfaceNamespaceName())/]
[query public getTestsFolder( aPackage : EPackage ) : String = namespaceToFolder(aPackage.getTestsNamespaceName())/]

[**
 * Classes names
*/]
[query public getInterfaceName( aPackage : EPackage ) : String = getInterfaceName( getPackageName(),aPackage) /]
[query public getInterfaceName( aClass : EClass ) : String = getInterfaceName(aClass.name,aClass.ePackage) /]
[query public getInterfaceName( aElementName : String , aPackage : EPackage ) : String = let pattern : String = aPackage.getInterfaceNamePattern() in if pattern ='' then aElementName else pattern.format(Sequence{aElementName}) endif /]
[query public getInterfaceNamePattern( aPackage : EPackage ) : String = if hasKey('interfaceNamePattern') then valueKey('interfaceNamePattern') else '' endif/]

[query public getBaseName( aClass : EClass ) : String = aClass.ePackage.getBaseName(aClass.name)/]
[query public getBaseName( aPackage : EPackage ) : String = aPackage.getBaseName(getPackageName() )/]
[query public getBaseName( aPackage : EPackage , aElementName : String ) : String = let pattern : String = aPackage.getBaseNamePattern() in if pattern ='' then aElementName + 'Base' else pattern.format(Sequence{aElementName}) endif /]
[query public getBaseNamePattern( aPackage : EPackage ) : String = if hasKey('baseNamePattern') then valueKey('baseNamePattern') else '' endif/]

[query public getImplementationName( aClass : EClass ) : String = getImplementationName(aClass.name, aClass.ePackage)/]
[query public getImplementationName( aPackage : EPackage ) : String = getImplementationName( getPackageName(),aPackage)/]
[query public getImplementationName( aElementName : String , aPackage : EPackage ) : String = let pattern : String = aPackage.getImplementationNamePattern() in if pattern ='' then aElementName + 'Impl' else pattern.format(Sequence{aElementName}) endif /]
[query private getImplementationNamePattern( aPackage : EPackage ) : String = if hasKey('implementationNamePattern') then valueKey('implementationNamePattern') else '' endif/]

[query public getExtensionName( aClass : EClass ) : String = getExtensionName(aClass.name, aClass.ePackage)/]
[query public getExtensionName( aPackage : EPackage ) : String = getExtensionName( getPackageName(),aPackage)/]
[query private getExtensionName( aElementName : String , aPackage : EPackage ) : String = let pattern : String = aPackage.getExtensionNamePattern() in if pattern ='' then aElementName + 'Ext' else pattern.format(Sequence{aElementName}) endif /]
[query private getExtensionNamePattern( aPackage : EPackage ) : String = if hasKey('extensionNamePattern') then valueKey('extensionNamePattern') else '' endif/]

[query public getInternalName( aClass : EClass ) : String = getInternalName(aClass.name, aClass.ePackage)/]
[query private getInternalName( aElementName : String , aPackage : EPackage ) : String = let pattern : String = aPackage.getInternalNamePattern() in if pattern ='' then aElementName + 'Internal' else pattern.format(Sequence{aElementName}) endif /]
[query private getInternalNamePattern( aPackage : EPackage ) : String = if hasKey('internalNamePattern') then valueKey('internalNamePattern') else '' endif/]


[query public getMockName( aClass : EClass ) : String = getMockName(aClass.name, aClass.ePackage)/]
[query private getMockName( aElementName : String , aPackage : EPackage ) : String = 
    let pattern : String = aPackage.getMockNamePattern() in 
    if pattern ='' then 'Mock' + aElementName else pattern.format(Sequence{aElementName}) endif 
/]
[query private getMockNamePattern( aPackage : EPackage ) : String = if hasKey('mockNamePattern') then valueKey('mockNamePattern') else '' endif/]
[query public getMockBaseName( aClass : EClass ) : String = aClass.ePackage.getBaseName(getMockName())/]

[query public getFactoryInterfaceName( aPackage : EPackage ) : String = getInterfaceName( getFactoryName() , aPackage )/]
[query public getFactoryBaseName( aPackage : EPackage ) : String = aPackage.getBaseName( getFactoryName() )/]
[query public getFactoryExtensionName( aPackage : EPackage ) : String = getExtensionName( getFactoryName() , aPackage )/]

[query private getPackageName( aPackage : EPackage ) : String = aPackage.name.toUpperFirst() + 'Package'/]

[query public getQualifiedInterfaceName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getInterfaceNamespaceName() , aClass.getInterfaceName() )/]
[query public getQualifiedInterfaceName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getInterfaceNamespaceName() , aPackage.getInterfaceName() )/]

[query public getQualifiedImplementationName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getImplementationNamespaceName() , aClass.getImplementationName())/]
[query public getQualifiedImplementationName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getImplementationNamespaceName() , aPackage.getImplementationName())/]

[query public getQualifiedExtensionName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getExtensionNamespaceName() , aClass.getExtensionName())/]

[query public getQualifiedInternalName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getImplementationNamespaceName() , aClass.getInternalName())/]

[query public getQualifiedBaseName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getImplementationNamespaceName() , aClass.getBaseName())/]
[query public getQualifiedBaseName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getImplementationNamespaceName() , aPackage.getBaseName())/]
[query public getQualifiedBaseExtensionName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getExtensionNamespaceName() , getExtensionName(aClass.getBaseName(),aClass.ePackage))/]

[query public getQualifiedMockName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getTestsNamespaceName() , aClass.getMockName())/]
[query public getQualifiedMockBaseName( aClass : EClass ) : String = addNamespacePrefix( aClass.ePackage.getTestsNamespaceName() , aClass.getMockBaseName())/]

[query public getFactoryImplementationName( aPackage : EPackage ) : String = getImplementationName( getFactoryName() , aPackage )/]
[query public getFactoryName( aPackage : EPackage ) : String = aPackage.name.toUpperFirst() + 'Factory'/]

[query public getFactoryQualifiedInterfaceName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getInterfaceNamespaceName() , aPackage.getFactoryInterfaceName() )/]
[query public getFactoryQualifiedBaseName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getImplementationNamespaceName() , aPackage.getFactoryBaseName() )/]
[query public getFactoryQualifiedImplementationName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getImplementationNamespaceName() , aPackage.getFactoryImplementationName() )/]
[query public getFactoryQualifiedExtensionName( aPackage : EPackage ) : String = addNamespacePrefix( aPackage.getExtensionNamespaceName() , aPackage.getFactoryExtensionName() )/]

[query public getMockLibrary( aPackage : EPackage ) : String = if hasKey('mockLibrary') then valueKey('mockLibrary') else 'Turtle' endif/] 

[query public isGoogleMock( aPackage : EPackage ) : Boolean = getMockLibrary() = 'GMock'/]
[query public isTurtleMock( aPackage : EPackage ) : Boolean = getMockLibrary() = 'Turtle'/]


[query private getPackageName(aStructural : EStructuralFeature,aClass: EClass) : String = if( aStructural.eContainingClass.ePackage = aClass.ePackage  ) then aStructural.eContainingClass.ePackage.getInterfaceName() else aStructural.eContainingClass.ePackage.getQualifiedInterfaceName() endif/]
[query private getPackageName(aOperation : EOperation,aClass: EClass) : String = if( aOperation.eContainingClass.ePackage = aClass.ePackage  ) then aOperation.eContainingClass.ePackage.getInterfaceName() else aOperation.eContainingClass.ePackage.getQualifiedInterfaceName() endif/]

[query public getElementInstanceName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName().concat('_') /]

[query public getMetaType(aClass : EClassifier) : String = getMetaType(aClass, aClass.ePackage) /]
[query public getMetaType(anENamedElement : ENamedElement, anEPackage : EPackage) : String = if anEPackage = anENamedElement.eClass().ePackage then anENamedElement.eClass().getInterfaceName() else anENamedElement.eClass().getQualifiedInterfaceName() endif /]

[query public getPackageGetter(aReference : EReference) : String = if oclIsUndefined() then 'nullptr' else getterPrefix().concat(getElementAccessorName()).concat('()') endif/]
[query public getPackageGetter(aAttribute : EAttribute) : String = 'get'.concat(getElementAccessorName()).concat('()') /]

[query public packageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature) : String = packageGetter(aEClassifier,aStruct.eContainingClass) /]
[query public packageGetter(aEClass : EClass, supertype : EClass) : String = packageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier)) /]
[query public packageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier) : String = needMetaModelPackageGetter(aEClassifier1, aEClassifier2).concat('get').concat(aEClassifier1.getElementAccessorName()).concat('()') /]
[query public needMetaModelPackageGetter(aClassifier1 : EClassifier ,aClassifier2 : EClassifier ) : String = if(aClassifier1.ePackage.name = aClassifier2.ePackage.name )then '' else  aClassifier1.ePackage.nsPrefix.concat('::').concat(aClassifier1.ePackage.name.toUpperFirst()).concat('Package').concat('::eInstance()->')  endif /]


[query public getQualifiedIDName( aClass : EClass , aStructuralFeature : EStructuralFeature ) : String =
    aStructuralFeature.getPackageName(aClass) + '::' + aClass.getFeatureIDName( aStructuralFeature )
/]

[query public getQualifiedIDName( aClass : EClass , aOperation : EOperation ) : String =
    aOperation.getPackageName(aClass) + '::' + aClass.getOperationIDName( aOperation )
/]

[**
 * Feature / Operation accessors visibility
*/]
[query public getVisibilityType( aEModelElement : EModelElement , aImplementation : Boolean ) : String = getVisibilityType(aEModelElement, null, aImplementation)/]
[query public getVisibilityType( aEModelElement : EModelElement , aAccessor : String, aImplementation : Boolean ) : String =
    let key : String = if aAccessor.oclIsUndefined() then 'visibility' else aAccessor.concat('Visibility') endif in   
    if hasKey( key ) then
        let value : String = valueKey( key ) in
        let index : Integer = value.index( ':' ) in
        if ( index = -1 ) then
            value
        else
            if ( aImplementation ) then
                value.substring( index + 1 )
            else
                value.substring(1 , index - 1 )
            endif
        endif
    else 
        'public'
    endif
/]

[query public hasSetter(aStructuralFeature : EStructuralFeature , aVisibility : String , aImplementation : Boolean ) : Boolean = isSet() and aStructuralFeature.getVisibilityType('set',aImplementation ) = aVisibility /]
[query public hasGetter(aStructuralFeature : EStructuralFeature , aVisibility : String , aImplementation : Boolean) : Boolean = isGet() and aStructuralFeature.getVisibilityType('get', aImplementation ) = aVisibility /]
[query public hasUnSetter(aStructuralFeature : EStructuralFeature , aVisibility : String , aImplementation : Boolean) : Boolean = isUnSet() and aStructuralFeature.getVisibilityType('unset', aImplementation ) = aVisibility /]
[query public hasIsSet(aStructuralFeature : EStructuralFeature , aVisibility : String , aImplementation : Boolean) : Boolean = isIsSet() and aStructuralFeature.getVisibilityType('isset', aImplementation ) = aVisibility /]

[query public isPublic( anEOperation : EOperation, aImplementation: Boolean ) : Boolean = anEOperation.getVisibilityType(aImplementation) = 'public'/]
[query public isExported( aNamedElement : ENamedElement ) : Boolean = if ( hasKey('exported') ) then valueKey('exported') = 'true' else false endif/]

[**
 * Classes Onthology
*/]
[query public hasExtension( aEClass : EClass ) : Boolean = hasKey('extension') and valueKey('extension' )='true'/]

[query public getInterfaceExtends(aClass : EClass ) : Sequence(String) =
    let qualifiedInterfaces : Sequence(String) = aClass.eSuperTypes->collect(c | c.getQualifiedInterfaceName() ) in
    if ( qualifiedInterfaces->isEmpty() ) then
        if ( aClass.name = 'EObject' ) then
            qualifiedInterfaces->prepend('ecore::ENotifier')
        else
            qualifiedInterfaces->prepend('ecore::EObject')
        endif
    else
        qualifiedInterfaces
    endif 
/]

[query public getClassExtends(aClass : EClass ) : String = 
    let aPackage : EPackage = aClass.ePackage in
    let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
        if ( aClass.name = 'EObject' ) then
            'ecore::impl::BasicEObject'
        else if ( aPackage.hasKey('dynamic' ) and aPackage.valueKey('dynamic') = 'true' ) then
            'ecore::impl::DynamicEObjectBase'
        else
            'ecore::impl::EObjectBase'
        endif endif
    else
        if ( extendsClass.hasExtension() ) then
            extendsClass.getQualifiedBaseExtensionName()
        else
            extendsClass.getQualifiedBaseName()
        endif
    endif
/]

[query public getClassImplements(aClass : EClass ) : Sequence(String) = Sequence{ aClass.getQualifiedInterfaceName() }/]

[query public getMockExtends(aClass : EClass ) : String =
    let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
        if ( aClass.name = 'EObject' ) then
            'ecore::tests::MockENotifier'
        else
            'ecore::tests::MockEObject'
        endif
    else
        extendsClass.getQualifiedMockName()
    endif 
/]

[query public getInternalExtends(aClass : EClass ) : String =
    let extendsClass : EClass = aClass.eAllSuperTypes->iterate( c ; res : EClass = null | ( 
        if (res.oclIsUndefined() ) then
            if ( c.hasOnlyImplementationFeatures() ) then
                c
            else
                res
            endif
        else
            res
        endif
    ) ) in
    if (extendsClass.oclIsUndefined() ) then
        'ecore::impl::EObjectInternal'
    else
        extendsClass.getQualifiedInternalName()
    endif    
 
/]


[query public getMockImplements(aClass : EClass ) : Sequence(String) = Sequence{ aClass.getQualifiedInterfaceName() }/]

[query public hasOnlyImplementationFeatures(aClass : EClass) : Boolean = aClass.eStructuralFeatures->exists(isOnlyImplementation())/]
    
[query public isOnlyImplementation(aFeature : EStructuralFeature) : Boolean = 
    (hasGetter('public',true) and not hasGetter('public',false)) or 
    (hasSetter('public',true) and not hasSetter('public',false)) or
    (hasUnSetter('public',true) and not hasUnSetter('public',false))/]