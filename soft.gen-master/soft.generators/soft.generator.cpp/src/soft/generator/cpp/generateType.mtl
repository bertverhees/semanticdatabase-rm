[**
 * This file is part of soft.generators, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::cpp::generateCommon/]

[query public isDate(anEClassifier : EClassifier) : Boolean = if (oclIsUndefined()) then false else name = 'EDate' endif/]
[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query public needReference(anEDataType : EGenericType) : Boolean = ( not anEDataType.oclIsUndefined() ) and needReference(anEDataType.eClassifier)/]
[query public needReference(anEClassifier : EClassifier) : Boolean = not oclIsUndefined() and( 
                                                                (not oclIsKindOf(EDataType)) or 
                                                                name = 'EString' or 
                                                                name = 'EEnumerator' or 
                                                                name = 'EDiagnosticChain' or 
                                                                name = 'EEList' or  
                                                                name = 'EMap' or 
                                                                name = 'EJavaObject' )/]

[template public generateCppType(anEDataType : EGenericType, aPackage: EPackage) post (trim())]
[generateCppType(aPackage,true,false)/]
[/template]

[template private generateCppType(anEDataType : EGenericType , aPackage : EPackage, decorate : Boolean, const : Boolean ) post (trim())]
[if (anEDataType.oclIsUndefined())]
void
[else]
    [if (anEDataType.eTypeArguments->notEmpty())]
        [anEDataType.generateGenericType(aPackage,const)/]
    [elseif (decorate and not anEDataType.eClassifier.oclIsKindOf(EDataType))]
        std::shared_ptr<[if const]const [/if][getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]>
    [else]
        [getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
    [/if]
[/if]
[/template]

[template public generateGenericArgumentType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined())]
void[elseif (anEDataType.eClassifier.oclIsUndefined())]
[getShortQualifiedName('ecore::Any', aPackage.name )/][elseif (not anEDataType.eClassifier.oclIsKindOf(EDataType))]
std::shared_ptr<[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]>[else]
[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/][/if]
[/template]

[template public generateGenericType(anEDataType : EGenericType, aPackage : EPackage, const : Boolean) post (trim())]
[if (anEDataType.eClassifier.name = 'EJavaClass')]
[if const]const [/if][getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
[else]
std::shared_ptr<[if const]const [/if][getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]<[for (g : EGenericType | anEDataType.eTypeArguments) separator (',')][g.generateGenericArgumentType(aPackage)/][/for]>>[/if]
[/template]

[template public generateEffectiveType(eElement : ETypedElement ) post(trim())]
[if eElement.oclIsUndefined()]
[else]
[let aPackage : EPackage = eElement.getEPackage()]
[eElement.generateEffectiveType(aPackage,hasKey('const') and valueKey('const') = 'return')/]
[/let]
[/if]
[/template]

[template public generateEffectiveType(eElement : ETypedElement, aPackage : EPackage,const : Boolean ) post(trim())]
[if (isListType())]
std::shared_ptr<[if const]const [/if][getShortQualifiedName('ecore::EList', aPackage.name )/]<[eElement.eGenericType.generateCppType(aPackage)/]>>
[else]
[eElement.eGenericType.generateCppType(aPackage,true,const)/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation ) post(trim())]
[generateParameterList(aOperation,true)/]
[/template]

[template public generateParameterList(aOperation:EOperation, varName : Boolean) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (',')]
[sParameter.generateParameterType()/][if varName] [sParameter.name/][/if][/for]
[/template]

[template public generateParameterType(eElement : ETypedElement) post (trim())]
[if needReference(eElement.eGenericType)]
const [eElement.generateEffectiveType()/]&
[else]
[eElement.generateEffectiveType()/]
[/if]
[/template]

[template public generateReturnType(eElement : ETypedElement) post(trim())]
[eElement.generateEffectiveType()/]
[/template]

[template public generateReturnType(aAttribute : EAttribute) post(trim())]
[if needReference(aAttribute.eGenericType)]
const [aAttribute.generateEffectiveType()/]&
[else]
[aAttribute.generateEffectiveType()/]
[/if]
[/template]

[template public generateElementType(aStructuralFeature : EStructuralFeature) post (trim())]
[aStructuralFeature.eGenericType.generateCppType(aStructuralFeature.getEPackage(),false,false)/]
[/template]

[template public generateDataType(aStructuralFeature : EStructuralFeature) post (trim())]
[aStructuralFeature.generateEffectiveType()/]
[/template]

[template public generateDataType(eReference : EReference) post (trim())]
[let aPackage : EPackage = eReference.getEPackage()]
[if isListType()]
[let shortQualifiedListClass : String = getShortQualifiedName('ecore::EList', eReference.getEPackage().getQualifiedImplementationName())]
std::shared_ptr<[shortQualifiedListClass/]<[eReference.eGenericType.generateCppType(aPackage)/]>>
[/let]
[elseif isProxy()]
[let shortQualifiedProxyClass : String = getShortQualifiedName('ecore::impl::Proxy', eReference.getEPackage().getQualifiedImplementationName())]
[shortQualifiedProxyClass/]<[eReference.eGenericType.generateCppType(aPackage)/]>
[/let]
[else]
[eReference.pointerType()/]<[getShortQualifiedName(eReference.eGenericType.eClassifier.getType(), aPackage.name )/]>
[/if]
[/let]
[/template]

[template private pointerType(aReference : EReference) post(trim())]
[if isBackReference() or isProxy() ]
std::weak_ptr
[else]
std::shared_ptr
[/if]
[/template]

[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'EBoolean' , 'EBooleanObject' , 'Boolean'  , 'bool' , 'false' ,''},
        Sequence{ 'EInt' , 'EIntegerObject' , 'EBigInteger' , 'Integer'  , 'int' , '0' ,''},
        Sequence{ 'EDouble' , 'EDoubleObject' , 'EBigDecimal' , 'Real'  , 'double' , '0.' ,''},
        Sequence{ 'ELong' , 'ELongObject' , 'long' , '0' ,''},
        Sequence{ 'EByte' , 'EByteObject' 'EChar' , 'ECharacterObject', 'char' , '\'\'', ''},
        Sequence{ 'EByteArray' , 'char[]' , '' ,''},
		Sequence{ 'EFeatureMapEntry' , 'std::shared_ptr<ecore::EFeatureMapEntry>' , '' ,'"ecore/EFeatureMap.hpp"'},
        Sequence{ 'EFloat' , 'EFloatObject', 'float' , '0.f',''},
        Sequence{ 'EEList' , 'ecore::EList', '','"ecore/EList.hpp"'},
        Sequence{ 'EDate' , 'std::time_t', 'std::time_t(-1)' , '<ctime>'},
        Sequence{ 'EMap' , 'std::map', '' , '<map>'},
        Sequence{ 'EJavaObject', 'EEnumerator' , 'EDiagnosticChain' , 'ecore::Any', 'NO_VALUE' , '"ecore/Any.hpp"'},
        Sequence{ 'EJavaClass' , 'const std::type_info*', 'nullptr' , '<typeinfo>'},
        Sequence{ 'EString' , 'String', 'std::string', '""' , '<string>'},
        Sequence{ 'ETreeIterator' , 'ecore::ECollectionView', 'nullptr' , '"ecore/ECollectionView.hpp"'},
        Sequence{ 'EResource' , 'std::shared_ptr<ecore::EResource>', 'nullptr' , '"ecore/EResource.hpp"'}
    }
/]

[query private getType( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'ecore::Any'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceName()/]
[query private getType( aEnum : EEnum ) : String = aEnum.ePackage.name + '::' + aEnum.name/]
[query private getType( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 2 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/] 

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]


[query public getDefaultValue(aClassifier : EClassifier) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue()
    else 'nullptr' endif endif
/]

[query public getDefaultValue(aEnum : EEnum) : String = if aEnum.eLiterals->notEmpty() then aEnum.name + '::' + aEnum.eLiterals->at(1).name.toUpperCase() else '' endif/]

[query public getDefaultValue(aDataType : EDataType) : String =
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() - 1 )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]

[query public getInclude( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then ''
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getInclude()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getInclude()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getInclude()
    else '' endif endif endif endif
/]
[query private getInclude( aClass : EClass ) : String = '"' + namespaceToFolder( aClass.getQualifiedInterfaceName() ) + '.hpp"' /]
[query private getInclude( aEnum : EEnum ) : String = '"' +aEnum.ePackage.name + '/' + aEnum.name + '.hpp"'/]
[query private getInclude( aDataType : EDataType ) : String = 
    getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = aDataType.name) then
            s->at( s->size() )
        else
            res
        endif
    else 
        res 
    endif
 ) 
/]

 

