[**
 * This file is part of soft.generators, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateStructuralFeature/]

[import soft::generator::cpp::generateCommon /]
[import soft::generator::cpp::generateType /]

[query private isGoogleMock( aFeature : EStructuralFeature ) : Boolean = aFeature.eContainingClass.ePackage.isGoogleMock()/]
[query private isTurtleMock( aFeature : EStructuralFeature ) : Boolean = aFeature.eContainingClass.ePackage.isTurtleMock()/]

[query public isInitializationDefered( aStructuralFeature : EStructuralFeature ) : Boolean = isListType()/]




[template public generateDeclaration(aStructuralFeature : EStructuralFeature, impl : Boolean )]
[if hasGetter('public',impl)]
[aStructuralFeature.generateGetDeclaration(impl)/]

[/if]
[if hasSetter('public',impl)]
[aStructuralFeature.generateSetDeclaration(impl)/]

[/if]
[if hasUnSetter('public',impl)]
[aStructuralFeature.generateUnSetDeclaration(impl)/]

[/if]
[/template]

[template public generateBasicDeclaration(aStructuralFeature : EStructuralFeature)]
[if isBasicGet()]
[aStructuralFeature.generateBasicGetDeclaration()/]

[/if]
[if isBasicSet()]
[aStructuralFeature.generateBasicSetDeclaration()/]

[/if]
[if isBasicUnSet()]
[aStructuralFeature.generateBasicUnSetDeclaration()/]

[/if]
[/template]


[template public generateDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[if hasGetter('public',true)]
[aStructuralFeature.generateGetDefinition(aClass)/]

[/if]
[if hasSetter('public',true)]
[aStructuralFeature.generateSetDefinition(aClass)/]

[/if]
[if hasUnSetter('public',true)]
[aStructuralFeature.generateUnSetDefinition(aClass)/]

[/if]
[/template]


[template public generateBasicDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[if isBasicGet()]
[aStructuralFeature.generateBasicGetDefinition(aClass)/]

[/if]
[if isBasicSet()]
[aStructuralFeature.generateBasicSetDefinition(aClass)/]

[/if]
[if isBasicUnSet()]
[aStructuralFeature.generateBasicUnSetDefinition(aClass)/]

[/if]
[/template]

[template public generateMock(aStructuralFeature : EStructuralFeature)]
[if hasGetter('public',false)]
[aStructuralFeature.generateGetMock()/]
[/if]
[if hasSetter('public',false)]
[aStructuralFeature.generateSetMock()/]
[/if]
[if hasUnSetter('public',false)]
[aStructuralFeature.generateUnSetMock()/]
[/if]
[/template]

[template public generateDataDeclaration(aStructuralFeature : EStructuralFeature, aClass : EClass ) ]
[if aStructuralFeature.isLazy()]
[let shortQualifiedLazyClass : String = getShortQualifiedName('ecore::impl::Lazy', aStructuralFeature.getEPackage().getQualifiedImplementationName())]
[shortQualifiedLazyClass/]<[aStructuralFeature.generateDataType()/][if aStructuralFeature.getLazy() = 'action'],void[/if]> [aStructuralFeature.name/]_;
[/let]
[else]
[aStructuralFeature.generateDataType()/] [aStructuralFeature.name/]_;
[/if]
[/template]

[template public generateDataInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'no' and not aStructuralFeature.isInitializationDefered() )]
[aStructuralFeature.name/]_([generateDataInitializationValue(aClass)/])
[/template]

[template public generateDataInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'no' and aStructuralFeature.isInitializationDefered() )]
[aStructuralFeature.name/]_()
[/template]

[template public generateDataInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'lambda') ]
[aStructuralFeature.name/]_(['['/]&[']'/](){ return [generateDataInitializationValue(aClass)/];})
[/template]

[template public generateDataInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'function') ]
[aStructuralFeature.name/]_(['['/]&[']'/](){ return [aStructuralFeature.getInitializationMethodName()/]();})
[/template]

[template public generateDataInitialization(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'action') ]
[aStructuralFeature.name/]_(['['/]&[']'/](){ [aStructuralFeature.getInitializationMethodName()/]();})
[/template]

[template private generateDataInitializationValue(aStructuralFeature : EStructuralFeature, aClass : EClass) post(trim())]
[if isListType()]
[aStructuralFeature.getListConstructor(aClass)/]
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
[aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/]
[else]
[/if]
[/template]

[template public generateDataInitializationDefered( aStructuralFeature : EStructuralFeature, aClass : EClass) ? (not( aStructuralFeature.getLazy() = 'no' and aStructuralFeature.isInitializationDefered() ))]
[/template]

[template public generateDataInitializationDefered( aStructuralFeature : EStructuralFeature, aClass : EClass) ? (aStructuralFeature.getLazy() = 'no' and aStructuralFeature.isInitializationDefered())]
[aStructuralFeature.name/]_ = [generateDataInitializationValue(aClass)/];

[/template]

[template private generateDataInitializationMethodReturnType(aStructuralFeature : EStructuralFeature) post(trim())]
[if aStructuralFeature.getLazy() = 'action']void[else][aStructuralFeature.generateReturnType()/][/if]
[/template]

[template public generateDataInitializationMethodDeclaration(aStructuralFeature : EStructuralFeature) ]
[let methodName : String = aStructuralFeature.getInitializationMethodName()]
virtual [generateDataInitializationMethodReturnType()/] [methodName/]();
[/let]
[/template]

[template public generateDataInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass) ? ( aStructuralFeature.getLazy() = 'function' )]
[let className : String = aStructuralFeature.eContainingClass.getBaseName()]
[let methodName : String = aStructuralFeature.getInitializationMethodName()]
template <typename... I>
[generateDataInitializationMethodReturnType()/] [className/]<I...>::[methodName/]()
{
    // [protected (className + '::' + methodName)]
[if isListType()]
    return [getListConstructor(aClass)/];
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    return [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/];
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]

[/template]

[template public generateDataInitializationMethodDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass ) ? ( aStructuralFeature.getLazy() = 'action' )]
[let className : String = aStructuralFeature.eContainingClass.getBaseName()]
[let methodName : String = aStructuralFeature.getInitializationMethodName()]
template <typename... I>
void [className/]<I...>::[methodName/]()
{
    // [protected (className + '::' + methodName)]
[if isListType()]
    [aStructuralFeature.name/]_ = [getListConstructor(aClass)/];
[elseif isProxy()]
[elseif aStructuralFeature.oclIsKindOf(EAttribute)]
    [aStructuralFeature.name/]_ = [aStructuralFeature.oclAsType(EAttribute).getDefaultValue()/];
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]

[/template]

[template public generateBasicGetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getBaseName()]
[let methodName : String = aStructuralFeature.getGetterName().toUpperFirst()]
virtual [aStructuralFeature.generateReturnType()/] basic[methodName/]() const; 
[/let]
[/let]
[/template]

[template public generateBasicGetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
[let methodName : String = 'basic' + aStructuralFeature.getGetterName().toUpperFirst()]
template <typename... I>
[aStructuralFeature.generateReturnType()/] [className/]<I...>::[methodName/]() const 
{
    // [protected (className + '::' + methodName)]
[if isContainer()]
    if ( eContainerFeatureID() != [aClass.getQualifiedIDName(aStructuralFeature)/] )
        return [aStructuralFeature.generateEffectiveType()/]();
    else
        return std::static_pointer_cast<[aStructuralFeature.generateElementType()/]>(eInternalContainer());
[elseif not isVolatile()]
    return [aStructuralFeature.name/]_[if aStructuralFeature.isProxy() and not aStructuralFeature.isListType()].get()[elseif aStructuralFeature.isLazy()].value()[elseif aStructuralFeature.isBackReference()].lock()[/if];
[elseif (hasKey('getterBody'))]
    [valueKey('getterBody')/]
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/template]

[template public generateGetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean)]
virtual [aStructuralFeature.generateReturnType()/] [aStructuralFeature.getGetterName()/]() const [abstractSufix(impl)/];
[/template]

[template public generateGetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
template <typename... I>
[aStructuralFeature.generateReturnType()/] [className/]<I...>::[aStructuralFeature.getGetterName()/]() const 
{
    // [protected (className + '::' + aStructuralFeature.getGetterName()) ]
[if isContainer()]
    if ( eContainerFeatureID() != [aClass.getQualifiedIDName(aStructuralFeature)/] )
        return [aStructuralFeature.generateEffectiveType()/]();
    else
        return ecore::derived_pointer_cast<[aStructuralFeature.generateElementType()/]>(eContainer());
[elseif not isVolatile()]
	[if not isListType() and isProxy()]
	[let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
	[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]	
	auto [oldVarName/] = [aStructuralFeature.name/]_.get();
	if ( [oldVarName/] && [oldVarName/]->eIsProxy() ) {
		auto resolved = eResolveProxy([oldVarName/]);
		auto [newVarName/] = derived_pointer_cast<[aStructuralFeature.generateElementType()/]>(resolved);
		if ( [newVarName/] && [newVarName/] != [oldVarName/] ) {
			[aStructuralFeature.name/]_.setForced([newVarName/]);			
 		[if isContains()]
			std::shared_ptr<ENotificationChain> notifications;
		 	[if not isBidirectional()]
            notifications = [oldVarName/]->getInternal().eInverseRemove( getThisAsEObject(), EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications );
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [oldVarName/]->getInternal().eInverseRemove( getThisAsEObject(), [reverseClass.getFeatureIDName(reverseFeature)/] , notifications );
                [/let]
                [/let]
            [/if]
            if (![newVarName/]->getInternal().eInternalContainer()) {
            [if not isBidirectional()]
            notifications = [newVarName/]->getInternal().eInverseAdd( getThisAsEObject(), EOPPOSITE_FEATURE_BASE - [aClass.getFeatureIDName(aStructuralFeature)/] , notifications );
            [else]
                [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
                [let reverseClass : EClass = reverseFeature.eContainingClass]
            notifications = [newVarName/]->getInternal().eInverseAdd( getThisAsEObject(), [reverseClass.getFeatureIDName(reverseFeature)/] , notifications );
                [/let]
                [/let]
            [/if]
            }
            if (notifications)
                notifications->dispatch();
        [/if]
			if ( eNotificationRequired() )
        		eNotify( std::make_shared<ecore::impl::Notification>( getThisAsEObject() , ecore::ENotification::RESOLVE, [aClass.getQualifiedIDName(aStructuralFeature)/], [oldVarName/], [newVarName/]));			
			return [newVarName/];
		}
	}
	return [oldVarName/];	
	[/let]
	[/let]
	[else]
	return [aStructuralFeature.name/]_[if aStructuralFeature.isLazy()].get()[elseif aStructuralFeature.isBackReference()].lock()[/if];
	[/if]
[elseif hasKey('getterBody')]
    [valueKey('getterBody')/]
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";
[/if]
    // [/protected]
}
[/let]
[/template]

[template public generateGetMock(aStructuralFeature : EStructuralFeature) ? (isTurtleMock())]
MOCK_METHOD([aStructuralFeature.getGetterName()/],0);
[/template]

[template public generateGetMock(aStructuralFeature : EStructuralFeature) ? (isGoogleMock())]
MOCK_CONST_METHOD0([aStructuralFeature.getGetterName()/], [aStructuralFeature.generateReturnType()/]());
[/template]



[template public generateBasicSetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getBaseName()]
[let methodName : String = 'basic' +aStructuralFeature.getSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]<I...>::[methodName/]( [aStructuralFeature.generateParameterType()/] [newVarName/] , const std::shared_ptr<ecore::ENotificationChain>& msgs ); 
[/let]
[/let]
[/let]
[/template]


[template public generateBasicSetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
[let methodName : String = 'basic' +aStructuralFeature.getSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
template <typename... I>
std::shared_ptr<ecore::ENotificationChain> [className/]<I...>::[methodName/]( [aStructuralFeature.generateParameterType()/] [newVarName/] , const std::shared_ptr<ecore::ENotificationChain>& msgs) 
{
    // [protected (className + '::' + methodName)]
[if isContainer()]
    return eBasicSetContainer([newVarName/],[aClass.getQualifiedIDName(aStructuralFeature)/],msgs); 
[elseif not isVolatile()]
    [let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
    auto [oldVarName/] = [aStructuralFeature.name/]_[if isProxy()].get()[elseif isLazy()].value()[elseif isBackReference()].lock()[/if];
    [aStructuralFeature.name/]_ = [newVarName/];
    auto notifications = msgs;
    if ( eNotificationRequired() )
    {
        auto notification = std::make_shared<ecore::impl::Notification>(getThisAsEObject(), ecore::ENotification::SET, [aClass.getQualifiedIDName(aStructuralFeature)/], [oldVarName/], [newVarName/] );
        if (notifications)
            notifications->add( notification );
        else
            notifications = notification;
    }
    return notifications;
    [/let]
[elseif (hasKey('setterBody'))]
    [valueKey('setterBody')/]
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]

[template public generateSetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean)]
virtual void [aStructuralFeature.getSetterName()/]([aStructuralFeature.generateParameterType()/] ['new' + aStructuralFeature.name.toUpperFirst()/]) [abstractSufix(impl)/];
[/template]

[template public generateSetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
[let methodName : String = aStructuralFeature.getSetterName()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
template <typename... I>
void [className/]<I...>::[methodName/]([aStructuralFeature.generateParameterType()/] [newVarName/])
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    [if isContainer()]
    if ( [newVarName/] != eInternalContainer() || ([newVarName/] && eContainerFeatureID() !=  [aClass.getQualifiedIDName(aStructuralFeature)/])) 
    {
        std::shared_ptr<ecore::ENotificationChain> notifications;
        if ( eInternalContainer() )
            notifications = eBasicRemoveFromContainer(notifications);
        if ( [newVarName/] )
            notifications = [newVarName/]->getInternal().eInverseAdd( getThisPtr() , [aClass.getQualifiedIDName(aStructuralFeature)/], notifications );
        notifications = basic[methodName.toUpperFirst()/]( [newVarName/], notifications );
        if ( notifications )
            notifications->dispatch();
    }
    else if ( eNotificationRequired() )
        eNotify( std::make_shared<ecore::impl::Notification>( getThisAsEObject() , ecore::ENotification::SET, [aClass.getQualifiedIDName(aStructuralFeature)/], [newVarName/], [newVarName/]));
    [elseif isBidirectional() or isContains()]
        [if aStructuralFeature.isBackReference()]
    auto [aStructuralFeature.name/] = [aStructuralFeature.name/]_.lock();
        [/if]
        [let currentVarName : String = aStructuralFeature.name + ( if aStructuralFeature.isBackReference() then '' else '_' endif)]    
    if ( [currentVarName/] != [newVarName/] )
    {
        std::shared_ptr<ENotificationChain> notifications;
        if ( [currentVarName/] )
        [if not isBidirectional()]
            notifications = [currentVarName/]->getInternal().eInverseRemove( getThisAsEObject(), ecore::EOPPOSITE_FEATURE_BASE - [aClass.getQualifiedIDName(aStructuralFeature)/] , notifications );
        if ( [newVarName/] )
            notifications = [newVarName/]->getInternal().eInverseAdd( getThisAsEObject(), ecore::EOPPOSITE_FEATURE_BASE - [aClass.getQualifiedIDName(aStructuralFeature)/] , notifications );
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
            notifications = [currentVarName/]->getInternal().eInverseRemove( getThisAsEObject(), [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/] , notifications );
        if ( [newVarName/] )
            notifications = [newVarName/]->getInternal().eInverseAdd( getThisAsEObject(), [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/] , notifications );
            [/let]
        [/if]
        notifications = basic[methodName.toUpperFirst()/]([newVarName/],notifications);
        if (notifications)
            notifications->dispatch();
    }
        [if isUnSettable()]
        [/if]
        [/let]
    [else]
        [let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
    auto [oldVarName/] = [aStructuralFeature.name/]_[if isProxy()].get()[elseif isLazy()].value()[elseif isBackReference()].lock()[/if];
    [aStructuralFeature.name/]_ = [newVarName/];
    if ( eNotificationRequired() )
        eNotify( std::make_shared<ecore::impl::Notification>(getThisAsEObject(), ecore::ENotification::SET, [aClass.getQualifiedIDName(aStructuralFeature)/], [oldVarName/], [newVarName/]));
        [/let]
    [/if]
[elseif hasKey('setterBody')]
    [valueKey('setterBody')/] 
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/let]
[/template]


[template private getListConstructor( anEAttribute : EStructuralFeature , aClass : EClass ) post(trim())]
[/template]

[template private getListConstructor( anEAttribute : EAttribute , aClass : EClass) post(trim())]
std::make_shared<ecore::impl::BasicEList<[anEAttribute.eGenericType.generateCppType(anEAttribute.getEPackage())/],[anEAttribute.unique/]>>()
[/template]

[template private getListConstructor( anEReference : EReference , aClass : EClass) post(trim())]
[let typeArgument : String = anEReference.eGenericType.generateCppType(anEReference.getEPackage())]
[if (anEReference.containment)]
    [if anEReference.eOpposite.oclIsUndefined() ]
        std::make_shared<ecore::impl::BasicEObjectList<[typeArgument/],true,true,false,[anEReference.isProxy()/],[anEReference.isUnSettable()/]>>(getThisAsEObject(), [aClass.getQualifiedIDName(anEReference)/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        std::make_shared<ecore::impl::BasicEObjectList<[typeArgument/],true,true,true,[anEReference.isProxy()/],[anEReference.isUnSettable()/]>>(getThisAsEObject(), [aClass.getQualifiedIDName(anEReference)/] , [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/])
        [/let]
    [/if]
[else]
    [if anEReference.eOpposite.oclIsUndefined() ]
        std::make_shared<ecore::impl::BasicEObjectList<[typeArgument/],false,false,false,[anEReference.isProxy()/],[anEReference.isUnSettable()/]>>(getThisAsEObject(), [aClass.getQualifiedIDName(anEReference)/] )
    [else]
        [let reverseFeature :EReference = anEReference.eOpposite ]
        std::make_shared<ecore::impl::BasicEObjectList<[typeArgument/],false,true,true,[anEReference.isProxy()/],[anEReference.isUnSettable()/]>>(getThisAsEObject(), [aClass.getQualifiedIDName(anEReference)/] , [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/])
        [/let]
    [/if]
[/if]
[/let]
[/template]

[template public generateSetMock(aStructuralFeature : EStructuralFeature) ? (isTurtleMock()) ]
MOCK_METHOD([aStructuralFeature.getSetterName()/],1);
[/template]

[template public generateSetMock(aStructuralFeature : EStructuralFeature) ? (isGoogleMock()) ]
MOCK_METHOD1([aStructuralFeature.getSetterName()/], void( [aStructuralFeature.generateParameterType()/] ) );
[/template]


[template public generateBasicUnSetDeclaration(aStructuralFeature : EStructuralFeature)]
[let className : String = aStructuralFeature.eContainingClass.getBaseName()]
[let methodName : String = 'basic' + aStructuralFeature.getUnSetterName().toUpperFirst()]
[let newVarName : String = 'new' + aStructuralFeature.name.toUpperFirst()]
std::shared_ptr<ecore::ENotificationChain> [className/]<I...>::[methodName/]( const std::shared_ptr<ecore::ENotificationChain>& msgs ); 
[/let]
[/let]
[/let]
[/template]


[template public generateBasicUnSetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
[let methodName : String = 'basic' + aStructuralFeature.getUnSetterName().toUpperFirst()]
[let oldVarName : String = 'old' + aStructuralFeature.name.toUpperFirst()]
[let varName : String = aStructuralFeature.name + '_']    
template <typename... I>
std::shared_ptr<ecore::ENotificationChain> [className/]<I...>::[methodName/]( const std::shared_ptr<ecore::ENotificationChain>& msgs) 
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    auto [oldVarName/] = [varName/]
    [varName/].reset()
    auto notifications = msgs;
    if ( eNotificationRequired())
    {
        auto notification = std::make_shared<ecore::impl::Notification>(getThisAsEObject() , ecore::ENotification::UNSET, [aClass.getQualifiedIDName(aStructuralFeature)/], [oldVarName/], ecore::Any());
        if ( notifications )
            notifications->add( notification );
        else
            notifications = notification;
    }
    return notifications;
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";
[/if] 
    // [/protected]
}
[/let]
[/let]
[/let]
[/let]
[/template]

[template public generateUnSetDeclaration(aStructuralFeature : EStructuralFeature, impl : EBoolean) ]
virtual void [aStructuralFeature.getUnSetterName()/]() [abstractSufix(impl)/];
[/template]

[template public generateUnSetDefinition(aStructuralFeature : EStructuralFeature, aClass : EClass)]
[let className : String = aClass.getBaseName()]
[let methodName : String = aStructuralFeature.getUnSetterName()]
template <typename... I>
void [className/]<I...>::[methodName/]()
{
    // [protected (className + '::' + methodName)]
[if not isVolatile()]
    [if isListType()]
    if ([aStructuralFeature.name/]_)
    {
        auto unsettable = std::static_pointer_cast<ecore::EUnsettableList<[aStructuralFeature.eGenericType.generateCppType(aStructuralFeature.getEPackage())/]>>([aStructuralFeature.name/]_[if isLazy()].get()[/if]);
        unsettable->unset();
    }
    [elseif isBidirectional() or isContains()]
    if ([aStructuralFeature.name/]_)
    {
        std::shared_ptr<ENotificationChain> notifications;
        [if not isBidirectional()]
        notifications = [aStructuralFeature.name/]_->getInternal().eInverseRemove( getThisAsEObject(), ecore::EOPPOSITE_FEATURE_BASE - [aClass.getQualifiedIDName(aStructuralFeature)/] , notifications );
        [else]
            [let reverseFeature : EStructuralFeature = aStructuralFeature.oclAsType(EReference).eOpposite]
        notifications = [aStructuralFeature.name/]_->getInternal().eInverseRemove( getThisAsEObject(), [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/] , notifications );
            [/let]
        [/if]
        notifications = basic[aStructuralFeature.getUnSetterName().toUpperFirst()/](notifications);
        if ( notifications )
            notifications->dispatch();
    }
    else if ( eNotificationRequired() )
        eNotify( std::make_shared<ecore::impl::Notification>(getThisAsEObject() , ecore::ENotification::UNSET, [aClass.getQualifiedIDName(aStructuralFeature)/], ecore::Any(), ecore::Any()));
    [else]
        if ( eNotificationRequired() )
        eNotify( std::make_shared<ecore::impl::Notification>(getThisAsEObject() , ecore::ENotification::UNSET, [aClass.getQualifiedIDName(aStructuralFeature)/], ecore::Any(), ecore::Any()));
    [/if]
[elseif hasKey('unsetterBody')]
    [valueKey('unsetterBody')/] 
[else]
#if defined(__FUNCSIG__)
    std::cout << __FUNCSIG__  << std::endl;
#endif
    throw "NotImplementedException";    
[/if]
    // [/protected]
}
[/let]
[/let]
[/template]

[template public generateUnSetMock(aStructuralFeature : EStructuralFeature) ? (isTurtleMock())]
MOCK_METHOD([aStructuralFeature.getUnSetterName()/],0);
[/template]

[template public generateUnSetMock(aStructuralFeature : EStructuralFeature) ? (isGoogleMock())]
MOCK_METHOD0([aStructuralFeature.getUnSetterName()/], void() );
[/template]






