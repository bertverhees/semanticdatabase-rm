[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateMock('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateElement/]
[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateElement/]
[import soft::generator::cpp::generateOperation/]
[import soft::generator::cpp::generateStructuralFeature/]
[import soft::generator::cpp::tests::generateCommon/]

[template public generateMock(aClass : EClass) {
    className : String = aClass.getMockName(); 
    classBaseName : String = aClass.getMockBaseName(); 
    namespaceName : String = aClass.ePackage.getTestsNamespaceName();
    guardName : String = '_'.concat(className);
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
	operations : Collection(EOperation) = aClass.getImplementedOperations(); }  ]
[file (aClass.ePackage.getOutputDirectory() + '/src-gen/' + aClass.ePackage.getTestsFolder() + '/' + className +'.hpp', false, 'UTF-8')]
[fileComment()/]
[startGuard(guardName)/]

[let includes : OrderedSet(String) = Set{ Set { namespaceToFolder(aClass.getMockExtends()) }
									    , aClass.getMockImplements()->collect( c | namespaceToFolder(c) )->asSet() 
										, aClass.getReferencedTypes()->selectByKind(EClass)->collect( c | namespaceToFolder(c.getQualifiedInterfaceName()) )->asSet() 
                                        }->flatten()->asOrderedSet()->sortedBy( s | s)]

[for (i : String | includes)]
#include "[i/].hpp"
[/for]
[/let]

namespace [namespaceName/]
{

    template <typename I>
    class [classBaseName/] : public [getShortQualifiedName(aClass.ePackage.getBaseName(aClass.getMockExtends()),namespaceName)/]<I> 
    {
    public:
        typedef [aClass.name.toUpperFirst()/] base_type;
        [features.generateMock()/]
		[operations.generateMock()/]

        // [protected (className)]
        // [/protected]
    };

    typedef [classBaseName/]<[for ( implClass : String | aClass.getMockImplements()->asOrderedSet()->sortedBy(s | s)) separator (', ')][getShortQualifiedName(implClass, namespaceName)/][/for]> [className/];
} 

[endGuard(guardName)/]
[/file]
[/template]
