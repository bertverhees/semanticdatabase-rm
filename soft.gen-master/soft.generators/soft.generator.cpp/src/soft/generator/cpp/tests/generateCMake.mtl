[**
 * This file is part of soft.generator.cpp, a project for cpp code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCMake('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::cpp::generateCommon/]
[import soft::generator::cpp::generateCMake/]
[import soft::generator::cpp::tests::generateCommon/]

[template private generateTestsCMakeFindPackages(aPackage : EPackage) ? (isTurtleMock())]
set(Boost_USE_STATIC_LIBS ON)
find_package(Boost 1.68.0 REQUIRED COMPONENTS unit_test_framework)
find_package(Turtle 2.3.0)
[/template]

[template private generateTestsCMakeFindPackages(aPackage : EPackage) ? (isGoogleMock())]
find_package(GTest 1.8.1 REQUIRED MODULE)
find_package(GMock 1.8.1 REQUIRED MODULE)
[/template]

[template private generateTestsCMakeTargetLink(aPackage : EPackage) ? (isTurtleMock())]
target_link_libraries(${PROJECT_NAME} [aPackage.name/].static Turtle::Turtle Boost::unit_test_framework)
[/template]

[template private generateTestsCMakeTargetLink(aPackage : EPackage) ? (isGoogleMock())]
target_link_libraries(${PROJECT_NAME} [aPackage.name/].static GTest::GTest GMock::GMock)
[/template]

[template private generateTestsCMakeAddTests(aPackage : EPackage) ? (isTurtleMock())]
include ( BoostTest RESULT_VARIABLE BoosTest_FOUND )
if ( BoosTest_FOUND )
    boost_test_discover_tests( ${PROJECT_NAME} )
endif()
[/template]

[template private generateTestsCMakeAddTests(aPackage : EPackage) ? (isGoogleMock())]
gtest_discover_tests(${PROJECT_NAME} WORKING_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY} )
[/template]

[template public generateTestsCMakeFiles(aPackage : EPackage) { packageName : String = aPackage.name;}]
[file (getOutputDirectory().concat('/CMakeGenerated.txt'), false, 'UTF-8')]
# Generated sources

[let namespaceVar : String = getVarName( aPackage.getTestsNamespaceName() )]
set(GENERATED_HEADER_[namespaceVar/]_FILES
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
    src-gen/[namespaceToFolder(aClass.getQualifiedMockName())/].hpp
[/for] 
)
[/let]

[/file]
[/template]

[template public generateTestsCMakeLists(aPackage : EPackage) { packageName : String = aPackage.name ; testName : String = packageName.concat('.tests'); }]
[file (getOutputDirectory().concat('/CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#                                                                           #
#             CMakeList created by soft.generator.cpp Generator             # 
#                                                                           #
#############################################################################

# C++ project for model [packageName/].ecore, generated by soft.generator.cpp

CMAKE_MINIMUM_REQUIRED(VERSION 3.12)

project([testName/] CXX)

#cmake module path
get_filename_component(CMAKE_PATH "cmake" ABSOLUTE)
list(APPEND CMAKE_MODULE_PATH ${CMAKE_PATH})

if(NOT CMAKE_BUILD_TYPE) 
    set(CMAKE_BUILD_TYPE Debug)
endif()
set(CMAKE_DEBUG_POSTFIX d)

set(CMAKE_CXX_STANDARD 17)

# dependencies
[generateTestsCMakeFindPackages()/]

include( CMakeFiles.txt OPTIONAL)
include( CMakeGenerated.txt OPTIONAL)

# files
set(CMAKE_FILES
    CMakeLists.txt
)
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeFiles.txt")
   list(APPEND CMAKE_FILES "CMakeFiles.txt")
endif()
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/CMakeGenerated.txt")
   list(APPEND CMAKE_FILES "CMakeGenerated.txt")
endif()

# executable
[let namespaces : OrderedSet(String) = getAllNamespaces( aPackage.getTestsNamespaceName())->asOrderedSet()->sortedBy( s|s)]
add_executable(${PROJECT_NAME} ${CMAKE_FILES} 
[for (variable : String | namespaces->getAllVariables())]
                               [variable/]
[/for]
)
target_include_directories(${PROJECT_NAME} PUBLIC src src-gen)
target_compile_options(${PROJECT_NAME} PRIVATE /MP /wd4250 /bigobj)
target_compile_definitions(${PROJECT_NAME} PRIVATE BOOST_BIND_GLOBAL_PLACEHOLDERS)
[generateTestsCMakeTargetLink()/]

[generateSourceGroup(namespaces)/]
[/let]
# copy data into the current binary dir
get_filename_component(DATA_PATH "data" ABSOLUTE)
if(EXISTS "${DATA_PATH}")
    file(COPY "${DATA_PATH}" DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
endif()

# tests
[generateTestsCMakeAddTests()/]

[/file]
[/template]

