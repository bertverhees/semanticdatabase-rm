[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryTests('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::common::generateCommon/]

[template public generateFactoryTests(ePackage : EPackage) { 
	allClasses : OrderedSet(EClass) = ePackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name);
	allDataTypes : Sequence(EDataType) = ePackage.eAllContents(EDataType)->select( serializable )->sortedBy(name);
 } ]
[file (ePackage.getOutputDirectory() + '/' + ePackage.getFactoryTestFileName(ePackage.name), false, 'UTF-8')]
[fileComment()/]

package [ePackage.name/]

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
[if not ePackage.isEcorePackage()]
	"[getImportForPackage('ecore')/]"
[/if]
[if allDataTypes->exists( getType() = '*time.Time')]
	"time"
[/if]
)


func TestFactoryCreateFromEClass(t *testing.T) {
	_ = mock.Anything
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	{
		mockEClass := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEClass{}
		mockEClass.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.Create(mockEClass) })
	}
    [for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
	{
		mockEClass := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEClass{}
		mockEClass.On("GetClassifierID").Return([aClass.getClassifierIDName()/])
		assert.NotNil(t, factory.Create(mockEClass))
	}
    [/for]
}

[for (aClass : EClass | allClasses) ? (aClass.abstract=false)]
func TestFactoryCreate[aClass.name/](t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	assert.NotNil(t, factory.Create[aClass.name/]())
}

[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
func TestFactoryCreate[aClass.name/]From[aReference.name.toUpperFirst()/]Container(t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	mockContainer := [aReference.eType.getTestValue(aClass.ePackage)/]
[if(aReference.eOpposite.upperBound <> 1)]
	mockList := new([if not ePackage.isEcorePackage()]ecore.[/if]MockEList)
	mockList.On("Add",mock.Anything).Return(true).Once()
    mockContainer.On("Get[aReference.eOpposite.name.toUpperFirst()/]").Return(mockList).Once()
[else]
	mockContainer.On("Set[aReference.eOpposite.name.toUpperFirst()/]",mock.Anything).Once()    
[/if]
	o := factory.Create[aClass.name/]FromContainer(mockContainer)
	assert.NotNil(t,o)	
}

[if(aClass.getElementIDAccessorName().size() > 0)]
func TestFactoryCreate[aClass.name/]From[aReference.name.toUpperFirst()/]ContainerAndClassID(t *testing.T) {
		factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	mockContainer := [aReference.eType.getTestValue(aClass.ePackage)/]
[if(aReference.eOpposite.upperBound <> 1)]
	mockList := new([if not ePackage.isEcorePackage()]ecore.[/if]MockEList)
	mockList.On("Add",mock.Anything).Return(true).Once()
    mockContainer.On("Get[aReference.eOpposite.name.toUpperFirst()/]").Return(mockList).Once()
[else]
	mockContainer.On("Set[aReference.eOpposite.name.toUpperFirst()/]",mock.Anything).Once()    
[/if]
	o := factory.Create[aClass.name/]FromContainerAndClassID(mockContainer,0)
	assert.NotNil(t,o)	
}
[/if]
[/for]
[/let]

[/for]

func TestFactoryConvert(t *testing.T) {
	factory := new[ePackage.name.toUpperFirst()/]FactoryImpl()
	{
		mockEDataType := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &[if not ePackage.isEcorePackage()]ecore.[/if]MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, nil) })
		mockEDataType.AssertExpectations(t)
	}
[for (aDataType : EDataType | allDataTypes)]
	[ePackage.generateCreateFrom(aDataType)/]
	[ePackage.generateConvertTo(aDataType)/]
[/for]	
}
[/file]
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType)? (aDataType.oclIsTypeOf(EEnum))]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
[for (lit : EEnumLiteral | aDataType.oclAsType(EEnum).eLiterals->asOrderedSet()->sortedBy(name) )]
	assert.Equal(t, [lit.getConstantsName()/], factory.CreateFromString(mockEDataType, "[lit.getValueName()/]") )	
[/for]
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'string')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"test",factory.CreateFromString(mockEDataType, "test"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'int' or aDataType.getType() = 'int64' or aDataType.getType() = 'int32' or aDataType.getType() = 'int16' or aDataType.getType() = 'int8' )]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,[aDataType.getType()/](3),factory.CreateFromString(mockEDataType, "3"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'float64' or aDataType.getType() = 'float32')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,[aDataType.getType()/](3),factory.CreateFromString(mockEDataType, "3"))
	assert.Equal(t,[aDataType.getType()/](3.2),factory.CreateFromString(mockEDataType, "3.2"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'byte')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"golang\u0000",factory.CreateFromString(mockEDataType, ""))
	assert.Equal(t,byte('a'),factory.CreateFromString(mockEDataType, "a"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = '[]byte')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,['['/][']'/]byte("ab"),factory.CreateFromString(mockEDataType, "ab"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'bool')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,true,factory.CreateFromString(mockEDataType, "true"))
	assert.Equal(t,false,factory.CreateFromString(mockEDataType, "false"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = '*time.Time')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	date := factory.CreateFromString(mockEDataType, "2007-06-02T10:26:13.000Z")
	expected := time.Date(2007, time.June, 2, 10, 26, 13, 0, time.UTC)
	assert.Equal(t, &expected, date)
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateCreateFrom(aPackage : EPackage , aDataType : EDataType)]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType)? (aDataType.oclIsTypeOf(EEnum))]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t, "", factory.ConvertToString(mockEDataType, nil) )
[for (lit : EEnumLiteral | aDataType.oclAsType(EEnum).eLiterals->asOrderedSet()->sortedBy(name) )]
	assert.Equal(t, "[lit.getValueName()/]", factory.ConvertToString(mockEDataType, [lit.getConstantsName()/]) )
[/for]
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'string')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"test",factory.ConvertToString(mockEDataType, "test"))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'bool')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"true",factory.ConvertToString(mockEDataType, true))
	assert.Equal(t,"false",factory.ConvertToString(mockEDataType, false))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'int' or aDataType.getType() = 'int64' or aDataType.getType() = 'int32' or aDataType.getType() = 'int16' or aDataType.getType() = 'int8' )]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"1",factory.ConvertToString(mockEDataType, [aDataType.getType()/](1)))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'float64' or aDataType.getType() = 'float32')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"1.2",factory.ConvertToString(mockEDataType, [aDataType.getType()/](1.2)))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = 'byte')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"a",factory.ConvertToString(mockEDataType, byte('a')))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = '[]byte')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Equal(t,"ab",factory.ConvertToString(mockEDataType, ['['/][']'/]byte("ab")))
	mockEDataType.AssertExpectations(t)
}
[/template]

[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType) ? (aDataType.getType() = '*time.Time')]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	date := time.Date(2020, time.May, 12, 17, 33, 10, 770000000, time.UTC)
	dateStr := factory.ConvertToString(mockEDataType, &date)
	expected := "2020-05-12T17:33:10.77Z"
	assert.Equal(t, expected, dateStr)
	mockEDataType.AssertExpectations(t)
}
[/template]


[template private generateConvertTo(aPackage : EPackage , aDataType : EDataType)]
{
	mockEDataType := &[if not aPackage.isEcorePackage()]ecore.[/if]MockEDataType{}
	mockEDataType.On("GetClassifierID").Return([aDataType.getClassifierIDName()/])
	assert.Panics(t, func() { factory.ConvertToString(mockEDataType, "") })
	mockEDataType.AssertExpectations(t)
}
[/template]
