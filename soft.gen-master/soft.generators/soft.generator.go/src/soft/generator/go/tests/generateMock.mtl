[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateMock('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateElement/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::generateStructuralFeature/]
[import soft::generator::go::lib::generateOperation/]

[query public getMockExtends(aClass : EClass ) : String =
    let extendsClass : EClass = aClass.getClassExtendsClass() in
    if ( extendsClass.oclIsUndefined() ) then
        if ( aClass.name = 'EObject' ) then
            'ecore.MockENotifier'
        else
            'ecore.MockEObjectInternal'
        endif
    else
        extendsClass.getQualifiedMockName()
    endif 
/]

[template public generateMock(aClass : EClass) { 
	aPackage : EPackage = aClass.ePackage;
	mockExtends : String = aClass.getMockExtends();
	features : Collection(EStructuralFeature) = aClass.getImplementedFeatures()->sortedBy( name );
	operations : Collection(EOperation) = aClass.getImplementedOperations()->sortedBy( getOperationName() );
}]
[file (ePackage.getOutputDirectory() + '/' + aClass.getMockFileName(aClass.name), false, 'UTF-8')]
[fileComment()/]

package [aPackage.name/]

[let imports : OrderedSet(String) = Set { if not aPackage.isEcorePackage() and aClass.requiresList() then Set{ aPackage.getImportForPackage('ecore') } else Set{} endif
										, Set { aPackage.getImportForType(mockExtends) }
									    , aClass.getInterfaceExtends()->collect( extend | aPackage.getImportForType( extend ) )->asSet()
                                        , aClass.getReferencedTypes()->collect( cls | aPackage.getImport(cls) )->asSet()
                                        }->flatten()->select( s | s <> '')->asOrderedSet()->sortedBy( s | s) ]
[for ( i : String | imports )]
import "[i/]"
[/for]
[/let]

type [aClass.getMockName()/] struct {
	[getShortQualifiedName( mockExtends ,aPackage.name)/]
}

[features.generateMock(aClass)/]
[operations.generateMock(aClass)/]

[/file]
[/template]


