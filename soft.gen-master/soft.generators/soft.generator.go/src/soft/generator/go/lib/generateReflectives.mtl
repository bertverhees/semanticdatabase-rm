[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateReflectives('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateElement/]
[import soft::generator::common::generateReflectives/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]

[template public generateReflectivesDefinition(aClass : EClass)]
[if not aClass.isReflectiveDelegation()]
[if aClass.hasElementID() or
	aClass.getEGetFeatures()->notEmpty() or
    aClass.getESetFeatures()->notEmpty() or
    aClass.getEUnSetFeatures()->notEmpty() or
    aClass.getEIsSetFeatures()->notEmpty() or
    aClass.getEInvokeOperations()->notEmpty() or
    aClass.getEInverseAddFeatures()->notEmpty() or
    aClass.getEInverseRemoveFeatures()->notEmpty()]
[if aClass.hasElementID()]
[aClass.generateElementIDDefinition()/]

[/if]
[if aClass.getEGetFeatures()->notEmpty()]
[aClass.generateEGetDefinition()/]

[/if]
[if aClass.getESetFeatures()->notEmpty()]
[aClass.generateESetDefinition()/]

[/if]
[if aClass.getEUnSetFeatures()->notEmpty()]
[aClass.generateEUnSetDefinition()/]

[/if]
[if aClass.getEIsSetFeatures()->notEmpty()]
[aClass.generateEIsSetDefinition()/]

[/if]
[if aClass.getEInvokeOperations()->notEmpty()]
[aClass.generateEInvokeDefinition()/]

[/if]
[if aClass.getEInverseAddFeatures()->notEmpty()]
[aClass.generateEInverseAddDefinition()/]

[/if]
[if aClass.getEInverseRemoveFeatures()->notEmpty()]
[aClass.generateEInverseRemoveDefinition()/]
[/if]
[/if]
[/if]
[/template]

[template private generateElementIDDefinition(aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[let mixinClasses : Set(EClass) = aClass.getMixinClasses()]
[if mixinClasses->exists( c : EClass | c.getImplementedFeatures()->notEmpty())] 
[aClass.generateFunctionImplementationReceiver()/] EDerivedFeatureID(eContainer [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID int) int {
	eClass , _ := eContainer.([if not aPackage.isEcorePackage()]ecore.[/if]EClass)
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == GetPackage().Get[aMixinClass.getElementAccessorName()/]()) {
        switch featureID {
[for (aFeature : EStructuralFeature | aMixinClass.getImplementedFeatures() )]
            case [aMixinClass.getQualifiedIDName(aFeature)/] : return [aClass.getQualifiedIDName(aFeature)/]
[/for]
            default: return -1
        }
    }
[/for]  
    return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EDerivedFeatureID(eContainer, featureID)
}
[/if]

[if mixinClasses->exists( c : EClass | c.getImplementedOperations()->notEmpty())]
[aClass.generateFunctionImplementationReceiver()/] EDerivedOperationID(eContainer [if not aPackage.isEcorePackage()]ecore.[/if]EObject, operationID int) int {
	eClass , _ := eContainer.([if not aPackage.isEcorePackage()]ecore.[/if]EClass)
[for (aMixinClass : EClass | mixinClasses)]
    if (eClass == GetPackage().Get[aMixinClass.getElementAccessorName()/]()) {
        switch operationID {
[for (aOperation : EOperation | aMixinClass.getImplementedOperations() )]
            case [aMixinClass.getQualifiedIDName(aOperation)/] : return [aClass.getQualifiedIDName(aOperation)/]
[/for]
            default: return -1
        }
    }
[/for]  
    return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EDerivedOperationID(eContainer, operationID)
}
[/if]
[/let]
[/let]
[/template]

[template private generateEGetDefinition(aClass : EClass)]
[aClass.generateFunctionImplementationReceiver()/] EGetFromID(featureID int, resolve bool) interface{} {
    switch featureID {
    [for (anStructFeature : EStructuralFeature | aClass.getEGetFeatures()->asOrderedSet()->sortedBy(name))]
    case [aClass.getQualifiedIDName(anStructFeature)/]:
	[if anStructFeature.isProxy()]
		[if anStructFeature.isListType()]
		list := [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getGetterName()/]();
		if !resolve {
			if objects , _ := list.([if not aClass.ePackage.isEcorePackage()]ecore.[/if]EObjectList); objects != nil {
				return objects.GetUnResolvedList()
			}
		}
		return list
		[else]
		if resolve {
			return [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getGetterName()/]()
		}
		return  [aClass.getReceiverName()/].basic[anStructFeature.getGetterName().toUpperFirst()/]()
		[/if]		
	[else] 
        return [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getGetterName()/]()
	[/if]
    [/for]
    default:
        return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EGetFromID(featureID, resolve)
    }
}
[/template]


[template private generateEIsSetDefinition(aClass : EClass)]
[aClass.generateFunctionImplementationReceiver()/] EIsSetFromID(featureID int) bool {
    switch featureID {
[for (anStructFeature : EStructuralFeature | aClass.getEIsSetFeatures()->sortedBy(name))]
    case [aClass.getQualifiedIDName(anStructFeature)/]:
        return [anStructFeature.generateComparison(aClass)/]
[/for]
    default:
        return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EIsSetFromID(featureID)
    }
}
[/template]

[template private generateESetDefinition(aClass : EClass)]
[aClass.generateFunctionImplementationReceiver()/] ESetFromID(featureID int, newValue interface{}) {
    switch featureID {
[for (anStructFeature : EStructuralFeature | aClass.getESetFeatures()->sortedBy(name))]
    case [aClass.getQualifiedIDName(anStructFeature)/]:
	[if anStructFeature.isMapType()]
		m := [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getGetterName()/]()
		m.Clear()
		m.AddAll(newValue.([if not aClass.ePackage.isEcorePackage()]ecore.[/if]EList))
    [elseif anStructFeature.isListType()]
		list := [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getGetterName()/]()
        list.Clear()
        list.AddAll(newValue.([anStructFeature.generateType()/]))
    [else]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[anStructFeature.getSetterName()/](newValue[if anStructFeature.eType.getType() <> 'interface{}'].([anStructFeature.generateType()/])[/if])
    [/if]    
[/for]
    default:
        [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].ESetFromID(featureID, newValue)
    }
}
[/template]

[template private generateEUnSetDefinition(aClass : EClass)]
[aClass.generateFunctionImplementationReceiver()/] EUnsetFromID(featureID int) {
    switch featureID {
[for (aStructFeature : EStructuralFeature | aClass.getEUnSetFeatures()->sortedBy(name))]
    case [aClass.getQualifiedIDName(aStructFeature)/]:
    [if aStructFeature.isListType() and not aStructFeature.isUnSettable()]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[aStructFeature.getGetterName()/]().Clear()
    [elseif aStructFeature.isUnSet() ]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[aStructFeature.getUnSetterName()/]()
    [elseif aStructFeature.oclIsKindOf(EReference)]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[aStructFeature.getSetterName()/](nil)
    [else]
		[let aAttribute : EAttribute = aStructFeature.oclAsType(EAttribute)]
		[let defaultValue : String = aAttribute.getDefaultValue(aClass.ePackage)]
		[if defaultValue <> '']
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[aStructFeature.getSetterName()/]([defaultValue/])
        [else]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[aStructFeature.getSetterName()/]([aAttribute.eType.getType()/]{})
        [/if]
        [/let]
        [/let]
    [/if]
[/for]
    default:
        [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EUnsetFromID(featureID)
    }
}
[/template]

[template private generateEInvokeDefinition(aClass : EClass)]
[let aPackage : EPackage = aClass.ePackage]
[aClass.generateFunctionImplementationReceiver()/] EInvokeFromID(operationID int, arguments [if not aPackage.isEcorePackage()]ecore.[/if]EList) interface{} {
    switch operationID {
    [for ( eOperation : EOperation | aClass.getEInvokeOperations()->sortedBy( getOperationName() ) )]
    case [aClass.getQualifiedIDName(eOperation)/]:
        [if eOperation.isVoid() ]
        [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[eOperation.generateOperationInvoke()/]
        return nil
        [else]
        return [aClass.getReceiverName()/].as[aClass.getInterfaceName()/]().[eOperation.generateOperationInvoke()/] 
        [/if]
    [/for]
    default:
        return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EInvokeFromID(operationID,arguments)
    }
}
[/let]
[/template]

[template private generateOperationInvoke(eOperation : EOperation )]
[eOperation.getOperationName()/]([for (eParameter : EParameter | eOperation.eParameters) separator (',')][let needCast : Boolean = not(not eParameter.oclIsUndefined() and eParameter.upperBound = 1 and not eParameter.eGenericType.oclIsUndefined() and eParameter.eGenericType.eClassifier.isAny())]arguments.Get([i-1/])[if needCast].([eParameter.generateEffectiveType()/])[/if][/let][/for])
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, aClass : EClass) ? (oclIsKindOf(EAttribute) and not eType.isAny()) post (trim())]
[let aAttribute : EAttribute = anStructFeature.oclAsType(EAttribute)]
[if isListType()]
    [if isField()]
        [aClass.getReceiverName()/].[aAttribute.getVariableName()/] != nil && [aClass.getReceiverName()/].[aAttribute.getVariableName()/].Size() != 0
    [else]
        [aClass.getReceiverName()/].[aAttribute.getGetterName()/]().Size() != 0
    [/if]
[else]
    [let accessor : String = if isField() then aAttribute.getVariableName() else 'as'+ aClass.getInterfaceName()+ '().' + aAttribute.getGetterName()+'()' endif]
    [if eType.oclIsKindOf(EEnum)]
        [aClass.getReceiverName()/].[accessor/] != [aAttribute.getDefaultValue(aClass)/]
    [elseif eType.oclIsKindOf(EDataType)]
		[let comparisonFunction : String = eType.oclAsType(EDataType).getComparisonFunction()]
		[if comparisonFunction <> '']
		[if comparisonFunction.at(1) = '!']
		![aClass.getReceiverName()/].[accessor/].[comparisonFunction.substring(2)/]()
		[else]
		[aClass.getReceiverName()/].[accessor/].[comparisonFunction/]()
		[/if]		
		[else]
        [aClass.getReceiverName()/].[accessor/] != [aAttribute.getDefaultValue(aClass)/]
        [/if]
        [/let]
	[else]
		[aClass.getReceiverName()/].[accessor/] != [aAttribute.getDefaultValue(aClass)/]
    [/if]
    [/let]
[/if]
[/let]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, aClass : EClass) ? (oclIsKindOf(EReference) and not eType.isAny()) post (trim())]
[if isListType()]
    [if isField()]
        [aClass.getReceiverName()/].[anStructFeature.getVariableName()/] != nil && [aClass.getReceiverName()/].[anStructFeature.getVariableName()/].Size() != 0
    [else]
        [aClass.getReceiverName()/].[anStructFeature.getGetterName()/]().Size() != 0
    [/if]
[elseif anStructFeature.oclAsType(EReference).isBackReference() ]
    [if anStructFeature.eType.name <> 'EBoolean']
    [aClass.getReceiverName()/].[anStructFeature.getGetterName()/]() != nil
    [else]
    [aClass.getReceiverName()/].[anStructFeature.getGetterName()/]()
    [/if]
[else]
    [let accessor : String = if isField() then anStructFeature.getVariableName() else anStructFeature.getGetterName()+'()' endif]
        [aClass.getReceiverName()/].[accessor/] != [anStructFeature.eType.getDefaultValue(aClass)/]
    [/let]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature, aClass : EClass) ? (eType.isAny()) post (trim())]
[aClass.getReceiverName()/].[anStructFeature.getGetterName()/]() != [anStructFeature.eType.getDefaultValue(aClass)/]
[/template]

[template public generateEInverseAddDefinition(aClass : EClass) ]
[let aPackage : EPackage = aClass.ePackage]
[aClass.generateFunctionImplementationReceiver()/] EBasicInverseAdd(otherEnd [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID int, notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain)  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
    switch featureID {
[for ( aFeature : EStructuralFeature | aClass.getEInverseAddFeatures()->sortedBy(name) )]
    case [aClass.getQualifiedIDName(aFeature)/]:
	[if aFeature.isMapType()]
		return notifications
    [elseif aFeature.isListType()]
        list := [aClass.getReceiverName()/].[aFeature.getGetterName()/]().([if not aPackage.isEcorePackage()]ecore.[/if]ENotifyingList)
        return list.AddWithNotification(otherEnd, notifications)
    [elseif aFeature.isContainer()]
        msgs := notifications
        if [aClass.getReceiverName()/].EInternalContainer() != nil {
            msgs = [aClass.getReceiverName()/].EBasicRemoveFromContainer(msgs)
        }
        [if aFeature.isBasicSet()]
        return [aClass.getReceiverName()/].basic[aFeature.getSetterName().toUpperFirst()/](otherEnd.([aFeature.generateType()/]), msgs)
        [else]
        return [aClass.getReceiverName()/].EBasicSetContainer(otherEnd, [aClass.getQualifiedIDName(aFeature)/], msgs)
        [/if]
    [else]
        msgs := notifications
		[if aFeature.isVolatile()]
		[aFeature.name/] := [aClass.getReceiverName()/].[if aFeature.isProxy()]basic[aFeature.getGetterName().toUpperFirst()/][else][aFeature.getGetterName()/][/if]()
		[else]
		[aFeature.name/] := [aClass.getReceiverName()/].[aFeature.name/]
		[/if]
        if [aFeature.name/] != nil {
            [if aFeature.isContains()]
            msgs = [aFeature.name/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove([aClass.getReceiverName()/].AsEObject(), [if not aPackage.isEcorePackage()]ecore.[/if]EOPPOSITE_FEATURE_BASE - [aClass.getQualifiedIDName(aFeature)/], msgs)
            [else]
                [let reverseFeature : EStructuralFeature = aFeature.oclAsType(EReference).eOpposite]
            msgs = [aFeature.name/].([if not aPackage.isEcorePackage()]ecore.[/if]EObjectInternal).EInverseRemove([aClass.getReceiverName()/].AsEObject(), [reverseFeature.eContainingClass.getQualifiedIDName(reverseFeature)/], msgs)
                [/let]
            [/if]
        }
        return [aClass.getReceiverName()/].basic[aFeature.getSetterName().toUpperFirst()/](otherEnd.([aFeature.generateType()/]) ,msgs)
    [/if]
[/for]
    default:
        return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EBasicInverseAdd(otherEnd, featureID, notifications)
    }
}
[/let]
[/template]

[template public generateEInverseRemoveDefinition(aClass : EClass) ? (aClass.getEInverseRemoveFeatures()->notEmpty()) ]
[let aPackage : EPackage = aClass.ePackage]
[aClass.generateFunctionImplementationReceiver()/] EBasicInverseRemove(otherEnd  [if not aPackage.isEcorePackage()]ecore.[/if]EObject, featureID int, notifications [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain)  [if not aPackage.isEcorePackage()]ecore.[/if]ENotificationChain {
    switch featureID {
[for ( aFeature : EStructuralFeature | aClass.getEInverseRemoveFeatures()->sortedBy(name) )]
    case [aClass.getQualifiedIDName(aFeature)/]:
	[if aFeature.isMapType()]
		return notifications
    [elseif aFeature.isListType()]
        list := [aClass.getReceiverName()/].[aFeature.getGetterName()/]().([if not aPackage.isEcorePackage()]ecore.[/if]ENotifyingList)
        return list.RemoveWithNotification(otherEnd, notifications)
    [elseif aFeature.isContainer() and not aFeature.isBasicSet()]
        return [aClass.getReceiverName()/].EBasicSetContainer(nil, [aClass.getQualifiedIDName(aFeature)/], notifications)
    [elseif aFeature.isUnSet()]
        return [aClass.getReceiverName()/].basic[aFeature.getUnSetterName().toUpperFirst()/](notifications)
    [else]
        return [aClass.getReceiverName()/].basic[aFeature.getSetterName().toUpperFirst()/](nil, notifications)
    [/if]
[/for]
    default:
        return [aClass.getReceiverName()/].[getUnQualifiedName(aClass.getClassExtends())/].EBasicInverseRemove(otherEnd, featureID, notifications)
    }
}
[/let]
[/template]
