[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateFactoryImplementation('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]
[import soft::generator::go::generateCommon/]
[import soft::generator::go::generateType/]
[import soft::generator::go::lib::generateCommon/]
[import soft::generator::go::lib::factory::generateCommon/]

[template public generateFactoryImplementation(anEPackage : EPackage) { 
	className : String = anEPackage.getFactoryImplementationName(); 
	dataTypes : Sequence(EDataType) = anEPackage.eAllContents(EDataType)->select( serializable )->sortedBy(name)
}]
[file (anEPackage.getOutputDirectory() + '/' + anEPackage.getImplementationFileName(anEPackage.getFactoryName() ), false, 'UTF-8')]
[fileComment()/]

package [anEPackage.name/]

import "strconv"
[if not anEPackage.isEcorePackage()]
import "[getImportForPackage('ecore')/]"
[/if]
[if dataTypes->exists( getType() = '*time.Time')]
import "time"
[/if]

type [anEPackage.getFactoryInternalName()/] interface {
[for (aDataType : EDataType | dataTypes)]
    create[aDataType.name/]FromString(eDataType [if not anEPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{}
[/for]
[for (aDataType : EDataType | dataTypes)]
    convert[aDataType.name/]ToString(eDataType [if not anEPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue interface{}) string
[/for]
}

type [className/] struct {
    [if not anEPackage.isEcorePackage()]ecore.[/if]EFactoryExt
}

func new[className.toUpperFirst()/]() *[className/] {
    factory := new([className/])
    factory.SetInterfaces(factory)
	factory.Initialize()
    return factory 
}

[anEPackage.generateFactoryImplementationMember()/] Create(eClass [if not anEPackage.isEcorePackage()]ecore.[/if]EClass) [if not anEPackage.isEcorePackage()]ecore.[/if]EObject {
	classID := eClass.GetClassifierID()
	switch classID {
    [for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
    case [aClass.getClassifierIDName()/]:
        return [anEPackage.getFactoryReceiverName()/].Create[aClass.name/]()
    [/for]
    default:
        panic("Create: " + strconv.Itoa( classID ) + " not found")
	}
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
[anEPackage.generateFactoryImplementationMember()/] Create[aClass.name/]() [aClass.getInterfaceName()/] {
	return [if aClass.hasExtension()][aClass.getConstructorExtensionName()/][else][aClass.getConstructorName()/][/if]()
}
[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
[anEPackage.generateFactoryImplementationMember()/] Create[aClass.name/]FromContainer(eContainer [aReference.eGenericType.eClassifier.name/]) [aClass.getInterfaceName()/] {
    [generateCreateFunctionContent(aClass, aReference, false)/]
}
[if(aClass.getElementIDAccessorName().size() > 0)]
[anEPackage.generateFactoryImplementationMember()/] Create[aClass.name/]FromContainerAndClassID(eContainer [aReference.eGenericType.eClassifier.name/], classID int) [aClass.getInterfaceName()/] {
    [generateCreateFunctionContent(aClass, aReference, true)/]
}
[/if]
[/for]
[/let]
[/for]
[anEPackage.generateFactoryImplementationMember()/] CreateFromString(eDataType [if not anEPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
	classID  := eDataType.GetClassifierID()
[if dataTypes->notEmpty()]
    internal := [anEPackage.getFactoryReceiverName()/].GetInterfaces().([anEPackage.getFactoryInternalName()/])
[/if] 
	switch classID {
    [for (aDataType : EDataType | dataTypes)]
    case [aDataType.getClassifierIDName()/]:
        return internal.create[aDataType.name/]FromString(eDataType, literalValue)
    [/for]
    default:
        panic("The datatype '" + eDataType.GetName() + "' is not a valid classifier")
	}
}

[anEPackage.generateFactoryImplementationMember()/] ConvertToString(eDataType [if not anEPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
    classID := eDataType.GetClassifierID()
[if dataTypes->notEmpty()]
    internal := [anEPackage.getFactoryReceiverName()/].GetInterfaces().([anEPackage.getFactoryInternalName()/])
[/if]
    switch classID {
[for (aDataType : EDataType | dataTypes)]
    case [aDataType.getClassifierIDName()/]:
        return internal.convert[aDataType.name/]ToString(eDataType, instanceValue)
[/for]
    default:
        panic("The datatype '" + eDataType.GetName() + "' is not a valid classifier")
    }
}
[for (aDataType : EDataType | dataTypes)]
[anEPackage.generateCreateFromString(aDataType)/]
[anEPackage.generateConvertToString(aDataType)/]
[/for]
[/file]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let enumTypeName : String = aDataType.name ]
[let varName : String = enumTypeName.toLowerFirst() ]
[aPackage.generateFactoryImplementationMember()/] create[enumTypeName/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
    var [varName/] [aDataType.name/] 
	[varName/].FromString(literalValue)
	return [varName/]
}
[/let]
[/let]
[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'string')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   return literalValue
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'bool')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.ParseBool(literalValue)
	return value
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.Atoi(literalValue)
   return value
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int64')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.ParseInt(literalValue, 10, 64)
   return value
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int32')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.ParseInt(literalValue, 10, 32)
   return int32(value)
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int16')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.ParseInt(literalValue, 10, 16)
   return int16(value)
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int8')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   value, _ := strconv.ParseInt(literalValue, 10, 8)
   return int8(value)
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'byte')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   	if len(literalValue) == 0 {
		return "golang\u0000"
   	} else {
	  	return ['['/][']'/]byte(literalValue)['['/]0[']'/]
	}
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = '[]byte')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   	return ['['/][']'/]byte(literalValue)
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'float64')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   	value, _ := strconv.ParseFloat(literalValue, 64)
	return value
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'float32')]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   	value, _ := strconv.ParseFloat(literalValue, 32)
	return float32(value)
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = '*time.Time')]
const (
	dateFormat string = "2006-01-02T15:04:05.999Z"
)

[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   	t, _ := time.Parse(dateFormat, literalValue)
	return &t
}

[/template]

[template private generateCreateFromString( aPackage : EPackage , aDataType : EDataType )]
[aPackage.generateFactoryImplementationMember()/] create[aDataType.name/]FromString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, literalValue string) interface{} {
   panic("NotImplementedException")
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.oclIsTypeOf(EEnum))]
[let enumTypeName : String = aDataType.name ]
[let varName : String = enumTypeName.toLowerFirst() ]
[aPackage.generateFactoryImplementationMember()/] convert[enumTypeName/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string { 
	[varName/], ok:= instanceValue.([enumTypeName/])
	if !ok {
		return ""
	}
	return [varName/].ToString()	
}
[/let]
[/let]
[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'string')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v , _ := instanceValue.(string) 
	return v
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'bool')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(bool)
	return strconv.FormatBool(v)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(int)
	return strconv.Itoa(v)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int64')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(int64)
	return strconv.FormatInt(v, 10)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int32')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(int32)
	return strconv.FormatInt(int64(v), 10)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int16')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(int16)
	return strconv.FormatInt(int64(v), 10)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'int8')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(int8)
	return strconv.FormatInt(int64(v), 10)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'byte')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	b := instanceValue.(byte)
	return string(['['/][']'/]byte{b})
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = '[]byte')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	b := instanceValue.(['['/][']'/]byte)
	return string(b)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'float64')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(float64)
	return strconv.FormatFloat(v, 'f', -1, 64)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = 'float32')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string {
   	v, _ := instanceValue.(float32)
	return strconv.FormatFloat(float64(v), 'f', -1, 32)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType ) ? (aDataType.getType() = '*time.Time')]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string { 
	t , _ := instanceValue.(*time.Time)
	return t.Format(dateFormat)
}

[/template]

[template private generateConvertToString( aPackage : EPackage , aDataType : EDataType )]
[aPackage.generateFactoryImplementationMember()/] convert[aDataType.name/]ToString(eDataType [if not aPackage.isEcorePackage()]ecore.[/if]EDataType, instanceValue interface{}) string { 
	panic("NotImplementedException")
}

[/template]

[template public generateCreateFunctionContent(aClass : EClass, aReference : EReference, addID : Boolean)]
element := [if aClass.hasExtension()][aClass.getConstructorExtensionName()/][else][aClass.getConstructorName()/][/if]()
[if(addID)]
element.Set[aClass.getElementIDAccessorName()/]ID(classID)
[/if]
[if(not aReference.eOpposite.name.oclIsUndefined())]
if eContainer != nil {
[if(aReference.eOpposite.upperBound <> 1)]
    eContainer.Get[aReference.eOpposite.name.toUpperFirst()/]().Add(element)
[else]
    eContainer.Set[aReference.eOpposite.name.toUpperFirst()/](element)
[/if]
}
[/if]
return element
[/template]
