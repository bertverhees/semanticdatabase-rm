[**
 * This file is part of soft.generator.go, a project for go code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateType('http://www.eclipse.org/emf/2002/Ecore')/]

[import soft::generator::common::generateCommon/]
[import soft::generator::common::generateUtils/]
[import soft::generator::go::generateCommon/]

[query public isBackReference(aStructuralFeature:EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).isBackReference()/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey('aggregation')) then aReference.valueKey('aggregation')='shared' else false endif/]

[template public generateEffectiveType(aElement : ETypedElement) post(trim())]
[let aPackage : EPackage = aElement.getEPackage()]
[if (aElement.isMapType())]
[getShortQualifiedName('ecore.EMap', aPackage.name )/]
[elseif (aElement.isListType())]
[getShortQualifiedName('ecore.EList', aPackage.name )/]
[else]
[aElement.eGenericType.generateType(aPackage)/]
[/if]
[/let]
[/template]

[template public generateType(aElement : ETypedElement) post (trim())]
[if aElement.oclIsUndefined() or aElement.eGenericType.oclIsUndefined()]
[else]
    [let aPackage : EPackage = aElement.getEPackage()]
	[if (aElement.isMapType())]
		[getShortQualifiedName('ecore.EMap', aPackage.name )/]
    [elseif aElement.isListType()]
        [getShortQualifiedName('ecore.EList', aPackage.name )/]
    [else]
        [aElement.eGenericType.generateType(aPackage)/]
    [/if]
    [/let]
[/if]
[/template]

[template public generateType(anEDataType : EGenericType, aPackage : EPackage ) post (trim())]
[if (anEDataType.oclIsUndefined() or anEDataType.eClassifier.oclIsUndefined())]
[else]
[getShortQualifiedName(anEDataType.eClassifier.getType(), aPackage.name )/]
[/if]
[/template]

[template public generateParameterList(aOperation:EOperation, names : Boolean ) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][if names][sParameter.name/] [/if][sParameter.generateType()/][/for]
[/template]

[template public generateParameterCall(aOperation:EOperation) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters) separator (', ')][sParameter.name/][/for]
[/template]



[comment {ecore types..., go type, default value, test value, comparison operator}/]
[query private getAllDataTypes(o : OclAny) : Sequence( Sequence( String ) ) = 
    Sequence {
        Sequence{ 'java.lang.Boolean', 'boolean', 'bool', 'false' , 'true', ''},
        Sequence{ 'java.lang.Integer', 'int' , '0', '45' , ''},
		Sequence{ 'java.lang.Byte','java.lang.Character', 'char', 'byte' ,'\'\'', '\'a\'', ''},
		Sequence{ 'byte[]','[]byte' , 'nil', 'nil' , ''},
		Sequence{ 'java.util.Date', '*time.Time', 'nil', 'func() *time.Time { t := time.Now(); return &t }()' , ''},
		Sequence{ 'java.lang.Double', 'java.math.BigDecimal', 'double', 'float64' , '0.0' , '3.5' , ''},
		Sequence{ 'java.lang.Float' , 'float' , 'float32' , '0.0', '1.2', ''},
		Sequence{ 'java.lang.Class' , 'reflect.Type', 'nil', 'reflect.TypeOf("")', ''},
		Sequence{ 'java.lang.Object', 'interface{}', 'nil', 'nil', ''},
		Sequence{ 'java.lang.Long' , 'java.math.BigInteger', 'long' , 'int64' , '0', '45' , ''},
        Sequence{ 'java.util.Map' , 'ecore.EMap', 'nil', 'nil' , ''},
        Sequence{ 'java.util.Map$Entry' , 'ecore.EMapEntry', 'nil' , 'nil', ''},
		Sequence{ 'java.lang.Short' , 'short' , 'int16' , '0', '2' , ''},
        Sequence{ 'java.lang.String' , 'string', '""' , '"Test String"', ''},
		

		Sequence{ 'org.eclipse.emf.common.util.DiagnosticChain', 'ecore.EDiagnosticChain', 'nil', 'nil', '' },
		Sequence{ 'org.eclipse.emf.common.util.EList', 'ecore.EList', 'nil', 'ecore.NewEmptyBasicEList()', '' },
		Sequence{ 'org.eclipse.emf.common.util.Enumerator', 'interface{}', 'nil', 'nil', ''},		        
		Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap', 'interface{}', 'nil', 'nil', ''},
        Sequence{ 'org.eclipse.emf.ecore.util.FeatureMap$Entry', 'interface{}', 'nil', 'nil', ''},
        Sequence{ 'org.eclipse.emf.ecore.resource.Resource', 'ecore.EResource', 'nil' , 'nil', '' },
        Sequence{ 'org.eclipse.emf.ecore.resource.ResourceSet', 'ecore.EResourceSet', 'nil' , 'nil', '' },
		Sequence{ 'org.eclipse.emf.common.util.TreeIterator', 'ecore.EIterator', 'nil' , 'nil', '' }
    }
/]


[query public getInstanceTypeName( aClassifier : EClassifier ) : String =
	let instanceTypeName : String = 
	if hasKey(aClassifier, 'instanceTypeName') then
		aClassifier.valueKey('instanceTypeName')
	else if not aClassifier.instanceTypeName.oclIsUndefined() then
		aClassifier.instanceTypeName
	else if aClassifier.oclIsKindOf(EClass) then
		aClassifier.oclAsType(EClass).getQualifiedInterfaceName()
	else
		''
	endif endif endif in
	let goTypeName : String = getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = instanceTypeName) then
            s->at( s->size() - 3 )
        else
            res
        endif
    else 
        res 
    endif
	) in
	if goTypeName = '' then
		instanceTypeName
	else
		goTypeName
	endif
/] 

[query public getTestValue(aClassifier : EClassifier,aPackage : EPackage) : String =
	if aClassifier.oclIsUndefined() then 'nil'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getTestValue(aPackage)
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getTestValue(aPackage)
    else if aClassifier.oclIsKindOf( EDataType ) then 
		let t : String = aClassifier.getType() in
		let v : String = aClassifier.oclAsType(EDataType).getTestValue(aPackage) in
		let isPtr : Boolean = t.size() > 0 and t.first(1) = '*' in
		(if isPtr then '(' else '' endif) + getShortQualifiedName(aClassifier.getType(),aPackage.name) + (if isPtr then ')' else '' endif) + '(' + getShortQualifiedName(v,aPackage.name) + ')'
    else '' endif endif endif endif	
/]

[query private getTestValue( aClass : EClass ,aPackage : EPackage ) : String = 
	let qualifiedMockName : String = if aClass.name='EObject' then 'ecore.MockEObjectInternal' else aClass.getQualifiedMockName() endif in 
	'new(' + getShortQualifiedName( qualifiedMockName , aPackage.name ) +')'
/]

[query private getTestValue( aEnum : EEnum ,aPackage : EPackage ) : String =
	if aEnum.eLiterals->size() >= 1 then
		let constant : String = aEnum.eLiterals->at(if aEnum.eLiterals->size() > 1 then 2 else 1 endif).getConstantsName() in
		getShortQualifiedName(aEnum.ePackage.name + '.' + constant, aPackage.name)  
	else 0 endif/]

[query private getTestValue( aDataType : EDataType ,aPackage : EPackage) : String = 
	if hasKey(aDataType, 'testValue') then
		aDataType.valueKey('testValue')
	else
		let typeName : String = aDataType.getInstanceTypeName() in
	    getAllDataTypes()->iterate( s ; res : String = '' |
	    if res = '' then
	        if s->exists(n : String | n = typeName) then
				getShortQualifiedName(s->at( s->size() - 1 ) , aPackage.name)
	        else
				res
	        endif
	    else 
	        res 
	    endif
	 	) 
	endif
/]

[query public getType( aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 'interface{}'
    else if aClassifier.oclIsKindOf( EClass ) then aClassifier.oclAsType(EClass).getType()
    else if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getType()
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getType()
    else '' endif endif endif endif
/]
[query private getType( aClass : EClass ) : String = aClass.getQualifiedInterfaceName()/]
[query private getType( aEnum : EEnum ) : String = aEnum.ePackage.name + '.' + aEnum.name/]
[query private getType( aDataType : EDataType ) : String = aDataType.getInstanceTypeName()/]

[query public getDefaultValue(anEAttribute : EAttribute, aContext : EClass) : String = anEAttribute.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(anEAttribute : EAttribute, aContext : EPackage) : String = 
	if anEAttribute.many then '' 
	else if (defaultValueLiteral->notEmpty()) then eType.getDefaultValueFromLiteral(aContext,defaultValueLiteral) else eType.getDefaultValue(aContext) 
	endif endif
/]


[query private getDefaultValueFromLiteral(aClassifier : EClassifier, aContext : EPackage, literal : String ) : String =
	 if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValueFromLiteral(aContext,literal)
	 else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValueFromLiteral(aContext,literal)
	 else literal endif endif
/]

[query private getDefaultValueFromLiteral(aEnum : EEnum, aContext : EPackage, literal : String ) : String =
	let eLiterals : OrderedSet(EEnumLiteral) = aEnum.eLiterals->select( el : EEnumLiteral | el.name = literal ) in
	if eLiterals->isEmpty() then
		literal 
	else
		getShortQualifiedName(aEnum.ePackage.name + '.' + eLiterals->first().getConstantsName(), aContext.name)		
	endif
/]

[query private getDefaultValueFromLiteral(aDataType : EDataType, aContext : EPackage, literal : String ) : String = 
	literal
/]

[query public getDefaultValue(aClassifier : EClassifier, aContext : EClass) : String = aClassifier.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aClassifier : EClassifier, aContext : EPackage) : String =
    if aClassifier.oclIsKindOf( EEnum ) then aClassifier.oclAsType(EEnum).getDefaultValue(aContext)
    else if aClassifier.oclIsKindOf( EDataType ) then aClassifier.oclAsType(EDataType).getDefaultValue(aContext)
    else 'nil' endif endif
/]

[query public getDefaultValue(aEnum : EEnum, aContext : EClass) : String = aEnum.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aEnum : EEnum, aContext : EPackage) : String = if aEnum.eLiterals->notEmpty() then getShortQualifiedName(aEnum.ePackage.name + '.' + aEnum.eLiterals->at(1).getConstantsName(), aContext.name) else 0 endif/]

[query public getDefaultValue(aDataType : EDataType, aContext : EClass) : String = aDataType.getDefaultValue(aContext.ePackage)/]

[query public getDefaultValue(aDataType : EDataType, aContext : EPackage) : String =
	if hasKey(aDataType, 'defaultValue') then
		aDataType.valueKey('defaultValue')
	else if aDataType.name <> 'EChar' and not aDataType.defaultValue.oclIsUndefined() then
		aDataType.defaultValue.toString()
	else
		let typeName : String = aDataType.getInstanceTypeName() in
	    getAllDataTypes()->iterate( s ; res : String = '' |
	    if res = '' then
	        if s->exists(n : String | n = typeName) then
	            getShortQualifiedName(s->at( s->size() - 2 ) , aContext.name)
	        else
	            res
	        endif
	    else 
	        res 
	    endif	
 		) 
	endif endif
/]

[query public getDefaultValueWithType(aFeature : EStructuralFeature, aContext : EClass ) : String = aFeature.getDefaultValueWithType(aContext.ePackage)/]

[query public getDefaultValueWithType(aFeature : EStructuralFeature, aContext : EPackage ) : String =
	if aFeature.oclIsKindOf(EAttribute) then
		let defaultValue : String = aFeature.oclAsType(EAttribute).getDefaultValue(aContext) in
		if defaultValue = '' then ''
		else if defaultValue = 'nil' then 'nil'
		else
			let t : String = aFeature.eType.getType() in
			let isPtr : Boolean = t.size() > 0 and t.first(1) = '*' in
			(if isPtr then '(' else '' endif) + getShortQualifiedName(aFeature.eType.getType(),aContext.name) +(if isPtr then ')' else '' endif) + '(' + defaultValue + ')'
		endif endif
	else
		'nil'
	endif
/]

[query public getComparisonFunction( aDataType : EDataType) : String =
	let typeName : String = aDataType.getInstanceTypeName() in 
	getAllDataTypes()->iterate( s ; res : String = '' |
    if res = '' then
        if s->exists(n : String | n = typeName) then
            s->at( s->size() )
        else
            res
        endif
    else 
        res 
    endif
	)
/] 

[query public getAllImports(aPackage : EPackage) : OclAny =
	let namespacesToPackages : OclAny = 
    if aPackage.hasKey('imports') then
		let annotations : Sequence(String) = aPackage.valueKey('imports').tokenize(' \r\n') in
        annotations->iterate( annotation : String ; res : OclAny = mapNew('getNamespaceToPackages_' + aPackage.name) | (
        	let index : Integer = annotation.index('=') in 
            if index = -1 then
				let namespaceIndex : Integer = annotation.lastIndexOf('/') in
				if namespaceIndex = -1 then
					res
				else
					res.mapPut(annotation.substring(namespaceIndex+1),annotation)
				endif
            else
                res.mapPut(annotation.substring(1,index-1),annotation.substring(index+1)) 
            endif
		))
    else
        mapNew('getNamespaceToPackages_' + aPackage.name)
    endif in
    namespacesToPackages.mapPut('ecore','github.com/masagroup/soft.go/ecore')
/]



[query public getImportForPackage(aPackage : EPackage, aPackageName : String ) : String =
	aPackage.getAllImports().mapGetOrDefault(aPackageName, '')
/]


[query public getImportForType( aPackage : EPackage , qualifiedName : String ) : String =
    let q : String = getQualification( qualifiedName ) in
    if q = '' then 
        ''
    else 
        if aPackage.name = q then 
            ''
        else
            let import : String = aPackage.getImportForPackage( q ) in
            if import = '' then
                q
            else
                import
            endif
        endif 
    endif
    
/]

[query public getImport( aPackage : EPackage , aClassifier : EClassifier ) : String = 
    if aClassifier.oclIsUndefined() then 
        ''
    else
		let type : String = aClassifier.getType() in
		if type.size() > 0 and type.first(1) = '*' then
        	aPackage.getImportForType(type.substring(2))
		else
			aPackage.getImportForType(type)
		endif
    endif
/]
