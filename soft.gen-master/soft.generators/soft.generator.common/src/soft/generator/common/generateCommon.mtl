[**
 * This file is part of soft.generators, a project for code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateCommon('http://www.eclipse.org/emf/2002/Ecore')]

[query public getNSURI(o : OclAny) : String = getProperty('nsURI') /]

[query public getFileNotes(o : OclAny) : String = getProperty('fileNotes') /]

[query public hasKey(aModelElement : EModelElement, aKey:String) : Boolean = 
	if aModelElement.hasGenAnnotation() then 
		aModelElement.getGenAnnotation().details->select(key = aKey)->notEmpty() 
	else 
		false 
	endif 
/]
[query public valueKey(aModelElement : EModelElement, aKey:String) : String = 
	aModelElement.getGenAnnotation().details->select(key = aKey)->first().value 
/]

[query public hasGenAnnotation(aModelElement : EModelElement) : Boolean = eAnnotations->select( source = getNSURI() )->notEmpty() /]
[query public getGenAnnotation(aModelElement : EModelElement) : EAnnotation = eAnnotations->select( source = getNSURI() )->first() /]

[query public isAny(anEClassifier : EClassifier) : Boolean = 
	if (oclIsUndefined()) then true else (name = 'EEnumerator' or name = 'EDiagnosticChain' or name = 'EJavaObject') endif
/]
[query public isVoid(aOperation : EOperation) : Boolean = aOperation.eType.oclIsUndefined() /]

[query public join( aSequence : Sequence(String) , aDelimiter : String ) : String =
	Sequence{1..aSequence->size()}->iterate( index ; res: String ='' | res + ( if index = 1 then '' else aDelimiter endif ) +  aSequence->at(index))
/]

[query public format( aString : String , aArguments : Sequence(String) ) : String =
    Sequence{1..aArguments->size()}->iterate(index ; res: String =aString | res.replace('\\{'+ (index - 1) + '\\}', aArguments->at(index)))
/]

[query public matches( aString : String , aRegExp : String ) : Boolean =
    aString.replaceAll(aRegExp, '') <> aString
/]

[**
 * Properties on Class/Features
*/]
[query private hasContainerAttribute(aClass : EClass) : Boolean =  getContainerAttribute()->notEmpty() /]
[query private getContainerAttribute(aClass : EClass) : OrderedSet(EReference) =  aClass.eReferences->select(isContainerAttribute())->sortedBy(name) /]
[query private isContainerAttribute(aRef : EReference) : Boolean =  aRef.container/]
[query public isContainer(aStructuralFeature : EStructuralFeature) : Boolean =  
    if aStructuralFeature.oclIsKindOf(EReference) then
        let eReference : EReference = aStructuralFeature.oclAsType(EReference) in
        if eReference.eOpposite.oclIsUndefined() then
            false
        else
            eReference.eOpposite.containment
        endif
    else 
        false 
    endif
/]
[query public isBidirectional(aStructuralFeature : EStructuralFeature) : Boolean = if aStructuralFeature.oclIsKindOf(EReference) then not aStructuralFeature.oclAsType(EReference).eOpposite.oclIsUndefined() else false endif/]
[query public isContains(aStructuralFeature : EStructuralFeature) : Boolean = aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).containment/]
[query public isChangeable(aStructuralFeature : EStructuralFeature) : Boolean = aStructuralFeature.changeable/]
[query public isUnSettable(aStructuralFeature : EStructuralFeature) : Boolean = aStructuralFeature.unsettable and not aStructuralFeature.isContainer() /]
[query public isVolatile(aStructuralFeature : EStructuralFeature) : Boolean = 
    let eReverseFeature : EReference = if aStructuralFeature.oclIsKindOf(EReference) then aStructuralFeature.oclAsType(EReference).eOpposite else null endif in
    aStructuralFeature.volatile or ( not eReverseFeature.oclIsUndefined() and eReverseFeature.volatile )
/] 
[query public isFeatureMapType( aEFeature : EStructuralFeature ) : Boolean = isFeatureMap(aEFeature.eType.instanceClassName)/]
[query public isListType(aTypedElement : ETypedElement ) : Boolean = (not aTypedElement.oclIsUndefined() ) and ( aTypedElement.many or aTypedElement.upperBound <> 1 )/]
[query public isMapType(aTypedElement : ETypedElement ) : Boolean = aTypedElement.isListType() and not aTypedElement.eType.oclIsUndefined() and isMap(aTypedElement.eType.instanceClassName)/]
[query public isProxy(aStructuralFeature : EStructuralFeature) : Boolean = (not isContainer() and not isContains()) and aStructuralFeature.oclIsKindOf(EReference) and aStructuralFeature.oclAsType(EReference).resolveProxies/]  
[query public isField(aStructuralFeature : EStructuralFeature) : Boolean = not isContainer() and not isVolatile()/]
[query public isMap( n : String  ) : Boolean = let entries : Sequence(String) = Sequence{'java.util.Map.Entry','java.util.Map$Entry'} in entries->includes(n)/]
[query public isFeatureMap(  aEFeature : EStructuralFeature , n : String  ) : Boolean = let entries : Sequence(String) = Sequence{'org.eclipse.emf.ecore.util.FeatureMap.Entry','org.eclipse.emf.ecore.util.FeatureMap$Entry'} in entries->includes(n)/]
[query public isMapEntry(aClass : EClass ) : Boolean = 
	isMap(aClass.instanceClassName) 
and (not aClass.getEStructuralFeature('key').oclIsUndefined()) 
and (not aClass.getEStructuralFeature('value').oclIsUndefined())/]

[query public isGet(aStructuralFeature : EStructuralFeature) : Boolean = true/]
[query public isSet(aStructuralFeature : EStructuralFeature) : Boolean = isChangeable() and aStructuralFeature.upperBound = 1/]
[query public isUnSet(aStructuralFeature : EStructuralFeature) : Boolean = isChangeable() and isUnSettable()/]
[query public isIsSet(aStructuralFeature : EStructuralFeature) : Boolean = isUnSettable()/]

[query public isBasicSet(aStructuralFeature : EStructuralFeature) : Boolean = not isListType() and ( isChangeable() or not isContainer() ) and ( isBidirectional() and not isVolatile() or isContains() ) /]
[query public isBasicGet(aStructuralFeature : EStructuralFeature) : Boolean = isProxy() and not isListType()/]
[query public isBasicUnSet(aStructuralFeature : EStructuralFeature) : Boolean = isUnSettable() and isChangeable() and not isListType() and aStructuralFeature.oclIsKindOf(EReference) and ( isBidirectional() or isContains() )/]

[query private getSuperTypeContainers(aClass:EClass) : OrderedSet(EReference) = if not(aClass.eSuperTypes->isEmpty()) then aClass.eSuperTypes.getAllContainers()->flatten()->asOrderedSet() else OrderedSet{} endif /]
[query public getAllContainers(aClass : EClass) : OrderedSet(EReference) =  if getContainerAttribute()->notEmpty() then if getSuperTypeContainers()->isEmpty() then getContainerAttribute() else OrderedSet{getContainerAttribute()}->append(getSuperTypeContainers()->flatten()->reject(oclIsUndefined())->asOrderedSet())->flatten()->asOrderedSet() endif else getSuperTypeContainers()->asOrderedSet() endif /]

[query public splitAndCombineWords( eEObject : EObject , s : String, sep: String) : String = invoke('soft.generator.common.GenerateUtils','splitAndCombineWords(java.lang.String,java.lang.String)',Sequence{s,sep}) /]

[query public getMemberName(anENamedElement : ENamedElement) : String = 
    if anENamedElement.oclIsKindOf(EClassifier) then 
        anENamedElement.oclAsType(EClassifier).getMemberName() 
    else if anENamedElement.oclIsKindOf(EStructuralFeature) then 
        anENamedElement.oclAsType(EStructuralFeature).getMemberName()
    else if anENamedElement.oclIsKindOf(EOperation) then
        anENamedElement.oclAsType(EOperation).getMemberName()
    else
         anENamedElement.name.toLowerFirst()
    endif endif endif
/]
[query private getMemberName(anEClassifier : EClassifier) : String = anEClassifier.name.toLowerFirst() /]
[query private getMemberName(aStructural : EStructuralFeature) : String = aStructural.eContainingClass.name.toLowerFirst() + '_' + aStructural.name.toUpperFirst() /]
[query private getMemberName(aOperation : EOperation) : String = aOperation.eContainingClass.name.toLowerFirst() + '_' + aOperation.name.toUpperFirst() + aOperation.getParameterListName() /]
[query private getParameterListName( aOperation : EOperation) : String = if aOperation.eParameters->notEmpty() then '_' + aOperation.getParameterListDetailsName() else '' endif /]
[query private getParameterListDetailsName(aOperation : EOperation) : String = if aOperation.eParameters->size()>1 then aOperation.eParameters->first().eType.name + '_' + aOperation.eParameters->last().eType.name else aOperation.eParameters->first().eType.name endif /]

[query public getElementIdentifier(anENamedElement : ENamedElement) : String = anENamedElement.name + (if anENamedElement.oclIsKindOf(EOperation) then anENamedElement.oclAsType(EOperation).getParameterListName() else '' endif) /]
[query public getElementAccessorName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName().toUpperFirst() /]
[query public getElementIDAccessorName(anEClass : EClass) : String = 
    if(name = 'EClass' or name = 'EDataType' or name = 'EEnum') then 'Classifier'
    else if(name = 'EAttribute' or name = 'EReference') then 'Feature' 
    else if(name = 'EOperation') then 'Operation'
    else ''
    endif endif endif/]

[query public getClassifierIDName( anEClass : EClassifier ) : String = splitAndCombineWords(anEClass.name,'_').toUpperCase()/]
[query public getClassifierIDName( anEClass : EClass ,anEClassifier : EClassifier) : String = (anEClass.getClassifierIDName() + '__' + splitAndCombineWords(anEClassifier.name,'_')).toUpperCase()/]
[query public getClassifierIDValue(anEClassifier : EClassifier) : EInt = if (anEClassifier.getClassifierID() = 0) then anEClassifier.ePackage.eClassifiers->selectByKind(EClassifier)->size() else anEClassifier.getClassifierID() endif/]

[query public getOperationCountIDName( aEClass : EClass ) : String = aEClass.getClassifierIDName() + '_OPERATION_COUNT'/]
[query public getOperationCountIDValue( aEClass : EClass ) : String = 
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        aEClass.getOperationCount()
    else
        baseClass.getOperationCountIDName() + ' + ' +  (aEClass.getOperationCount() - baseClass.getOperationCount()).toString()
    endif
/]
[query public getOperationCountIDInteger( aEClass : EClass ) : Integer = 
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        aEClass.getOperationCount()
    else
        baseClass.getOperationCountIDInteger() + aEClass.getOperationCount() - baseClass.getOperationCount()
    endif
/]
[query public getOperationIDName(anEClass : EClass ,aOperation : EOperation) : String = (anEClass.getClassifierIDName() + '__' +  splitAndCombineWords(aOperation.name , '_') + aOperation.getParameterListName()).toUpperCase() /]
[query public getOperationIDValue(aEClass : EClass , aOperation : EOperation ) : String = 
    let index : Integer = aEClass.eAllOperations->indexOf(aOperation) - 1 in
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        index.toString()
    else
        let baseCount : Integer = baseClass.getOperationCount() in
        if ( index < baseCount ) then
            baseClass.getOperationIDName( aOperation )
        else
            baseClass.getOperationCountIDName() + ' + ' + (index-baseCount).toString()
        endif 
    endif 
/]
[query public getOperationIDInteger(aEClass : EClass , aOperation : EOperation ) : Integer = 
    let index : Integer = aEClass.eAllOperations->indexOf(aOperation) - 1 in
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        index
    else
        let baseCount : Integer = baseClass.getOperationCount() in
        if ( index < baseCount ) then
            baseClass.getOperationIDInteger( aOperation )
        else
            baseClass.getOperationCountIDInteger() + index - baseCount
        endif 
    endif 
/]

[query public getFeatureKind( aEFeature : EStructuralFeature ) : String = 
    let kind : String =
    if aEFeature.oclIsKindOf(EReference) then 
        let eRef : EReference = aEFeature.oclAsType(EReference) in
        if ( eRef.containment ) then
            if ( isMapType(aEFeature)) then 
                'map'
            else 
                'containment reference' 
            endif
        else if ( eRef.container ) then
            'container reference'
        else
            'reference'
        endif endif
    else
        'attribute'
    endif in
    if ( not(kind = 'map') ) and aEFeature.many then
        kind.concat(' list')
    else
        kind
    endif
/]

[query public getFeatureIDName(anEClass : EClass ,aStructural : EStructuralFeature) : String = (anEClass.getClassifierIDName() + '__' + splitAndCombineWords(aStructural.name,'_')).toUpperCase() /]

[query public getFeatureIDValue( aEClass : EClass , aEFeature : EStructuralFeature ) : String =
    let index : Integer = aEClass.eAllStructuralFeatures->indexOf(aEFeature) - 1 in
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        index.toString()
    else
        let baseCount : Integer = baseClass.getFeatureCount() in
        if ( index < baseCount ) then
            baseClass.getFeatureIDName( aEFeature )
        else
            baseClass.getFeatureCountIDName() + ' + ' + (index-baseCount).toString()
        endif 
    endif 
/]

[query public getFeatureIDInteger( aEClass : EClass , aEFeature : EStructuralFeature ) : Integer =
    let index : Integer = aEClass.eAllStructuralFeatures->indexOf(aEFeature) - 1 in
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        index
    else
        let baseCount : Integer = baseClass.getFeatureCount() in
        if ( index < baseCount ) then
            baseClass.getFeatureIDInteger( aEFeature )
        else
            baseClass.getFeatureCountIDInteger() + index - baseCount
        endif 
    endif 
/]


[query public getFeatureCountIDName( aEClass : EClass ) : String = aEClass.getClassifierIDName() + '_FEATURE_COUNT'/]

[query public getFeatureCountIDValue( aEClass : EClass ) : String = 
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        aEClass.getFeatureCount()
    else
        baseClass.getFeatureCountIDName() + ' + ' +  (aEClass.getFeatureCount() - baseClass.getFeatureCount()).toString()
    endif
/]

[query public getFeatureCountIDInteger( aEClass : EClass ) : Integer = 
    let baseClass : EClass = aEClass.getBaseClass() in
    if baseClass.oclIsUndefined() then
        aEClass.getFeatureCount()
    else
        baseClass.getFeatureCountIDInteger() + aEClass.getFeatureCount() - baseClass.getFeatureCount()
    endif
/]

[query public isEcorePackage( aPackage : EPackage ) : Boolean = aPackage.name = 'ecore' /]

[query public getClassExtendsClass( aClass : EClass ) : EClass = getClassExtendsClass( aClass , aClass.getBaseClass() )/]

[query private getClassExtendsClass( aClass : EClass , aBaseClass : EClass ) : EClass =
    if ( aClass = aBaseClass ) then
        null
    else
        if ( aBaseClass.oclIsUndefined() or (not aBaseClass.interface) ) then
            aBaseClass
        else
            getClassExtendsClass(aClass , aBaseClass.getBaseClass())
        endif
    endif
/]

[query public getBaseClass( aEClass : EClass ) : EClass = if (aEClass.eSuperTypes->isEmpty() ) then null else aEClass.eSuperTypes->first() endif/]

[query public getMixinClasses(aClass : EClass) : Set(EClass) =
	if aClass.eSuperTypes->isEmpty() or ( aClass.eSuperTypes->size() = 1 and ( not aClass.eSuperTypes->first().interface ) ) then
		OrderedSet{}
	else
		let baseClass : EClass = aClass.getBaseClass() in
		OrderedSet {
			if baseClass.interface then
				baseClass.getMixinClasses()
			else 
				OrderedSet{}
			endif
			,
			let allBasesClasses : OrderedSet(EClass) = aClass.eAllSuperTypes in
			let ndx : Integer = allBasesClasses->indexOf( baseClass ) + 1 in
			if ndx > allBasesClasses->size() then
				OrderedSet{}
			else
				allBasesClasses->subOrderedSet(ndx,allBasesClasses->size())
			endif
		}->flatten()		
	endif
/]

[query public getEPackage( eElement : ETypedElement ) : EPackage =
    let containingClass : EClass = 
    if eElement.oclIsKindOf(EStructuralFeature) then  eElement.oclAsType(EStructuralFeature).eContainingClass
    else if eElement.oclIsKindOf(EOperation) then  eElement.oclAsType(EOperation).eContainingClass
    else if eElement.oclIsKindOf(EParameter) then  eElement.oclAsType(EParameter).eOperation.eContainingClass
    else null endif endif endif in
    if containingClass.oclIsUndefined() then null
    else containingClass.ePackage
    endif
/]


[** Name Qualification **]
[query public getShortQualifiedNameSep( aQualifiedName : String , aNamespaceName : String, aSep : String ) : String =
    let aQualifiedNames : Sequence(String) = aQualifiedName.tokenize(aSep) in
    let aNamespaceNames : Sequence(String) = aNamespaceName.tokenize(aSep) in
    let shortQualifiedNames : Sequence(String) = Sequence{1..aQualifiedNames->size()}->iterate( index ; res : Sequence(String) = Sequence{} |
        let n : String = aQualifiedNames->at(index) in
        if ( res->isEmpty() and index <= aNamespaceNames->size() and (n = aNamespaceNames->at(index)) ) then
            res
        else
            res->append(n)
        endif
    ) in
    shortQualifiedNames->join(aSep)
/]

[query public getUnQualifiedNameSep( aQualifiedName : String , aSep : String) : String =
    let index : Integer = aQualifiedName.lastIndex(aSep) in
    if index = -1 then
        aQualifiedName
    else
        aQualifiedName.substring(index+ aSep.size() )
    endif
/]


[query public getQualificationSep( any : OclAny , aQualifiedName : String , aSep : String) : String = 
    let index : Integer = aQualifiedName.lastIndex(aSep) in
    if index = -1 then
        ''
    else
        aQualifiedName.substring(1,index-1)
    endif 
/]

[query public isTemplateGenerated( any : OclAny , aTemplateName : String ) : Boolean =
	let templatesProperty : String =  getProperty('templates') in
	let templates : Sequence(String) = templatesProperty.tokenize(',') in
	templates->includes(aTemplateName)
/]

 