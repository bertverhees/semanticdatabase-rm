[**
 * This file is part of soft.generators, a project for code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateStructuralFeature('http://www.eclipse.org/emf/2002/Ecore')]

[import soft::generator::common::generateCommon/]


[**
 * lazy property can be defined as follow lazy = no|lambda|function|action
 **]
[query public getLazy( aStructuralFeature : EStructuralFeature ) : String =
if aStructuralFeature.hasKey('lazy') then 
    aStructuralFeature.valueKey('lazy')
else
    let aPackage : EPackage = aStructuralFeature.eContainingClass.ePackage in
    if aStructuralFeature.isListType() then
        aPackage.getLazy('list')
    else if aStructuralFeature.isProxy() then
        aPackage.getLazy('proxy')
    else 
        aPackage.getLazy('')
    endif
    endif
endif/]

[**
 * lazy property can be defined as follow lazy = ((*|list|proxy):(no|lambda|function|action))+
 **]
[query private getLazy( aPackage : EPackage , type : String ) : String =
if aPackage.hasKey('lazy') then
    let lazy : String = aPackage.valueKey('lazy') in
    let value : String = lazy.tokenize()->iterate( s ; res: String = '' | (
        if res = '' then 
            let index : Integer = s.index( ':' ) in 
            if index = -1 then
                s
            else
                let t : String = s.substring(1 , index - 1 ) in
                if t = type then
                    s.substring( index + 1 )
                else
                    ''
                endif
            endif
        else
            res
        endif
    )) in
    if value = '' then
        'no'
    else
        value
    endif
else 
    'no'
endif
/]

[query public isLazy( aStructuralFeature : EStructuralFeature ) : Boolean = aStructuralFeature.getLazy() <> 'no'/] 
[query public isNotLazy( aStructuralFeature : EStructuralFeature ) : Boolean = aStructuralFeature.getLazy() = 'no'/]

[query public hasInitializationMethod( aStructuralFeature : EStructuralFeature ) : Boolean = 
not isVolatile() and isLazy() and ( let lazyType : String = aStructuralFeature.getLazy() in lazyType = 'action' or lazyType = 'function')/]

[query public getInitializationMethodName(feature : EStructuralFeature) : String = 
if hasKey('initializationName') then 
    valueKey('initializationName') 
else 
    'init'.concat(name.toUpperFirst()) 
endif/]
