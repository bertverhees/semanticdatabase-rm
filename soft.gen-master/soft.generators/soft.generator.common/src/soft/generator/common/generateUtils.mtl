[**
 * This file is part of soft.generators, a project for code 
 * generation of an ecore model
 *
 * Copyright(c) 2021 MASA Group
 *	
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
**/]

[comment encoding = UTF-8 /]
[module generateUtils('http://www.eclipse.org/emf/2002/Ecore')]

[query public lowerCamelToUpperUnderscore( eEObject : EObject , s : String ) : String = invoke('soft.generator.common.GenerateUtils','lowerCamelToUpperUnderscore(java.lang.String)',Sequence{s}) /]

[query public upperCamelToUpperUnderscore( eEObject : EObject , s : String ) : String = invoke('soft.generator.common.GenerateUtils','upperCamelToUpperUnderscore(java.lang.String)',Sequence{s}) /]

[query public splitAndCombineWords( eEObject : EObject , s : String, sep: String) : String = invoke('soft.generator.common.GenerateUtils','splitAndCombineWords(java.lang.String,java.lang.String)',Sequence{s,sep}) /]

[query public getOrderedClasses( anEPackage : EPackage ) : Sequence(EClass) = invoke('soft.generator.common.GenerateUtils','getOrderedClasses(org.eclipse.emf.ecore.EPackage)',Sequence{anEPackage}) /]

[query public mapNew( o : OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapNew()',Sequence{}) /]

[query public mapPut( map : OclAny , key: OclAny , value:OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapPut(java.util.Map,java.lang.Object,java.lang.Object)',Sequence{map,key,value }) /]

[query public mapPutAll( map : OclAny , o : OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapPutAll(java.util.Map,java.util.Map)',Sequence{map,o }) /]

[query public mapRemove( map : OclAny , key: OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapRemove(java.util.Map,java.lang.Object)',Sequence{map,key}) /]

[query public mapGet( map : OclAny , key: OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapGet(java.util.Map,java.lang.Object)',Sequence{map,key}) /]

[query public mapGetOrDefault( map : OclAny , key: OclAny, defaultValue : OclAny ) : OclAny = invoke('soft.generator.common.GenerateUtils','mapGetOrDefault(java.util.Map,java.lang.Object,java.lang.Object)',Sequence{map,key,defaultValue}) /]

[query public mapKeys( map : OclAny ) : Set(OclAny) = invoke('soft.generator.common.GenerateUtils','mapKeys(java.util.Map)',Sequence{map}) /]

[query public mapContainsKey( map : OclAny , key: OclAny) : Boolean = invoke('soft.generator.common.GenerateUtils','mapContainsKey(java.util.Map,java.lang.Object)',Sequence{map,key}) /]

[query public asSequence( o : OclAny ) : Sequence(OclAny) = invoke('soft.generator.common.GenerateUtils','asSequence(java.lang.Object)',Sequence{o}) /]
