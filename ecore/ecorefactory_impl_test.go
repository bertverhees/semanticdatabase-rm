// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"time"
)

func TestFactoryCreateFromEClass(t *testing.T) {
	_ = mock.Anything
	factory := newEcoreFactoryImpl()
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.Create(mockEClass) })
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EANNOTATION)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EATTRIBUTE)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(ECLASS)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EDATA_TYPE)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EENUM)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EENUM_LITERAL)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EFACTORY)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EGENERIC_TYPE)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EOBJECT)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EOPERATION)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EPACKAGE)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EPARAMETER)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(EREFERENCE)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(ESTRING_TO_STRING_MAP_ENTRY)
		assert.NotNil(t, factory.Create(mockEClass))
	}
	{
		mockEClass := &MockEClass{}
		mockEClass.On("GetClassifierID").Return(ETYPE_PARAMETER)
		assert.NotNil(t, factory.Create(mockEClass))
	}
}

func TestFactoryCreateEAnnotation(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEAnnotation())
}

func TestFactoryCreateEAnnotationFromEModelElementContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEModelElement)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEAnnotations").Return(mockList).Once()
	o := factory.CreateEAnnotationFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEAttribute(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEAttribute())
}

func TestFactoryCreateEAttributeFromEContainingClassContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEStructuralFeatures").Return(mockList).Once()
	o := factory.CreateEAttributeFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEAttributeFromEContainingClassContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEStructuralFeatures").Return(mockList).Once()
	o := factory.CreateEAttributeFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEClass(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEClass())
}

func TestFactoryCreateEClassFromEPackageContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEClassFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEClassFromEPackageContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEClassFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEDataType(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEDataType())
}

func TestFactoryCreateEDataTypeFromEPackageContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEDataTypeFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEDataTypeFromEPackageContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEDataTypeFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEEnum(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEEnum())
}

func TestFactoryCreateEEnumFromEPackageContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEEnumFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEEnumFromEPackageContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEClassifiers").Return(mockList).Once()
	o := factory.CreateEEnumFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEEnumLiteral(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEEnumLiteral())
}

func TestFactoryCreateEEnumLiteralFromEEnumContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEEnum)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetELiterals").Return(mockList).Once()
	o := factory.CreateEEnumLiteralFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEFactory(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEFactory())
}

func TestFactoryCreateEFactoryFromEPackageContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockContainer.On("SetEFactoryInstance", mock.Anything).Once()
	o := factory.CreateEFactoryFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEGenericType(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEGenericType())
}

func TestFactoryCreateEObject(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEObject())
}

func TestFactoryCreateEOperation(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEOperation())
}

func TestFactoryCreateEOperationFromEContainingClassContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEOperations").Return(mockList).Once()
	o := factory.CreateEOperationFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEOperationFromEContainingClassContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEOperations").Return(mockList).Once()
	o := factory.CreateEOperationFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEPackage(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEPackage())
}

func TestFactoryCreateEPackageFromESuperPackageContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEPackage)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetESubPackages").Return(mockList).Once()
	o := factory.CreateEPackageFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEParameter(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEParameter())
}

func TestFactoryCreateEParameterFromEOperationContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEOperation)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEParameters").Return(mockList).Once()
	o := factory.CreateEParameterFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEReference(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEReference())
}

func TestFactoryCreateEReferenceFromEContainingClassContainer(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEStructuralFeatures").Return(mockList).Once()
	o := factory.CreateEReferenceFromContainer(mockContainer)
	assert.NotNil(t, o)
}

func TestFactoryCreateEReferenceFromEContainingClassContainerAndClassID(t *testing.T) {
	factory := newEcoreFactoryImpl()
	mockContainer := new(MockEClass)
	mockList := new(MockEList)
	mockList.On("Add", mock.Anything).Return(true).Once()
	mockContainer.On("GetEStructuralFeatures").Return(mockList).Once()
	o := factory.CreateEReferenceFromContainerAndClassID(mockContainer, 0)
	assert.NotNil(t, o)
}

func TestFactoryCreateEStringToStringMapEntry(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateEStringToStringMapEntry())
}

func TestFactoryCreateETypeParameter(t *testing.T) {
	factory := newEcoreFactoryImpl()
	assert.NotNil(t, factory.CreateETypeParameter())
}

func TestFactoryConvert(t *testing.T) {
	factory := newEcoreFactoryImpl()
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(-1)
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, nil) })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBIG_DECIMAL)
		assert.Equal(t, float64(3), factory.CreateFromString(mockEDataType, "3"))
		assert.Equal(t, float64(3.2), factory.CreateFromString(mockEDataType, "3.2"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBIG_DECIMAL)
		assert.Equal(t, "1.2", factory.ConvertToString(mockEDataType, float64(1.2)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBIG_INTEGER)
		assert.Equal(t, int64(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBIG_INTEGER)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int64(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBOOLEAN)
		assert.Equal(t, true, factory.CreateFromString(mockEDataType, "true"))
		assert.Equal(t, false, factory.CreateFromString(mockEDataType, "false"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBOOLEAN)
		assert.Equal(t, "true", factory.ConvertToString(mockEDataType, true))
		assert.Equal(t, "false", factory.ConvertToString(mockEDataType, false))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBOOLEAN_OBJECT)
		assert.Equal(t, true, factory.CreateFromString(mockEDataType, "true"))
		assert.Equal(t, false, factory.CreateFromString(mockEDataType, "false"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBOOLEAN_OBJECT)
		assert.Equal(t, "true", factory.ConvertToString(mockEDataType, true))
		assert.Equal(t, "false", factory.ConvertToString(mockEDataType, false))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE)
		assert.Equal(t, "golang\u0000", factory.CreateFromString(mockEDataType, ""))
		assert.Equal(t, byte('a'), factory.CreateFromString(mockEDataType, "a"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE)
		assert.Equal(t, "a", factory.ConvertToString(mockEDataType, byte('a')))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE_ARRAY)
		assert.Equal(t, []byte("ab"), factory.CreateFromString(mockEDataType, "ab"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE_ARRAY)
		assert.Equal(t, "ab", factory.ConvertToString(mockEDataType, []byte("ab")))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE_OBJECT)
		assert.Equal(t, "golang\u0000", factory.CreateFromString(mockEDataType, ""))
		assert.Equal(t, byte('a'), factory.CreateFromString(mockEDataType, "a"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EBYTE_OBJECT)
		assert.Equal(t, "a", factory.ConvertToString(mockEDataType, byte('a')))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ECHAR)
		assert.Equal(t, "golang\u0000", factory.CreateFromString(mockEDataType, ""))
		assert.Equal(t, byte('a'), factory.CreateFromString(mockEDataType, "a"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ECHAR)
		assert.Equal(t, "a", factory.ConvertToString(mockEDataType, byte('a')))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ECHARACTER_OBJECT)
		assert.Equal(t, "golang\u0000", factory.CreateFromString(mockEDataType, ""))
		assert.Equal(t, byte('a'), factory.CreateFromString(mockEDataType, "a"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ECHARACTER_OBJECT)
		assert.Equal(t, "a", factory.ConvertToString(mockEDataType, byte('a')))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDATE)
		date := factory.CreateFromString(mockEDataType, "2007-06-02T10:26:13.000Z")
		expected := time.Date(2007, time.June, 2, 10, 26, 13, 0, time.UTC)
		assert.Equal(t, &expected, date)
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDATE)
		date := time.Date(2020, time.May, 12, 17, 33, 10, 770000000, time.UTC)
		dateStr := factory.ConvertToString(mockEDataType, &date)
		expected := "2020-05-12T17:33:10.77Z"
		assert.Equal(t, expected, dateStr)
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDOUBLE)
		assert.Equal(t, float64(3), factory.CreateFromString(mockEDataType, "3"))
		assert.Equal(t, float64(3.2), factory.CreateFromString(mockEDataType, "3.2"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDOUBLE)
		assert.Equal(t, "1.2", factory.ConvertToString(mockEDataType, float64(1.2)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDOUBLE_OBJECT)
		assert.Equal(t, float64(3), factory.CreateFromString(mockEDataType, "3"))
		assert.Equal(t, float64(3.2), factory.CreateFromString(mockEDataType, "3.2"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EDOUBLE_OBJECT)
		assert.Equal(t, "1.2", factory.ConvertToString(mockEDataType, float64(1.2)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EFLOAT)
		assert.Equal(t, float32(3), factory.CreateFromString(mockEDataType, "3"))
		assert.Equal(t, float32(3.2), factory.CreateFromString(mockEDataType, "3.2"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EFLOAT)
		assert.Equal(t, "1.2", factory.ConvertToString(mockEDataType, float32(1.2)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EFLOAT_OBJECT)
		assert.Equal(t, float32(3), factory.CreateFromString(mockEDataType, "3"))
		assert.Equal(t, float32(3.2), factory.CreateFromString(mockEDataType, "3.2"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EFLOAT_OBJECT)
		assert.Equal(t, "1.2", factory.ConvertToString(mockEDataType, float32(1.2)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EINT)
		assert.Equal(t, int(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EINT)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EINTEGER_OBJECT)
		assert.Equal(t, int(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EINTEGER_OBJECT)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EJAVA_CLASS)
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EJAVA_CLASS)
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EJAVA_OBJECT)
		assert.Panics(t, func() { factory.CreateFromString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(EJAVA_OBJECT)
		assert.Panics(t, func() { factory.ConvertToString(mockEDataType, "") })
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ELONG)
		assert.Equal(t, int64(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ELONG)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int64(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ELONG_OBJECT)
		assert.Equal(t, int(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ELONG_OBJECT)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESHORT)
		assert.Equal(t, int16(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESHORT)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int16(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESHORT_OBJECT)
		assert.Equal(t, int16(3), factory.CreateFromString(mockEDataType, "3"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESHORT_OBJECT)
		assert.Equal(t, "1", factory.ConvertToString(mockEDataType, int16(1)))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESTRING)
		assert.Equal(t, "test", factory.CreateFromString(mockEDataType, "test"))
		mockEDataType.AssertExpectations(t)
	}
	{
		mockEDataType := &MockEDataType{}
		mockEDataType.On("GetClassifierID").Return(ESTRING)
		assert.Equal(t, "test", factory.ConvertToString(mockEDataType, "test"))
		mockEDataType.AssertExpectations(t)
	}
}
