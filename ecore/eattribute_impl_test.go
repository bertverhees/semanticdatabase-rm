// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEAttribute() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEAttributeAsEAttribute(t *testing.T) {
	o := newEAttributeImpl()
	assert.Equal(t, o, o.asEAttribute())
}

func TestEAttributeStaticClass(t *testing.T) {
	o := newEAttributeImpl()
	assert.Equal(t, GetPackage().GetEAttribute(), o.EStaticClass())
}

func TestEAttributeFeatureCount(t *testing.T) {
	o := newEAttributeImpl()
	assert.Equal(t, EATTRIBUTE_FEATURE_COUNT, o.EStaticFeatureCount())
}

func TestEAttributeEAttributeTypeGet(t *testing.T) {
	o := newEAttributeImpl()
	assert.Panics(t, func() { o.GetEAttributeType() })
}

func TestEAttributeIDGet(t *testing.T) {
	o := newEAttributeImpl()
	// get default value
	assert.Equal(t, bool(false), o.IsID())
	// get initialized value
	v := bool(true)
	o.isID = v
	assert.Equal(t, v, o.IsID())
}

func TestEAttributeIDSet(t *testing.T) {
	o := newEAttributeImpl()
	v := bool(true)
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.EAdapters().Add(mockAdapter)
	o.SetID(v)
	mockAdapter.AssertExpectations(t)
}

func TestEAttributeEGetFromID(t *testing.T) {
	o := newEAttributeImpl()
	assert.Panics(t, func() { o.EGetFromID(-1, true) })
	assert.Panics(t, func() { o.EGetFromID(EATTRIBUTE__EATTRIBUTE_TYPE, true) })
	assert.Panics(t, func() { o.EGetFromID(EATTRIBUTE__EATTRIBUTE_TYPE, false) })
	assert.Equal(t, o.IsID(), o.EGetFromID(EATTRIBUTE__ID, true))
}

func TestEAttributeESetFromID(t *testing.T) {
	o := newEAttributeImpl()
	assert.Panics(t, func() { o.ESetFromID(-1, nil) })
	{
		v := bool(true)
		o.ESetFromID(EATTRIBUTE__ID, v)
		assert.Equal(t, v, o.EGetFromID(EATTRIBUTE__ID, false))
	}

}

func TestEAttributeEIsSetFromID(t *testing.T) {
	o := newEAttributeImpl()
	assert.Panics(t, func() { o.EIsSetFromID(-1) })
	assert.Panics(t, func() { o.EIsSetFromID(EATTRIBUTE__EATTRIBUTE_TYPE) })
	assert.False(t, o.EIsSetFromID(EATTRIBUTE__ID))
}

func TestEAttributeEUnsetFromID(t *testing.T) {
	o := newEAttributeImpl()
	assert.Panics(t, func() { o.EUnsetFromID(-1) })
	{
		o.EUnsetFromID(EATTRIBUTE__ID)
		v := o.EGetFromID(EATTRIBUTE__ID, false)
		assert.Equal(t, bool(false), v)
	}
}
