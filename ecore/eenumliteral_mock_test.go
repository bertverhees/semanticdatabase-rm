// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

func discardMockEEnumLiteral() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEEnumLiteralGetEEnum tests method GetEEnum
func TestMockEEnumLiteralGetEEnum(t *testing.T) {
	o := &MockEEnumLiteral{}
	r := new(MockEEnum)
	o.On("GetEEnum").Once().Return(r)
	o.On("GetEEnum").Once().Return(func() EEnum {
		return r
	})
	assert.Equal(t, r, o.GetEEnum())
	assert.Equal(t, r, o.GetEEnum())
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralGetInstance tests method GetInstance
func TestMockEEnumLiteralGetInstance(t *testing.T) {
	o := &MockEEnumLiteral{}
	r := interface{}(nil)
	o.On("GetInstance").Once().Return(r)
	o.On("GetInstance").Once().Return(func() interface{} {
		return r
	})
	assert.Equal(t, r, o.GetInstance())
	assert.Equal(t, r, o.GetInstance())
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralSetInstance tests method SetInstance
func TestMockEEnumLiteralSetInstance(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := interface{}(nil)
	o.On("SetInstance", v).Once()
	o.SetInstance(v)
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralGetLiteral tests method GetLiteral
func TestMockEEnumLiteralGetLiteral(t *testing.T) {
	o := &MockEEnumLiteral{}
	r := string("Test String")
	o.On("GetLiteral").Once().Return(r)
	o.On("GetLiteral").Once().Return(func() string {
		return r
	})
	assert.Equal(t, r, o.GetLiteral())
	assert.Equal(t, r, o.GetLiteral())
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralSetLiteral tests method SetLiteral
func TestMockEEnumLiteralSetLiteral(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := string("Test String")
	o.On("SetLiteral", v).Once()
	o.SetLiteral(v)
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralGetValue tests method GetValue
func TestMockEEnumLiteralGetValue(t *testing.T) {
	o := &MockEEnumLiteral{}
	r := int(45)
	o.On("GetValue").Once().Return(r)
	o.On("GetValue").Once().Return(func() int {
		return r
	})
	assert.Equal(t, r, o.GetValue())
	assert.Equal(t, r, o.GetValue())
	o.AssertExpectations(t)
}

// TestMockEEnumLiteralSetValue tests method SetValue
func TestMockEEnumLiteralSetValue(t *testing.T) {
	o := &MockEEnumLiteral{}
	v := int(45)
	o.On("SetValue", v).Once()
	o.SetValue(v)
	o.AssertExpectations(t)
}
