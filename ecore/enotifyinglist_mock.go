// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

// MockENotifyingList is an autogenerated mock type for the ENotifyingList type
type MockENotifyingList struct {
	MockEList
}

// AddWithNotification provides a mock function with given fields: object, notifications
func (_m *MockENotifyingList) AddWithNotification(object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// GetFeature provides a mock function with given fields:
func (_m *MockENotifyingList) GetFeature() EStructuralFeature {
	ret := _m.Called()

	var r0 EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(EStructuralFeature)
		}
	}

	return r0
}

// GetFeatureID provides a mock function with given fields:
func (_m *MockENotifyingList) GetFeatureID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetNotifier provides a mock function with given fields:
func (_m *MockENotifyingList) GetNotifier() ENotifier {
	ret := _m.Called()

	var r0 ENotifier
	if rf, ok := ret.Get(0).(func() ENotifier); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotifier)
		}
	}

	return r0
}

// RemoveWithNotification provides a mock function with given fields: object, notifications
func (_m *MockENotifyingList) RemoveWithNotification(object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}

// SetWithNotification provides a mock function with given fields: index, object, notifications
func (_m *MockENotifyingList) SetWithNotification(index int, object interface{}, notifications ENotificationChain) ENotificationChain {
	ret := _m.Called(index, object, notifications)

	var r0 ENotificationChain
	if rf, ok := ret.Get(0).(func(int, interface{}, ENotificationChain) ENotificationChain); ok {
		r0 = rf(index, object, notifications)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ENotificationChain)
		}
	}

	return r0
}
