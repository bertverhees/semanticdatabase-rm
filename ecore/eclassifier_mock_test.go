// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"reflect"
	"testing"
)

func discardMockEClassifier() {
	_ = assert.Equal
	_ = testing.Coverage
}

// TestMockEClassifierGetClassifierID tests method GetClassifierID
func TestMockEClassifierGetClassifierID(t *testing.T) {
	o := &MockEClassifier{}
	r := int(45)
	o.On("GetClassifierID").Once().Return(r)
	o.On("GetClassifierID").Once().Return(func() int {
		return r
	})
	assert.Equal(t, r, o.GetClassifierID())
	assert.Equal(t, r, o.GetClassifierID())
	o.AssertExpectations(t)
}

// TestMockEClassifierSetClassifierID tests method SetClassifierID
func TestMockEClassifierSetClassifierID(t *testing.T) {
	o := &MockEClassifier{}
	v := int(45)
	o.On("SetClassifierID", v).Once()
	o.SetClassifierID(v)
	o.AssertExpectations(t)
}

// TestMockEClassifierGetDefaultValue tests method GetDefaultValue
func TestMockEClassifierGetDefaultValue(t *testing.T) {
	o := &MockEClassifier{}
	r := interface{}(nil)
	o.On("GetDefaultValue").Once().Return(r)
	o.On("GetDefaultValue").Once().Return(func() interface{} {
		return r
	})
	assert.Equal(t, r, o.GetDefaultValue())
	assert.Equal(t, r, o.GetDefaultValue())
	o.AssertExpectations(t)
}

// TestMockEClassifierGetEPackage tests method GetEPackage
func TestMockEClassifierGetEPackage(t *testing.T) {
	o := &MockEClassifier{}
	r := new(MockEPackage)
	o.On("GetEPackage").Once().Return(r)
	o.On("GetEPackage").Once().Return(func() EPackage {
		return r
	})
	assert.Equal(t, r, o.GetEPackage())
	assert.Equal(t, r, o.GetEPackage())
	o.AssertExpectations(t)
}

// TestMockEClassifierGetInstanceClass tests method GetInstanceClass
func TestMockEClassifierGetInstanceClass(t *testing.T) {
	o := &MockEClassifier{}
	r := reflect.Type(reflect.TypeOf(""))
	o.On("GetInstanceClass").Once().Return(r)
	o.On("GetInstanceClass").Once().Return(func() reflect.Type {
		return r
	})
	assert.Equal(t, r, o.GetInstanceClass())
	assert.Equal(t, r, o.GetInstanceClass())
	o.AssertExpectations(t)
}

// TestMockEClassifierSetInstanceClass tests method SetInstanceClass
func TestMockEClassifierSetInstanceClass(t *testing.T) {
	o := &MockEClassifier{}
	v := reflect.Type(reflect.TypeOf(""))
	o.On("SetInstanceClass", v).Once()
	o.SetInstanceClass(v)
	o.AssertExpectations(t)
}

// TestMockEClassifierGetInstanceTypeName tests method GetInstanceTypeName
func TestMockEClassifierGetInstanceTypeName(t *testing.T) {
	o := &MockEClassifier{}
	r := string("Test String")
	o.On("GetInstanceTypeName").Once().Return(r)
	o.On("GetInstanceTypeName").Once().Return(func() string {
		return r
	})
	assert.Equal(t, r, o.GetInstanceTypeName())
	assert.Equal(t, r, o.GetInstanceTypeName())
	o.AssertExpectations(t)
}

// TestMockEClassifierSetInstanceTypeName tests method SetInstanceTypeName
func TestMockEClassifierSetInstanceTypeName(t *testing.T) {
	o := &MockEClassifier{}
	v := string("Test String")
	o.On("SetInstanceTypeName", v).Once()
	o.SetInstanceTypeName(v)
	o.AssertExpectations(t)
}

// TestMockEClassifierIsInstance tests method IsInstance
func TestMockEClassifierIsInstance(t *testing.T) {
	o := &MockEClassifier{}
	object := interface{}(nil)
	r := bool(true)
	o.On("IsInstance", object).Return(r).Once()
	o.On("IsInstance", object).Return(func() bool {
		return r
	}).Once()
	assert.Equal(t, r, o.IsInstance(object))
	assert.Equal(t, r, o.IsInstance(object))
	o.AssertExpectations(t)
}
