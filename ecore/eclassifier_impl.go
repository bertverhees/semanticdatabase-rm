// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import "reflect"

// eClassifierImpl is the implementation of the model object 'EClassifier'
type eClassifierImpl struct {
	eNamedElementImpl
	classifierID     int
	instanceClass    reflect.Type
	instanceTypeName string
}
type eClassifierImplInitializers interface {
	initClassifierID() int
}

// newEClassifierImpl is the constructor of a eClassifierImpl
func newEClassifierImpl() *eClassifierImpl {
	eClassifier := new(eClassifierImpl)
	eClassifier.SetInterfaces(eClassifier)
	eClassifier.Initialize()
	return eClassifier
}

func (eClassifier *eClassifierImpl) Initialize() {
	eClassifier.eNamedElementImpl.Initialize()
	eClassifier.classifierID = -1
	eClassifier.instanceClass = nil
	eClassifier.instanceTypeName = ""

}

func (eClassifier *eClassifierImpl) asEClassifier() EClassifier {
	return eClassifier.GetInterfaces().(EClassifier)
}

func (eClassifier *eClassifierImpl) asInitializers() eClassifierImplInitializers {
	return eClassifier.AsEObject().(eClassifierImplInitializers)
}

func (eClassifier *eClassifierImpl) EStaticClass() EClass {
	return GetPackage().GetEClassifierClass()
}

func (eClassifier *eClassifierImpl) EStaticFeatureCount() int {
	return ECLASSIFIER_FEATURE_COUNT
}

// IsInstance default implementation
func (eClassifier *eClassifierImpl) IsInstance(interface{}) bool {
	panic("IsInstance not implemented")
}

// GetClassifierID get the value of classifierID
func (eClassifier *eClassifierImpl) GetClassifierID() int {
	if eClassifier.classifierID == -1 {
		eClassifier.classifierID = eClassifier.asInitializers().initClassifierID()
	}
	return eClassifier.classifierID
}

// SetClassifierID set the value of classifierID
func (eClassifier *eClassifierImpl) SetClassifierID(newClassifierID int) {
	oldClassifierID := eClassifier.classifierID
	eClassifier.classifierID = newClassifierID
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__CLASSIFIER_ID, oldClassifierID, newClassifierID, NO_INDEX))
	}
}

// GetDefaultValue get the value of defaultValue
func (eClassifier *eClassifierImpl) GetDefaultValue() interface{} {
	panic("GetDefaultValue not implemented")
}

// GetEPackage get the value of ePackage
func (eClassifier *eClassifierImpl) GetEPackage() EPackage {
	if eClassifier.EContainerFeatureID() == ECLASSIFIER__EPACKAGE {
		return eClassifier.EContainer().(EPackage)
	}
	return nil
}

// GetInstanceClass get the value of instanceClass
func (eClassifier *eClassifierImpl) GetInstanceClass() reflect.Type {
	return eClassifier.instanceClass
}

// SetInstanceClass set the value of instanceClass
func (eClassifier *eClassifierImpl) SetInstanceClass(newInstanceClass reflect.Type) {
	oldInstanceClass := eClassifier.instanceClass
	eClassifier.instanceClass = newInstanceClass
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__INSTANCE_CLASS, oldInstanceClass, newInstanceClass, NO_INDEX))
	}
}

// GetInstanceTypeName get the value of instanceTypeName
func (eClassifier *eClassifierImpl) GetInstanceTypeName() string {
	return eClassifier.instanceTypeName
}

// SetInstanceTypeName set the value of instanceTypeName
func (eClassifier *eClassifierImpl) SetInstanceTypeName(newInstanceTypeName string) {
	oldInstanceTypeName := eClassifier.instanceTypeName
	eClassifier.instanceTypeName = newInstanceTypeName
	if eClassifier.ENotificationRequired() {
		eClassifier.ENotify(NewNotificationByFeatureID(eClassifier.AsEObject(), SET, ECLASSIFIER__INSTANCE_TYPE_NAME, oldInstanceTypeName, newInstanceTypeName, NO_INDEX))
	}
}

func (eClassifier *eClassifierImpl) initClassifierID() int {
	return -1
}

func (eClassifier *eClassifierImpl) EGetFromID(featureID int, resolve bool) interface{} {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		return eClassifier.asEClassifier().GetClassifierID()
	case ECLASSIFIER__DEFAULT_VALUE:
		return eClassifier.asEClassifier().GetDefaultValue()
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.asEClassifier().GetEPackage()
	case ECLASSIFIER__INSTANCE_CLASS:
		return eClassifier.asEClassifier().GetInstanceClass()
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		return eClassifier.asEClassifier().GetInstanceTypeName()
	default:
		return eClassifier.eNamedElementImpl.EGetFromID(featureID, resolve)
	}
}

func (eClassifier *eClassifierImpl) ESetFromID(featureID int, newValue interface{}) {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		eClassifier.asEClassifier().SetClassifierID(newValue.(int))
	case ECLASSIFIER__INSTANCE_CLASS:
		eClassifier.asEClassifier().SetInstanceClass(newValue.(reflect.Type))
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		eClassifier.asEClassifier().SetInstanceTypeName(newValue.(string))
	default:
		eClassifier.eNamedElementImpl.ESetFromID(featureID, newValue)
	}
}

func (eClassifier *eClassifierImpl) EUnsetFromID(featureID int) {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		eClassifier.asEClassifier().SetClassifierID(-1)
	case ECLASSIFIER__INSTANCE_CLASS:
		eClassifier.asEClassifier().SetInstanceClass(nil)
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		eClassifier.asEClassifier().SetInstanceTypeName("")
	default:
		eClassifier.eNamedElementImpl.EUnsetFromID(featureID)
	}
}

func (eClassifier *eClassifierImpl) EIsSetFromID(featureID int) bool {
	switch featureID {
	case ECLASSIFIER__CLASSIFIER_ID:
		return eClassifier.classifierID != -1
	case ECLASSIFIER__DEFAULT_VALUE:
		return eClassifier.GetDefaultValue() != nil
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.GetEPackage() != nil
	case ECLASSIFIER__INSTANCE_CLASS:
		return eClassifier.instanceClass != nil
	case ECLASSIFIER__INSTANCE_TYPE_NAME:
		return eClassifier.instanceTypeName != ""
	default:
		return eClassifier.eNamedElementImpl.EIsSetFromID(featureID)
	}
}

func (eClassifier *eClassifierImpl) EInvokeFromID(operationID int, arguments EList) interface{} {
	switch operationID {
	case ECLASSIFIER__IS_INSTANCE_EJAVAOBJECT:
		return eClassifier.asEClassifier().IsInstance(arguments.Get(0))
	default:
		return eClassifier.eNamedElementImpl.EInvokeFromID(operationID, arguments)
	}
}

func (eClassifier *eClassifierImpl) EBasicInverseAdd(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASSIFIER__EPACKAGE:
		msgs := notifications
		if eClassifier.EInternalContainer() != nil {
			msgs = eClassifier.EBasicRemoveFromContainer(msgs)
		}
		return eClassifier.EBasicSetContainer(otherEnd, ECLASSIFIER__EPACKAGE, msgs)
	default:
		return eClassifier.eNamedElementImpl.EBasicInverseAdd(otherEnd, featureID, notifications)
	}
}

func (eClassifier *eClassifierImpl) EBasicInverseRemove(otherEnd EObject, featureID int, notifications ENotificationChain) ENotificationChain {
	switch featureID {
	case ECLASSIFIER__EPACKAGE:
		return eClassifier.EBasicSetContainer(nil, ECLASSIFIER__EPACKAGE, notifications)
	default:
		return eClassifier.eNamedElementImpl.EBasicInverseRemove(otherEnd, featureID, notifications)
	}
}
