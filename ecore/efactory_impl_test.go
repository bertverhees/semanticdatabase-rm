// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEFactory() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEFactoryAsEFactory(t *testing.T) {
	o := newEFactoryImpl()
	assert.Equal(t, o, o.asEFactory())
}

func TestEFactoryStaticClass(t *testing.T) {
	o := newEFactoryImpl()
	assert.Equal(t, GetPackage().GetEFactory(), o.EStaticClass())
}

func TestEFactoryFeatureCount(t *testing.T) {
	o := newEFactoryImpl()
	assert.Equal(t, EFACTORY_FEATURE_COUNT, o.EStaticFeatureCount())
}

func TestEFactoryEPackageGet(t *testing.T) {
	// default
	o := newEFactoryImpl()
	assert.Nil(t, o.GetEPackage())

	// set a mock container
	v := new(MockEPackage)
	o.ESetInternalContainer(v, EFACTORY__EPACKAGE)

	// no proxy
	v.On("EIsProxy").Return(false)
	assert.Equal(t, v, o.GetEPackage())
}

func TestEFactoryEPackageSet(t *testing.T) {
	// object
	o := newEFactoryImpl()

	// add listener
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	o.EAdapters().Add(mockAdapter)
	mock.AssertExpectationsForObjects(t, mockAdapter)

	// set with the mock value
	mockValue := new(MockEPackage)
	mockResource := new(MockEResource)
	mockValue.On("EInverseAdd", o, EPACKAGE__EFACTORY_INSTANCE, nil).Return(nil).Once()
	mockValue.On("EResource").Return(mockResource).Once()
	mockResource.On("Attached", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.SetEPackage(mockValue)
	mock.AssertExpectationsForObjects(t, mockAdapter, mockValue, mockResource)

	// set with the same mock value
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.SetEPackage(mockValue)
	mock.AssertExpectationsForObjects(t, mockAdapter, mockValue, mockResource)

	// another value - in a different resource
	mockValue2 := new(MockEPackage)
	mockResource2 := new(MockEResource)
	mockValue.On("EInverseRemove", o, EPACKAGE__EFACTORY_INSTANCE, nil).Return(nil).Once()
	mockValue.On("EResource").Return(mockResource).Once()
	mockValue2.On("EInverseAdd", o, EPACKAGE__EFACTORY_INSTANCE, nil).Return(nil).Once()
	mockValue2.On("EResource").Return(mockResource2).Once()
	mockResource.On("Detached", o).Once()
	mockResource2.On("Attached", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.SetEPackage(mockValue2)
	mock.AssertExpectationsForObjects(t, mockAdapter, mockValue, mockResource, mockValue2, mockResource2)
}

func TestEFactoryEPackageBasicSet(t *testing.T) {
	o := newEFactoryImpl()

	// add listener
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	o.EAdapters().Add(mockAdapter)
	mock.AssertExpectationsForObjects(t, mockAdapter)

	mockValue := new(MockEPackage)
	mockNotifications := new(MockENotificationChain)
	mockValue.On("EResource").Return(nil).Once()
	mockNotifications.On("Add", mock.MatchedBy(func(notification ENotification) bool {
		return notification.GetEventType() == SET && notification.GetFeatureID() == EFACTORY__EPACKAGE
	})).Return(true).Once()
	o.basicSetEPackage(mockValue, mockNotifications)
	mock.AssertExpectationsForObjects(t, mockAdapter, mockValue, mockNotifications)
}

func TestEFactoryConvertToStringOperation(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.ConvertToString(nil, nil) })
}
func TestEFactoryCreateOperation(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.Create(nil) })
}
func TestEFactoryCreateFromStringOperation(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.CreateFromString(nil, "") })
}

func TestEFactoryEGetFromID(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.EGetFromID(-1, true) })
	assert.Equal(t, o.GetEPackage(), o.EGetFromID(EFACTORY__EPACKAGE, true))
}

func TestEFactoryESetFromID(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.ESetFromID(-1, nil) })
	{
		mockValue := new(MockEPackage)
		mockValue.On("EIsProxy").Return(false).Once()
		mockValue.On("EResource").Return(nil).Once()
		mockValue.On("EInverseAdd", o, EPACKAGE__EFACTORY_INSTANCE, nil).Return(nil).Once()
		o.ESetFromID(EFACTORY__EPACKAGE, mockValue)
		assert.Equal(t, mockValue, o.EGetFromID(EFACTORY__EPACKAGE, false))
		mock.AssertExpectationsForObjects(t, mockValue)
	}

}

func TestEFactoryEIsSetFromID(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.EIsSetFromID(-1) })
	assert.False(t, o.EIsSetFromID(EFACTORY__EPACKAGE))
}

func TestEFactoryEUnsetFromID(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.EUnsetFromID(-1) })
	{
		o.EUnsetFromID(EFACTORY__EPACKAGE)
		assert.Nil(t, o.EGetFromID(EFACTORY__EPACKAGE, false))
	}
}

func TestEFactoryEInvokeFromID(t *testing.T) {
	o := newEFactoryImpl()
	assert.Panics(t, func() { o.EInvokeFromID(-1, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(EFACTORY__CONVERT_TO_STRING_EDATATYPE_EJAVAOBJECT, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(EFACTORY__CREATE_ECLASS, nil) })
	assert.Panics(t, func() { o.EInvokeFromID(EFACTORY__CREATE_FROM_STRING_EDATATYPE_ESTRING, nil) })
}

func TestEFactoryEBasicInverseAdd(t *testing.T) {
	o := newEFactoryImpl()
	{
		mockObject := new(MockEObject)
		mockNotifications := new(MockENotificationChain)
		assert.Equal(t, mockNotifications, o.EBasicInverseAdd(mockObject, -1, mockNotifications))
	}
	{
		mockObject := new(MockEPackage)
		mockObject.On("EResource").Return(nil).Once()
		mockObject.On("EIsProxy").Return(false).Once()
		o.EBasicInverseAdd(mockObject, EFACTORY__EPACKAGE, nil)
		assert.Equal(t, mockObject, o.GetEPackage())
		mock.AssertExpectationsForObjects(t, mockObject)

		mockOther := new(MockEPackage)
		mockOther.On("EResource").Return(nil).Once()
		mockOther.On("EIsProxy").Return(false).Once()
		mockObject.On("EResource").Return(nil).Once()
		mockObject.On("EInverseRemove", o, EPACKAGE__EFACTORY_INSTANCE, nil).Return(nil).Once()
		o.EBasicInverseAdd(mockOther, EFACTORY__EPACKAGE, nil)
		assert.Equal(t, mockOther, o.GetEPackage())
		mock.AssertExpectationsForObjects(t, mockObject, mockOther)
	}

}

func TestEFactoryEBasicInverseRemove(t *testing.T) {
	o := newEFactoryImpl()
	{
		mockObject := new(MockEObject)
		mockNotifications := new(MockENotificationChain)
		assert.Equal(t, mockNotifications, o.EBasicInverseRemove(mockObject, -1, mockNotifications))
	}
	{
		mockObject := new(MockEPackage)
		o.EBasicInverseRemove(mockObject, EFACTORY__EPACKAGE, nil)
		mock.AssertExpectationsForObjects(t, mockObject)
	}

}
