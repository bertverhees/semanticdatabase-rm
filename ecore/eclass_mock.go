// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

type MockEClass struct {
	MockEClassifier
}

// IsAbstract get the value of isAbstract
func (eClass *MockEClass) IsAbstract() bool {
	ret := eClass.Called()

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

// SetAbstract provides mock implementation for setting the value of isAbstract
func (eClass *MockEClass) SetAbstract(newIsAbstract bool) {
	eClass.Called(newIsAbstract)
}

// GetEAllAttributes get the value of eAllAttributes
func (eClass *MockEClass) GetEAllAttributes() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAllContainments get the value of eAllContainments
func (eClass *MockEClass) GetEAllContainments() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAllOperations get the value of eAllOperations
func (eClass *MockEClass) GetEAllOperations() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAllReferences get the value of eAllReferences
func (eClass *MockEClass) GetEAllReferences() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAllStructuralFeatures get the value of eAllStructuralFeatures
func (eClass *MockEClass) GetEAllStructuralFeatures() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAllSuperTypes get the value of eAllSuperTypes
func (eClass *MockEClass) GetEAllSuperTypes() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEAttributes get the value of eAttributes
func (eClass *MockEClass) GetEAttributes() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEContainmentFeatures get the value of eContainmentFeatures
func (eClass *MockEClass) GetEContainmentFeatures() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetECrossReferenceFeatures get the value of eCrossReferenceFeatures
func (eClass *MockEClass) GetECrossReferenceFeatures() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEIDAttribute get the value of eIDAttribute
func (eClass *MockEClass) GetEIDAttribute() EAttribute {
	ret := eClass.Called()

	var r EAttribute
	if rf, ok := ret.Get(0).(func() EAttribute); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EAttribute)
		}
	}

	return r
}

// GetEOperations get the value of eOperations
func (eClass *MockEClass) GetEOperations() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEReferences get the value of eReferences
func (eClass *MockEClass) GetEReferences() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetEStructuralFeatures get the value of eStructuralFeatures
func (eClass *MockEClass) GetEStructuralFeatures() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// GetESuperTypes get the value of eSuperTypes
func (eClass *MockEClass) GetESuperTypes() EList {
	ret := eClass.Called()

	var r EList
	if rf, ok := ret.Get(0).(func() EList); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EList)
		}
	}

	return r
}

// IsInterface get the value of isInterface
func (eClass *MockEClass) IsInterface() bool {
	ret := eClass.Called()

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}

// SetInterface provides mock implementation for setting the value of isInterface
func (eClass *MockEClass) SetInterface(newIsInterface bool) {
	eClass.Called(newIsInterface)
}

// GetEOperation provides mock implementation
func (eClass *MockEClass) GetEOperation(operationID int) EOperation {
	ret := eClass.Called(operationID)

	var r EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EOperation)
		}
	}

	return r
}

// GetEStructuralFeature provides mock implementation
func (eClass *MockEClass) GetEStructuralFeature(featureID int) EStructuralFeature {
	ret := eClass.Called(featureID)

	var r EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EStructuralFeature)
		}
	}

	return r
}

// GetEStructuralFeatureFromName provides mock implementation
func (eClass *MockEClass) GetEStructuralFeatureFromName(featureName string) EStructuralFeature {
	ret := eClass.Called(featureName)

	var r EStructuralFeature
	if rf, ok := ret.Get(0).(func() EStructuralFeature); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EStructuralFeature)
		}
	}

	return r
}

// GetFeatureCount provides mock implementation
func (eClass *MockEClass) GetFeatureCount() int {
	ret := eClass.Called()

	var r int
	if rf, ok := ret.Get(0).(func() int); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(int)
		}
	}

	return r
}

// GetFeatureID provides mock implementation
func (eClass *MockEClass) GetFeatureID(feature EStructuralFeature) int {
	ret := eClass.Called(feature)

	var r int
	if rf, ok := ret.Get(0).(func() int); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(int)
		}
	}

	return r
}

// GetFeatureType provides mock implementation
func (eClass *MockEClass) GetFeatureType(feature EStructuralFeature) EClassifier {
	ret := eClass.Called(feature)

	var r EClassifier
	if rf, ok := ret.Get(0).(func() EClassifier); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EClassifier)
		}
	}

	return r
}

// GetOperationCount provides mock implementation
func (eClass *MockEClass) GetOperationCount() int {
	ret := eClass.Called()

	var r int
	if rf, ok := ret.Get(0).(func() int); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(int)
		}
	}

	return r
}

// GetOperationID provides mock implementation
func (eClass *MockEClass) GetOperationID(operation EOperation) int {
	ret := eClass.Called(operation)

	var r int
	if rf, ok := ret.Get(0).(func() int); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(int)
		}
	}

	return r
}

// GetOverride provides mock implementation
func (eClass *MockEClass) GetOverride(operation EOperation) EOperation {
	ret := eClass.Called(operation)

	var r EOperation
	if rf, ok := ret.Get(0).(func() EOperation); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(EOperation)
		}
	}

	return r
}

// IsSuperTypeOf provides mock implementation
func (eClass *MockEClass) IsSuperTypeOf(someClass EClass) bool {
	ret := eClass.Called(someClass)

	var r bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r = rf()
	} else {
		if ret.Get(0) != nil {
			r = ret.Get(0).(bool)
		}
	}

	return r
}
