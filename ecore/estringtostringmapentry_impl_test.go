// Code generated by soft.generator.go. DO NOT EDIT.

// *****************************************************************************
// Copyright(c) 2021 MASA Group
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.
//
// *****************************************************************************

package ecore

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"testing"
)

func discardEStringToStringMapEntry() {
	_ = assert.Equal
	_ = mock.Anything
	_ = testing.Coverage
}

func TestEStringToStringMapEntryAsEStringToStringMapEntry(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Equal(t, o, o.asEStringToStringMapEntry())
}

func TestEStringToStringMapEntryStaticClass(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Equal(t, GetPackage().GetEStringToStringMapEntry(), o.EStaticClass())
}

func TestEStringToStringMapEntryFeatureCount(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Equal(t, ESTRING_TO_STRING_MAP_ENTRY_FEATURE_COUNT, o.EStaticFeatureCount())
}

func TestEStringToStringMapEntryGetKey(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Equal(t, o.GetStringKey(), o.GetKey())
}

func TestEStringToStringMapEntryGetValue(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Equal(t, o.GetStringValue(), o.GetValue())
}

func TestEStringToStringMapEntryKeyGet(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	// get default value
	assert.Equal(t, string(""), o.GetStringKey())
	// get initialized value
	v := string("Test String")
	o.key = v
	assert.Equal(t, v, o.GetStringKey())
}

func TestEStringToStringMapEntryKeySet(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	v := string("Test String")
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.EAdapters().Add(mockAdapter)
	o.SetStringKey(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStringToStringMapEntryValueGet(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	// get default value
	assert.Equal(t, string(""), o.GetStringValue())
	// get initialized value
	v := string("Test String")
	o.value = v
	assert.Equal(t, v, o.GetStringValue())
}

func TestEStringToStringMapEntryValueSet(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	v := string("Test String")
	mockAdapter := new(MockEAdapter)
	mockAdapter.On("SetTarget", o).Once()
	mockAdapter.On("NotifyChanged", mock.Anything).Once()
	o.EAdapters().Add(mockAdapter)
	o.SetStringValue(v)
	mockAdapter.AssertExpectations(t)
}

func TestEStringToStringMapEntryEGetFromID(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Panics(t, func() { o.EGetFromID(-1, true) })
	assert.Equal(t, o.GetStringKey(), o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, true))
	assert.Equal(t, o.GetStringValue(), o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, true))
}

func TestEStringToStringMapEntryESetFromID(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Panics(t, func() { o.ESetFromID(-1, nil) })
	{
		v := string("Test String")
		o.ESetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, v)
		assert.Equal(t, v, o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, false))
	}
	{
		v := string("Test String")
		o.ESetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, v)
		assert.Equal(t, v, o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, false))
	}

}

func TestEStringToStringMapEntryEIsSetFromID(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Panics(t, func() { o.EIsSetFromID(-1) })
	assert.False(t, o.EIsSetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY))
	assert.False(t, o.EIsSetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE))
}

func TestEStringToStringMapEntryEUnsetFromID(t *testing.T) {
	o := newEStringToStringMapEntryImpl()
	assert.Panics(t, func() { o.EUnsetFromID(-1) })
	{
		o.EUnsetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY)
		v := o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__KEY, false)
		assert.Equal(t, string(""), v)
	}
	{
		o.EUnsetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE)
		v := o.EGetFromID(ESTRING_TO_STRING_MAP_ENTRY__VALUE, false)
		assert.Equal(t, string(""), v)
	}
}
